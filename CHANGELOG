Version 2020.12.23
* Support using a union to filter types out of a type parameter.
* Fix the attribute type obtained from `attr.ib(default=())`.

Version 2020.12.16
* Support NewType in stubs.
* Treat classes whose metaclass inherits from type(Protocol) as abstract.
* Automatically promote __init_subclass__ to a classmethod.
* Improve unpacking and function arg matching by tracking unpacked iterables.
* Fix a [name-error] caused by a bad regex check for comprehensions.
* Strip carriage returns from files read as bytes.
* Support using an AnnotationClass in an isinstance check.
* Support aliases to methods of classes in the same module in the pyi parser.

Version 2020.12.02
* Update typeshed pin to commit fae6bda from October 12.
* Improve the [bad-return-type] error message.

Version 2020.11.23
* Treat modules as hashable.
* Support typing_extensions.Literal in source files.
* Take classmethods and staticmethods into account in protocols.

Version 2020.11.12
* Support `# type: ignore[errorcode, ...]` in pyi files.
* Always allow classes to match typing.Hashable.
* Fix a bug in pytype's handling of Literal[<str>].

Version 2020.11.03
* Drop support for running pytype under Python 3.5.
* Add a dependency on pybind11 for new typegraph metrics.
* merge-pyi support for "import collections.abc as abc" style imports.

Version 2020.10.08
* Add runtime_checkable to typing.pytd.

Version 2020.09.29
* Fix a bug in attaching function type comments to opcodes.
* Use `py -x.y` instead of `pythonx.y` for windows.

Version 2020.09.24
* Fix a bug involving multiple super calls.
* Support tuple slicing.
* Make all tests pass in Python 3.8.
* Respect all typing re-exports in the pyi parser.
* Create C++ metrics classes for tracking typegraph metrics.
* Update attrs pytd files to support version 20.2.0.

Version 2020.09.16
* Fix a parser bug when importing and re-exporting a submodule.
* Call `python -m ninja` instead of `ninja`.
* Don't crash when processing a pyi containing __all__.
* Convert Bindings() to a list in cfg.py.

Version 2020.09.14
* Drop the --python_exe option.
* Have check_py and generate_pyi accept a source string instead of a filename.
* Pass around an options.open_function that is used in place of builtins.open.
* Fix some Python 3.8 bugs.
* Fix python-incompatible syntax in pytd files.
* Print 'leaving directory' after ninja command.
* Support sys.version_info tuple checks that do not use slicing.

Version 2020.08.28
* Let multiple PyTDFunction signatures match when *args/**kwargs is present.

Version 2020.08.17
* Allow `# type: ignore` in more places in pyi files.
* Support TypedDict function-based syntax in pyi files.
* Add more developer documentation.

Version 2020.08.10
* Support aliases to unions with type parameters.
* Don't crash when a nested NamedTuple subclass hits max depth.
* Support kw_only arg to attr.ib.
* Add more developer documentation.

Version 2020.07.30
* Allow typing.AnyStr to be used to parameterize custom generic classes.
* FIX: We were occasionally reusing an exhausted generator in Union constructor.
* Support imported type macros in pyi files.
* When raising not-supported-yet for Alias = Union[T, ...] set the type to Any.

Version 2020.07.24
* pyi parser: allow aliases inside a class to values outside the class.
* Copy annotations instead of modifying them when adding a scope.
* Make self.__class__ return Any in __init__.
* Check object visibility before setting attributes.

Version 2020.07.20
* pyi parser: support importing TypedDict from typing_extensions.

Version 2020.07.14
* Populate the `cls` arg in classmethods with the class type.
* Log [not-supported-yet] as soon as a recursive type alias is defined.
* pyi parser: allow the 'total' keyword for subclasses of TypedDict.
* Make collections.OrderedDict reversible.
* Make the behavior of io.open match builtins.open.
* Add/fix some opcodes for Python 3.8.

Version 2020.06.26
* Treat objects as True in a boolean context, unless explicitly overridden.
* If cls is the class argument of Foo.__new__, treat `cls is Foo` as ambiguous.
* Add basic support for third-party flax dataclasses.
* Autodetect number of jobs with --jobs auto.

Version 2020.06.01
* Update typeshed pin to commit 5fe6a5b from May 18.
* Support callback protocols.
* Get rid of the RemoveInheritedMethods pyi optimisation.
* (In-progress) Add partial Python 3.8 support.

Version 2020.05.13
* Check attrs default values against annotations.
* Add an experimental --check-variable-types mode.

Version 2020.05.07
* Drop support for analyzing Python 3.4.
* Add special builtins support for filter(None, xs).
* Open-source a developer doc on minor version upgrades.
* Improve support for @typing.overload.
* Improve annotated decorators' handling of classes.

Version 2020.04.22
* Drop support for running pytype under Python 2.
* Report [not-supported-yet] when aliasing Union[T, ...].
* Add typing.OrderedDict.
* Improve how annotations are tracked and applied.
* Allow functions to match types.FunctionType.
* Don't report [invalid-typevar] when type() is called on a TypeVar.

Version 2020.04.01
* Do some test restructuring and cleanup.

Version 2020.03.19
* Fix a couple of pytype crashes.
* Do not allow mixing string types in IO.write() in Python 3.

Version 2020.02.20
* Stop rewriting (x: X = None) to (x: Optional[X] = None).

Version 2020.02.06
* Update typeshed pin to commit d5851ec from January 24.

Version 2020.01.24
* Don't fail on mypy-style '# type: ignore[code, ...]' comments.
* Support separating disabled error classes by whitespace in addition to commas.

Version 2020.01.08
* Support @typing.type_check_only on classes and functions in pyi files.

Version 2020.01.07
* Add a 2020 Q1 roadmap.
* Improve handling of forward references with type errors.

Version 2019.12.17
* Improve support for forward references and function type comments.
* Support typing.ClassVar and dataclasses.InitVar.
* Fix some attrs and dataclasses bugs.

Version 2019.12.06
* Update typeshed pin to commit f7f6860 from December 1.
* Allow running pytype-single as `python -m pytype-single`.

Version 2019.11.27
* Support using typing.Counter as a generic.
* Handle non-utf8 string literals without crashing in host Python 3.
* Allow running pytype as `python -m pytype`.
* Add a `-j/--jobs` option to pytype.
* Detect and raise errors for recursive type aliases, rather than crashing.

Version 2019.10.17
* Make Python 2 metaclass declarations an error in Python 3.
* Add basic support for dataclasses.
* Open-source a partial numpy type stub.
* Fix some bugs in the pyi parser.

Version 2019.09.17
* Update typeshed pin to commit 668988f from September 5.

Version 2019.09.06
* Update typeshed pin to commit ce0f5b2 from August 22.

Version 2019.08.29
* Improve the usability of the pytype.io module.
* Add basic callgraph generation to pytype.tools.xref.
* Update typeshed pin to commit fab2ee0 from August 16.
* Add an experimental --precise-return mode.

Version 2019.08.09
* Partially support typing[_extensions].Literal in pyi files.
* Adopt a unicode pytype logo.
* Add a traces library for accessing pytype's inferred type information.
* Add `annotate-ast` subtool for annotating ASTs with type information (WIP).

Version 2019.07.30
* Allow trailing commas in lists in type stubs.

Version 2019.07.26
* Update typeshed pin to commit 40215d1 from July 18.
* Improve support for subprocess.Popen in Python 3.

Version 2019.07.11
* Update typeshed pin to commit e1e5c83 from July 1.
* Support `async def` in pyi files.

Version 2019.06.28
* Fix attrs bugs.
* Check exception types in `except` blocks.

Version 2019.06.21
* Support typing.overload in source files.
* Fix merge-pyi bugs.
* Support basic attrs usage.

Version 2019.05.31
* Add an xref output mode that creates a (lineno, column) -> type map.
* Fix an AnyStr bug in the Python 2 filter() definitions.

Version 2019.05.24
* Fix an import bug.
* Support extracting pytype types from xref.

Version 2019.05.15
* Update typeshed pin to commit 50d98ac from May 13.
* Support nested classes in pyi files.

Version 2019.05.08
* Fix a bug in pyi lookup of re-exported imports.

Version 2019.05.06
* Update typeshed pin to commit 4e572ae from April 23.
* Support collections.namedtuple in pyi files.
* Support module aliases in pyi files.

Version 2019.04.26
* Improve typegraph performance.

Version 2019.04.19
* Support method matching for custom PEP 544 protocols.

Version 2019.04.12
* Update typeshed pin to commit cfa65b8 from April 8.
* Fix comparisons of primitive objects of the same type.
* Limit the number of tracebacks shown for one error.

Version 2019.04.05
* Improve Python 3 definitions in pytype's enum and typing stubs.

Version 2019.04.02.1
* Require typed_ast only in Python 3.3+.

Version 2019.04.02
* Simplify the text pytype prints to the terminal.
* Rename the default pytype output directory from pytype_output to .pytype.
* Add a --no-cache option to send pytype output to a temporary directory.
* Update typeshed pin to commit 9b9ff64 from March 29.
* Support typing.ChainMap and typing.Counter.

Version 2019.03.27
* Support `# type: ignore` on import lines in pyi files.

Version 2019.03.21
* Update typeshed pin to commit afe6656 from March 16.
* Add missing Python 3 methods {bytearray,list}.{clear,copy}.

Version 2019.03.15
* Make --parse-pyi verify that the AST has been resolved.
* Fix pyi parsing of `typing` aliases.
* Remove mirror of asyncio.tasks stub in favor of the canonical typeshed one.
* Support type macros in pyi files.

Version 2019.03.08
* Fix bad type definitions for builtins reversed and enumerate.

Version 2019.03.01
* Make pytype's type stubs loadable in Python 3.4.

Version 2019.02.13
* Support asynchronous generators.
* Fix variable annotations in Python 3.7.
* Fix a pyi circular import bug.

Version 2019.01.30
* Support future.utils.with_metaclass.
* Support coroutine annotation.

Version 2019.01.18
* Add support for unittest.TestCase.setUp().
* Open-source a user guide.
* Open-source the FAQ.

Version 2018.12.21
* Improve support and add testing framework for target Python 3.7.
* Handle files that generate parse errors more gracefully.

Version 2018.12.11
* Add rudimentary support for target Python 3.7.
* Make error messages for Python operators friendlier.
* Set the default target python version to the host version.
* Change default behavior to stop at first error and add a --keep-going option.
* Flag annotations with the wrong parameter count and invalid uses of NoReturn.
* Improve pytype and merge-pyi status messages.
* Support PEP-526 variable annotation syntax.

Version 2018.11.06
* Use --imports_info to allow preserving generated type stubs between runs.
* Handle TypeParameter inheritance more robustly with a union-find approach.
* Get more precise deps from importlab to allow build parallelization.
* Trim the dependencies of builtin and system files from the import graph.
* Generate a build.ninja file and call pytype-single via ninja.

Version 2018.10.30
* Improve the display of tracebacks in error messages.
* Make several Python 3 fixes and improvements, including better enum support.
* Fix evaluation of conditionals inside closures.
* Improve handling of comparison operators.
* Add a --strict-import option to not load submodules not explicitly imported.

Version 2018.09.26
* Generate default type stubs for pip-installed dependencies.
* Remove the output directory at the start of each pytype run.

Version 2018.09.25
* Improve Python 3 varargs and kwargs support.
* Support user-defined generic types.
* Improve --generate-config to show a full sample config file.

Version 2018.09.19
* Allow the command-line `inputs` option to be specified in a config file.
* Support hidden files.
* Make the behavior of --exclude more intuitive.

Version 2018.09.18
* Support setting --exclude in a config file.
* Add support for annotations in inner functions.
* Officially support running under Python 3.7.

Version 2018.09.07.1
* Update typeshed pin to commit c968124 from September 6.

Version 2018.09.07
* Make typing.NamedTuple a class for Python 3.6+.

Version 2018.08.10
* Add --exclude flag to support excluding files or directories from analysis.

Version 2018.07.13
* Improve type checking of typing.Generator.
* Enable logging from C++ in debug builds.
* Expose pytype-single's return code.
* Add the ability to record trace data during bytecode execution.

Version 2018.06.19
* Tweak the installation instructions and add a quickstart guide.

Version 2018.06.18
* Document pytype's platform support.

Version 2018.06.15
* Officially support running under Python 3.5 and 3.6.
* Expose pytype-single's --version option.
* Optimization: skip argument parameter combinations we've already seen.
* Bring back pytype-single's --timeout option.
* Add --return-success to pytype-single to report errors but return success.

Version 2018.06.05
* Print transient progress messages.
* Rename pytype to pytype-single and pytype-all to pytype.
* Use the system and site package dependencies found by importlab in pytype-all.
* Make the pytype-all help message friendlier.
* Allow pytype-single args to be specified in a config file.
* Add a merge-pyi subtool to merge pyi files into their Python sources.
* Expose some pytype-single options to pytype-all.
* Add a script which runs pytype tests.
* Allow specifying config file variables for pytype-all on the command line.
* Add a --version option to display the pytype version.

Version 2018.05.22.1
* Use different flags when compiling with gcc or clang.

Version 2018.05.22
* Add flags for building with clang on Mac OS X.
* Allow pytype-all to accept directories as input.
* Change pytype-all's config file to INI style, and fall back to setup.cfg.
* Make analyze_annotated a command-line option.
* Add pythonpath guessing to pytype-all.

Version 2018.05.15
* Make some fixes to the release packaging.

Version 2018.05.14
* Release pytype-all.

Version 0.2
* Release pytype.
