import __future__
import attr._make
from typing import Any, List

_AndValidator: Any
_InValidator: Any
_InstanceOfValidator: Any
_OptionalValidator: Any
_ProvidesValidator: Any
__all__: List[str]
absolute_import: __future__._Feature
division: __future__._Feature
print_function: __future__._Feature

def and_(*validators) -> Any: ...
def attrib(default = ..., validator = ..., repr = ..., cmp = ..., hash = ..., init = ..., convert = ..., metadata = ..., type = ..., converter = ..., factory = ..., kw_only = ...) -> attr._make._CountingAttr: ...
def attrs(maybe_cls = ..., these = ..., repr_ns = ..., repr = ..., cmp = ..., hash = ..., init = ..., slots = ..., frozen = ..., weakref_slot = ..., str = ..., auto_attribs = ..., kw_only = ..., cache_hash = ...) -> Any: ...
def in_(options) -> Any: ...
def instance_of(type) -> Any: ...
def optional(validator) -> Any: ...
def provides(interface) -> Any: ...
