# This file should eventually track typeshed a lot more closely, to
# minimise the diffs we have to maintain here.


from typing import (
    AbstractSet, AnyStr, AsyncGenerator, Awaitable, BinaryIO, ByteString,
    Callable, Coroutine, Dict, FrozenSet, Generator, Generic, IO, ItemsView,
    Iterable, Iterator, KeysView, List, Mapping, MutableSequence, Optional,
    Reversible, Sequence, Set, Sized, SupportsAbs, SupportsBytes, SupportsFloat,
    SupportsInt, Tuple, Type, Union, ValuesView)

# "_T", "_K", and "_V" are hardcoded in abstract.py
_T = TypeVar('_T')
_T2 = TypeVar('_T2')
_T3 = TypeVar('_T3')
_T4 = TypeVar('_T4')
_K = TypeVar('_K')
_V = TypeVar('_V')
_K2 = TypeVar('_K2')
_V2 = TypeVar('_V2')
_NUMBER = TypeVar('_NUMBER', bound=complex)

# isinstance() and issubclass() can take a type or an arbitrarily nested
# tuple of types. This adds support for a few levels; in theory we want
# TypeTuple = type or tuple[TypeTuple]
TypeTuple = type or tuple[type or tuple[type, ...], ...]

def __import__(name: str or bytes or bytearray, ...) -> module
def abs(x) -> ?
def all(iterable) -> bool
def any(iterable) -> bool
def apply(object: Callable, ...) -> NoneType
def bin(number: int or float) -> str
def callable(obj) -> bool
def chr(i: int) -> str
def cmp(x, y) -> int
def coerce(x: int, y: int) -> tuple[int, int]
def coerce(x: int or float, y: float) -> tuple[float, float]
def coerce(x: int or float or complex, y: complex) -> tuple[complex, complex]
def coerce(x: float, y: int) -> tuple[float, float]
def coerce(x, y) -> tuple[object, object]
def coerce(x: list[_T], y: list[_T]) -> tuple[list[_T], list[_T]]
def coerce(x: tuple[_T, ...], y: tuple[_T, ...]) -> tuple[tuple[_T, ...], tuple[_T, ...]]
def coerce(x: complex, y: int or float) -> tuple[complex, complex]
def coerce(x: Callable, y: Callable) -> tuple[Callable, Callable]
def coerce(x: type, y: type) -> tuple[type, type]
def coerce(x: _T, y: _T) -> tuple[_T, _T]  # E.g. coerce([], [1]) -> ([], [1])
def compile(source, filename: str, mode: str, flags: int = ..., dont_inherit: int = ...) -> code: ...
def delattr(object, name: str or bytes or bytearray) -> None
def dir(...) -> list[str]
def divmod(x: int, y: int) -> tuple[int, int]
def divmod(x: int or float, y: int or float) -> tuple[float, float]
def divmod(x: int or float or complex, y: int or float or complex) -> tuple[complex, complex]
def eval(src, ...) -> ?  # Can't say *anything* about the result -- different from "-> object"
def exec(src, ...) -> NoneType
def execfile(filename: str, ...) -> NoneType
def filter(function: Optional[Callable[[AnyStr], ?]], iterable: AnyStr) -> AnyStr
def filter(function: Optional[Callable[[_T], ?]], iterable: Tuple[_T, ...]) -> Tuple[_T, ...]
def filter(function: Optional[Callable[[_T], ?]], iterable: Iterable[_T]) -> List[_T]
def format(value, ...) -> str
def getattr(value, attr: str, ...) -> ?
def globals() -> dict[str, ?]
def hasattr(object, name: str) -> bool
def hash(obj) -> int
def hex(number: int) -> str
def id(obj) -> int
def intern(string: str or bytearray) -> str
def isinstance(object, class_or_type_or_tuple: TypeTuple) -> bool
def issubclass(cls: type, class_or_type_or_tuple: TypeTuple) -> bool
def iter(collection: bytearray) -> bytearray_iterator
def iter(collection: list[_T]) -> listiterator[_T]
def iter(collection: tuple[_T, ...]) -> tupleiterator[_T]
def iter(collection: set[_T]) -> setiterator[_T]
def iter(collection: dict[_T, _T2]) -> `dictionary-keyiterator`[_T]
def iter(collection: Generator[_T]) -> Generator[_T]
def iter(collection: Iterable[_T]) -> Iterator[_T]
def iter(func: typing.Callable[[], Union[_T, _T2]], sentinel: _T) -> `callable-iterator`[_T2]
def len(obj: Sized) -> int
def locals() -> dict[str, object]
def map(function, *sequences: Iterable[nothing]) -> Iterator[nothing]
def map(function: Callable[..., _T], *sequences: Iterable) -> Iterator[_T]
def max(iterable: Iterable[_T], key: Callable = ...) -> _T
def max(arg1: _T, arg2: _T2, *, key: Callable = ...) -> _T or _T2
def max(arg1: _T, arg2: _T2, arg3: _T3, *, key: Callable = ...) -> _T or _T2 or _T3
def max(arg1: _T, arg2: _T2, arg3: _T3, arg4: _T4, *, key = Callable) -> _T or _T2 or _T3 or _T4
def max(arg1: _T, arg2: _T, arg3: _T, arg4: _T, arg5: _T, *args: _T, key: Callable = ...) -> _T
def min(iterable: Iterable[_T], key: Callable = ...) -> _T
def min(arg1: _T, arg2: _T2, *, key: Callable = ...) -> _T or _T2
def min(arg1: _T, arg2: _T2, arg3: _T3, *, key: Callable = ...) -> _T or _T2 or _T3
def min(arg1: _T, arg2: _T2, arg3: _T3, arg4: _T4, *, key = Callable) -> _T or _T2 or _T3 or _T4
def min(arg1: _T, arg2: _T, arg3: _T, arg4: _T, arg5: _T, *args: _T, key: Callable = ...) -> _T
def next(iterator: Iterator[_T], default: _T2 = ...) -> _T or _T2
def oct(number: int) -> str
def ord(c: str or bytes) -> int
def pow(x: int, y: int, ...) -> float or int
def pow(x: int or float or complex, y: complex, ...) -> complex
def pow(x: int or float, y: float, ...) -> float
def pow(x: float, y: int, ...) -> float
def pow(x: complex, y: int or float, ...) -> complex
def reduce(function: Callable[..., _T], iterable: Iterable[_T2]) -> _T or _T2
def reduce(function: Callable, iterable: Iterable[nothing], initial: _T) -> _T
def reduce(function: Callable[..., _T], iterable: Iterable, initial) -> _T
# No reload() in Python3
def reload(mod: module) -> module
def repr(x) -> str
def round(number: int or float or typing.SupportsRound, ...) -> float
def setattr(object, name: str, value) -> NoneType
def sorted(iterable: Iterable[_T], ...) -> list[_T]
def sum(iterable: Iterable[_NUMBER]) -> _NUMBER
def sum(iterable: Iterable[_T], start: _T) -> _T
def vars(...) -> dict[str, ?]
def zip() -> Iterator[nothing]
def zip(seq1: Iterable[nothing]) -> Iterator[nothing]
def zip(seq1: Iterable[_T]) -> Iterator[Tuple[_T]]
def zip(seq1: Iterable[nothing], seq2: Iterable) -> Iterator[nothing]
def zip(seq1: Iterable, seq2: Iterable[nothing]) -> Iterator[nothing]
def zip(seq1: Iterable[_T], seq2: Iterable[_T2]) -> Iterator[Tuple[_T, _T2]]
def zip(seq1, seq2, seq3, *seqs: Iterable) -> Iterator[tuple]
def exit(code: ? = ...) -> NoneType:
    raise SystemExit()
def quit() -> NoneType:
    raise SystemExit()
def input(prompt: str = ...) -> str
def print(...) -> NoneType

False = ...  # type: bool
True = ...  # type: bool
NotImplemented = ...  # type: NotImplementedType
None = ...  # type: NoneType
Ellipsis = ...  # type: ellipsis
__debug__ = ...  # type: bool

class object():
    __slots__ = []  # if used as base class
    __bases__ = ...  # type: Tuple[?, ...]
    __dict__ = ...  # type: Dict[str, ?]
    __doc__ = ...  # type: str
    __mro__ = ...  # type: list[?]
    __name__ = ...  # type: str
    __subclasses__ = ...  # type: ?
    __subclasshook__ = ...  # type: ?
    # InterpreterClass will contain this, too:
    __module__ = ...  # type: str
    def __init__(self) -> NoneType
    # Used by special_builtins.Object to handle super.__init__.
    def __init__extra_args(self, *args, **kwargs) -> NoneType
    def __sizeof__(self) -> int
    def __str__(self) -> str
    def __repr__(self) -> str
    def __cmp__(self, y) -> bool
    def __eq__(self, other) -> bool
    def __ne__(self, other) -> bool
    def __ge__(self, other) -> bool
    def __gt__(self, other) -> bool
    def __le__(self, other) -> bool
    def __lt__(self, other) -> bool
    def __hash__(self) -> int
    def __setattr__(self, name, value) -> None
    def __getattribute__(self, name) -> ?
    def __new__(cls: Type[_T]) -> _T
    # Used by special_builtins.Object to handler super.__new__.
    @staticmethod
    def __new__extra_args(cls: Type[_T], *args, **kwargs) -> _T

# old style class. classobj is in fact a subclass of object in Python.
class classobj(object):
    __slots__ = []
    __bases__ = ...  # type: Tuple[?, ...]
    __dict__ = ...  # type: Dict[str, ?]
    __doc__ = ...  # type: str
    __name__ = ...  # type: str
    def __init__(self) -> NoneType
    def __repr__(self) -> str
    def __cmp__(self, y) -> bool

# Not actually a builtin
class NotImplementedType(object):
    pass

class NoneType(object):
    # Note that we don't do __slots__ = [] here. (I.e., we ignore STORE_ATTR
    # errors on NoneType). This is symmetric with LOAD_ATTR.
    pass

class ellipsis(object):
    __slots__ = []

class property(object):
    def __init__(self, fget=..., fset=..., fdel=..., doc=...) -> NoneType
    def __get__(self, ...) -> ?
    def __set__(self, ...) -> ?
    def __delete__(self, ...) -> ?

# TODO(kramm): This is wrong. These classes shouldn't inherit from
# Callable. We should instead generate the right information in pyi (I.e.,
# decorate classes instead of creating constants of type {class,static}method)
class staticmethod(typing.Callable):
    __slots__ = []
    def __init__(self, func) -> NoneType
    def __get__(self, ...) -> ?

class classmethod(typing.Callable):
    __slots__ = []
    def __init__(self, func) -> NoneType
    def __get__(self, ...) -> ?

_T_str = TypeVar('_T_str', bound=str)
class str(Sequence[str]):
    __slots__ = []
    def __new__(cls: Type[_T_str], object = ..., encoding: str = ..., errors: str = ...) -> _T_str
    def __init__(self, object) -> NoneType
    def __init__(self, bytes: bytes, encoding: str = ..., errors: str = ...) -> NoneType
    def __init__(self) -> NoneType
    def __add__(self, y: str) -> str
    def __contains__(self, y) -> bool
    def __float__(self) -> float
    def __getitem__(self, index: int or slice) -> str
    def __getslice__(self, i: Optional[int], j: Optional[int]) -> str
    def __int__(self) -> int
    def __len__(self) -> int
    def __mod__(self, y) -> str
    def __mul__(self, n: int) -> str
    def __rmul__(self, n: int) -> str
    def capitalize(self) -> str
    def casefold(self) -> str  # see section 3.13 of the Unicode standard
    def center(self, width: int, fillchar: str = ...) -> str
    def count(self, sub: str, ...) -> int
    def encode(self, encoding: str = ..., errors: str = ...) -> bytes
    def endswith(self, suffix: str or Tuple[str, ...], start: Optional[int] = ..., end: Optional[int] = ...) -> bool
    def expandtabs(self, tabsize: int = ...) -> str
    def find(self, sub: str, ...) -> int
    def format(self, ...) -> str
    def format_map(self, ...) -> str
    def index(self, sub: str, ...) -> int
    def isalnum(self) -> bool
    def isalpha(self) -> bool
    def isdecimal(self) -> bool
    def isdigit(self) -> bool
    def isidentifier(self) -> bool
    def islower(self) -> bool
    def isnumeric(self) -> bool
    def isprintable(self) -> bool
    def isspace(self) -> bool
    def istitle(self) -> bool
    def isupper(self) -> bool
    def join(self, iterable: Iterable[nothing]) -> str
    def join(self, iterable: Iterable[str]) -> str
    def ljust(self, width: int, fillchar: str = ...) -> str
    def lower(self) -> str
    def lstrip(self, chars: Optional[str] = ...) -> str
    def partition(self, sep: str) -> Tuple[str, str, str]
    def replace(self, old: str, new: str, ...) -> str
    def rfind(self, sub: str, ...) -> int
    def rindex(self, sub: str, ...) -> int
    def rjust(self, width: int, ...) -> str
    def rpartition(self, sep: str) -> tuple[str, str, str]
    def rsplit(self, sep: Optional[str] = ..., maxsplit: int = ...) -> List[str]
    def rstrip(self, chars: Optional[str] = ...) -> str
    def split(self, sep: Optional[str] = ..., maxsplit: int = ...) -> List[str]
    def splitlines(self, keepends: bool = ...) -> List[str]
    def startswith(self, prefix: str or Tuple[str, ...], start: Optional[int] = ..., end: Optional[int] = ...) -> bool
    def strip(self, chars: Optional[str] = ...) -> str
    def swapcase(self) -> str
    def title(self) -> str
    def translate(self, table: Mapping or Sequence) -> str
    def upper(self) -> str
    def zfill(self, width: int) -> str
    @staticmethod
    def maketrans(...) -> dict

class bytes(ByteString):
    def __init__(self, ints: Iterable[int]) -> NoneType
    def __init__(self, bytes: SupportsBytes) -> NoneType
    def __init__(self, string: str, encoding: str, errors: str = ...) -> NoneType
    def __init__(self, length: int) -> NoneType
    def __init__(self) -> NoneType

    def __add__(self, s: bytes) -> bytes
    def __contains__(self, o) -> bool
    def __float__(self) -> float
    def __getitem__(self, i: int) -> int
    def __getitem__(self, s: slice) -> bytes
    def __int__(self) -> int
    def __iter__(self) -> Iterator[int]
    def __len__(self) -> int
    def __mod__(self, value) -> bytes
    def __mul__(self, n: int) -> bytes
    def __rmul__(self, n: int) -> bytes

    def capitalize(self) -> bytes
    def center(self, width: int, fillchar: bytes = ...) -> bytes
    def count(self, sub: bytes or int, start: Optional[int] = ..., end: Optional[int] = ...) -> int
    def decode(self, encoding: str = ..., errors: str = ...) -> str
    def endswith(self, suffix: Union[bytes, Tuple[bytes, ...]]) -> bool
    def expandtabs(self, tabsize: int = ...) -> bytes
    def find(self, sub: Union[bytes, int], start: Optional[int] = ..., end: Optional[int] = ...) -> int
    def hex(self) -> str
    def index(self, sub: Union[bytes, int], start: Optional[int] = ..., end: Optional[int] = ...) -> int
    def isalnum(self) -> bool
    def isalpha(self) -> bool
    def isdigit(self) -> bool
    def islower(self) -> bool
    def isspace(self) -> bool
    def istitle(self) -> bool
    def isupper(self) -> bool
    def join(self, iterable: Iterable[bytes]) -> bytes
    def ljust(self, width: int, fillchar: bytes = ...) -> bytes
    def lower(self) -> bytes
    def lstrip(self, chars: Optional[bytes] = ...) -> bytes
    def partition(self, sep: bytes) -> Tuple[bytes, bytes, bytes]
    def replace(self, old: bytes, new: bytes, count: int = ...) -> bytes
    def rfind(self, sub: Union[bytes, int], start: Optional[int] = ..., end: Optional[int] = ...) -> int
    def rindex(self, sub: Union[bytes, int], start: Optional[int] = ..., end: Optional[int] = ...) -> int
    def rjust(self, width: int, fillchar: bytes = ...) -> bytes
    def rpartition(self, sep: bytes) -> Tuple[bytes, bytes, bytes]
    def rsplit(self, sep: Optional[bytes] = ..., maxsplit: int = ...) -> List[bytes]
    def rstrip(self, chars: Optional[bytes] = ...) -> bytes
    def split(self, sep: Optional[bytes] = ..., maxsplit: int = ...) -> List[bytes]
    def splitlines(self, keepends: bool = ...) -> List[bytes]
    def startswith(self, prefix: Union[bytes, Tuple[bytes, ...]]) -> bool
    def strip(self, chars: Optional[bytes] = ...) -> bytes
    def swapcase(self) -> bytes
    def title(self) -> bytes
    def translate(self, table: Optional[bytes], delete: bytes = ...) -> bytes
    def upper(self) -> bytes
    def zfill(self, width: int) -> bytes

    @classmethod
    def fromhex(cls, s: str) -> bytes
    @classmethod
    def maketrans(cls, frm: bytes, to: bytes) -> bytes

    # TODO(kramm): Do we need a bytes.__new__ here, similar to str?

class bytearray(MutableSequence[int], ByteString):
    __slots__ = []
    def __init__(self, iterable_of_ints) -> NoneType
    def __init__(self) -> NoneType
    def __init__(self, source: str, encoding: str, errors: str = ...) -> NoneType
    def __add__(self, y: str or bytearray) -> bytearray
    def __alloc__(self) -> int
    def __contains__(self, y: str or int or bytearray) -> bool
    def __delitem__(self, y: int or slice) -> NoneType
    def __getitem__(self, index: int) -> int
    def __getitem__(self, index: slice) -> bytearray
    def __iter__(self) -> bytearray_iterator
    def __len__(self) -> int
    def __mul__(self, n: int) -> bytearray
    def __setitem__(self, index: int, y: int) -> None
    def __setitem__(self, index: slice, y: Iterable[int or bytes or bytearray or memoryview]) -> None
    def append(self, int: int) -> NoneType
    def capitalize(self) -> bytearray
    def center(self, width: int, ...) -> bytearray
    def count(self, sub: bytearray, ...) -> int
    def decode(self, ...) -> str
    def endswith(self, suffix: bytes or bytearray or tuple[bytes or bytearray, ...], ...) -> bool
    def expandtabs(self, ...) -> bytearray
    def extend(self, iterable_int) -> NoneType
    def find(self, sub: bytes or bytearray, ...) -> int
    def index(self, sub: bytes or bytearray, ...) -> int
    def insert(self, index: int, int: bytes or int) -> NoneType
    def isalnum(self) -> bool
    def isalpha(self) -> bool
    def isdigit(self) -> bool
    def islower(self) -> bool
    def isspace(self) -> bool
    def istitle(self) -> bool
    def isupper(self) -> bool
    def join(self, iterable: Iterable[nothing or bytes or bytearray]) -> bytearray
    def ljust(self, width: int, ...) -> bytearray
    def lower(self) -> bytearray
    def lstrip(self, ...) -> bytearray
    def partition(self, sep: bytes or int or bytearray or Iterator) -> tuple[bytearray, bytearray, bytearray]
    def pop(self, ...) -> int
    def remove(self, int: bytes or int) -> NoneType
    def replace(self, old: bytes or bytearray, new: bytes or bytearray, ...) -> bytearray
    def reverse(self) -> NoneType
    def rfind(self, sub: bytes or bytearray, ...) -> int
    def rindex(self, sub: bytes or bytearray, ...) -> int
    def rjust(self, width: int, ...) -> bytearray
    def rpartition(self, sep: bytes or int or bytearray or Iterator) -> tuple[bytearray, bytearray, bytearray]
    def rsplit(self, sep: bytes or bytearray, ...) -> list[bytearray]
    def rsplit(self) -> list[bytearray]
    def rstrip(self, ...) -> bytearray
    def split(self, ...) -> list[bytearray]
    def splitlines(self, ...) -> list[bytearray]
    def startswith(self, prefix: bytes or bytearray or tuple[bytes or bytearray, ...], ...) -> bool
    def strip(self, ...) -> bytearray
    def swapcase(self) -> bytearray
    def title(self) -> bytearray
    def upper(self) -> bytearray
    def zfill(self, width: int) -> bytearray

    @classmethod
    def fromhex(cls, string: bytes or bytearray) -> bytearray

class bytearray_iterator(Iterator[int]):
    __slots__ = []
    def __iter__(self) -> bytearray_iterator
    def __next__(self) -> int

class `dictionary-keyiterator`(Iterator[_T]):
    __slots__ = []
    def __iter__(self) -> `dictionary-keyiterator`[_T]
    def __next__(self) -> _T

class `dictionary-valueiterator`(Iterator[_T]):
    __slots__ = []
    def __iter__(self) -> `dictionary-valueiterator`[_T]
    def __next__(self) -> _T

class `dictionary-itemiterator`(Iterator[tuple[_K, _V]]):
    __slots__ = []
    def __iter__(self) -> `dictionary-itemiterator`[_K, _V]
    def __next__(self) -> tuple[_K, _V]

class dict_keys(KeysView[_T]):
    __slots__ = []
    def __contains__(self, y) -> bool
    def __iter__(self) -> `dictionary-keyiterator`[_T]
    def __len__(self) -> int
    def __and__(self, y: Iterable) -> set[_T]
    def __sub__(self, y: Iterable) -> set[_T]
    def __or__(self, y: Iterable[_T2]) -> set[_T or _T2]
    def __xor__(self, y: Iterable[_T2]) -> set[_T or _T2]

class dict_values(ValuesView[_T]):
    __slots__ = []
    def __iter__(self) -> `dictionary-valueiterator`[_T]
    def __len__(self) -> int

class dict_items(ItemsView[_K, _V], object):
    __slots__ = []
    def __and__(self, y: set or dict_items) -> set[tuple[_K, _V]]
    def __or__(self, y: set or dict_items[_K2, _V2]) -> set[tuple[_K or _K2, _V or _V2]]
    def __xor__(self, y: set or dict_items[_K2, _V2]) -> set[tuple[_K or _K2, _V or _V2]]
    def __sub__(self, y: set or dict_items[_K2, _V2]) -> set[tuple[_K, _V]]
    def __contains__(self, y) -> bool
    def __iter__(self) -> `dictionary-itemiterator`[_K,_V]
    def __len__(self) -> int

class dict(Dict[_K, _V]):
    __slots__ = []
    def __init__(self) -> NoneType:
        self = dict[nothing, nothing]
    def __init__(self, list: list[nothing]) -> NoneType:
        self = dict[nothing, nothing]
    def __init__(self, mapping: Mapping[_K2, _V2]) -> NoneType:
        self = dict[_K2, _V2]
    def __init__(self, iterable: Iterable[tuple[_K2, _V2]]) -> NoneType:
        self = dict[_K2, _V2]
    def __init__(self, ...) -> NoneType:
        self = dict[?, ?]
    def __delitem__(self, y: _K) -> NoneType
    def __iter__(self) -> `dictionary-keyiterator`[_K]
    def __setitem__(self, i: _K2, y: _V2) -> NoneType:
      self = dict[_K or _K2, _V or _V2]
    def clear(self) -> NoneType:
        self = dict[nothing, nothing]
    def copy(self) -> dict[_K, _V]
    @staticmethod
    def fromkeys(keys: Iterable[_K]) -> Dict[_K, NoneType]
    @staticmethod
    def fromkeys(keys: Iterable[_K], value: _V) -> Dict[_K, _V]
    def items(self) -> dict_items[_K, _V]
    def keys(self) -> dict_keys[_K]
    def pop(self, k) -> _V
    def pop(self, k, d: _V2) -> _V or _V2
    def setdefault(self, k: _K2) -> _V or NoneType:
        self = dict[_K or _K2, _V or NoneType]
    def setdefault(self, k: _K2, v: _V2) -> _V or _V2:
        self = dict[_K or _K2, _V or _V2]
    def update(self, other: dict[_K2, _V2]):
        self = dict[_K or _K2, _V or _V2]
    def update(self, **kwargs: _V2):
        self = dict[_K or str, _V or _V2]
    def update(self, E, ...) -> NoneType:
        self = dict[?, ?]
    def update(self) -> NoneType
    def values(self) -> dict_values[_V]

class listiterator(Iterator[_T]):
    __slots__ = []
    def __iter__(self) -> listiterator[_T]
    def __next__(self) -> _T

class enumerate(Iterator[tuple[int, _T]]):
    __slots__ = []
    def __init__(self, iterable: Iterable[_T2], start: int = ...) -> NoneType:
      self = enumerate[_T2]
    def __iter__(self) -> enumerate[_T]  # enumerate.__iter__() returns itself
    def __next__(self) -> tuple[int, _T]

class listreverseiterator(Iterator[_T]):
    __slots__ = []
    def __iter__(self) -> listreverseiterator[_T]
    def __next__(self) -> _T

class list(List[_T]):
    __slots__ = []
    def __init__(self) -> NoneType:
        self = list[nothing]
    def __init__(self, iterable: Iterable[_T2]) -> NoneType:
        self = list[_T2]
    def __add__(self, y: list[_T2]) -> list[_T or _T2]
    def __contains__(self, y) -> bool
    def __delitem__(self, y: int or slice) -> NoneType
    def __delslice__(self, i: int, j: int) -> NoneType
    def __getitem__(self, index: int) -> _T
    def __getitem__(self, index: slice) -> list[_T]
    def __getslice__(self, i: Optional[int], j: Optional[int]) -> list[_T]
    def __iadd__(self, y: Iterable[_T2]) -> list[_T or _T2]:
      self = list[_T or _T2]
    def __iter__(self) -> listiterator[_T]
    def __mul__(self, n: int) -> list[_T]
    def __reversed__(self) -> listreverseiterator[_T]
    def __setitem__(self, i: int, y: _T2) -> NoneType:
      self = list[_T or _T2]
    def __setitem__(self, i: slice, y) -> NoneType:
      self = list[?]
    def __setslice__(self, i: int, j: int, y) -> NoneType
    def append(self, object: _T2) -> NoneType:
      self = list[_T or _T2]
    def extend(self, i: Iterable[_T2]) -> NoneType:
      self = list[_T or _T2]
    def count(self, value: _T) -> int
    def index(self, value, ...) -> int
    def insert(self, index: int, object: _T2) -> NoneType:
      self = list[_T or _T2]
    def pop(self) -> _T
    def pop(self, i: int) -> _T
    def remove(self, value: _T) -> NoneType
    def reverse(self) -> NoneType
    def sort(self, ...) -> NoneType

# "reversed" is a type, see PyReversed_Type in Objects/enumobject.c
class reversed(Iterator[_T]):
    __slots__ = []
    def __init__(self, sequence: Reversible[_T2]) -> NoneType:
      self = reversed[_T2]
    def __iter__(self) -> reversed[_T]
    def __next__(self) -> _T

class tuple(Tuple[_T]):
    __slots__ = []
    def __init__(self) -> NoneType:
      self = tuple[nothing, ...]
    def __init__(self, p0: Iterable[_T2]) -> NoneType:
      self = tuple[_T2, ...]
    def __add__(self, y: tuple[_T2, ...]) -> tuple[_T or _T2, ...]
    def __contains__(self, y) -> bool
    def __getitem__(self, index: int) -> _T
    def __getitem__(self, index: slice) -> tuple[_T, ...]
    def __getslice__(self, i: Optional[int], j: Optional[int]) -> tuple[_T, ...]
    def __iter__(self) -> tupleiterator[_T]
    def __mul__(self, n: int) -> tuple[_T, ...]
    def count(self, value: _T) -> int
    def index(self, value, ...) -> int

class tupleiterator(Iterator[_T]):
    __slots__ = []
    def __iter__(self) -> tupleiterator[_T]
    def __next__(self) -> _T

class set(Set[_T]):
    __slots__ = []
    def __init__(self) -> NoneType:
        self = set[nothing]
    def __init__(self, iterable: Iterable[_T2]) -> NoneType:
        self = set[_T2]
    def __and__(self, y: Iterable) -> set[_T]
    def __contains__(self, y) -> bool
    def __iter__(self) -> setiterator[_T]
    def __or__(self, y: Iterable[_T2]) -> set[_T or _T2]
    def __sub__(self, y: Iterable) -> set[_T]
    def __xor__(self, y: Iterable[_T2]) -> set[_T or _T2]
    def clear(self) -> NoneType:
        self = set[nothing]
    def copy(self) -> set[_T]
    def discard(self, y) -> NoneType
    def difference_update(self, ...) -> NoneType
    def symmetric_difference_update(self, ...) -> NoneType
    def intersection_update(self, ...) -> NoneType
    def isdisjoint(self, y: Iterable) -> bool
    def issubset(self, y: Iterable) -> bool
    def issuperset(self, y: Iterable) -> bool
    def pop(self) -> _T
    def remove(self, x) -> None
    def update(self, ...) -> NoneType:
        self = set[?]
    def add(self, y: _T2) -> NoneType:
        self = set[_T or _T2]
    # Even though these look like instance methods (i.e., you can call
    # {1}.union(x)), they're actually static methods. (Which will accept a
    # variable number of arguments, the first of which can e.g. be self.)
    @staticmethod
    def union(...) -> set[?]
    @staticmethod
    def intersection(...) -> set[?]
    @staticmethod
    def difference(...) -> set[?]
    @staticmethod
    def symmetric_difference(Iterable) -> set[?]

class frozenset(FrozenSet[_T]):
    __slots__ = []
    def __init__(self) -> NoneType:
        self = frozenset[nothing]
    def __init__(self, x: Iterable[_T2]) -> NoneType:
        self = frozenset[_T2]
    def __and__(self, y: AbstractSet) -> frozenset[_T]
    def __contains__(self, y) -> bool
    def __iter__(self) -> setiterator[_T]
    def __or__(self, y: AbstractSet[_T2]) -> frozenset[_T or _T2]
    def __sub__(self, y: AbstractSet[_T2]) -> frozenset[_T]
    def __xor__(self, y: AbstractSet[_T2]) -> frozenset[_T or _T2]
    def copy(self, ...) -> frozenset[_T]
    def isdisjoint(self, y: Iterable) -> bool
    def issubset(self, y: Iterable) -> bool
    def issuperset(self, y: Iterable) -> bool
    @staticmethod
    def union(...) -> frozenset[?]
    @staticmethod
    def intersection(...) -> frozenset[?]
    @staticmethod
    def difference(...) -> frozenset[?]
    @staticmethod
    def symmetric_difference(Iterable) -> frozenset[?]

class setiterator(Iterator[_T]):
    __slots__ = []
    def __iter__(self) -> setiterator[_T]
    def __next__(self) -> _T

class bool(int, SupportsInt, SupportsFloat):
    __slots__ = []
    def __init__(self, x) -> NoneType
    def __init__(self) -> NoneType
    def __abs__(self) -> int
    def __add__(self, y: int or bool) -> int
    def __and__(self, y: bool) -> bool
    def __and__(self, y: int) -> int
    def __coerce__(self, y: int) -> Tuple[bool, int]
    def __coerce__(self, y: bool) -> Tuple[bool, bool]
    def __div__(self, y: int or bool) -> int
    def __divmod__(self, y: int or bool) -> Tuple[int, int]
    def __float__(self) -> float
    def __floordiv__(self, y: int or bool) -> int
    def __hex__(self) -> str
    def __index__(self) -> int
    def __int__(self) -> int
    def __invert__(self) -> int
    def __long__(self) -> int
    def __lshift__(self, y: int) -> int
    def __mod__(self, y: int) -> int
    def __mul__(self, y: int) -> int
    def __neg__(self) -> int
    def __nonzero__(self) -> bool
    def __oct__(self) -> str
    def __or__(self, y: bool) -> bool
    def __or__(self, y: int) -> int
    def __pos__(self) -> int
    def __pow__(self, y: bool) -> int
    def __pow__(self, y: int) -> int or float  # True ** -2 == 0.5
    def __pow__(self, y: int, modulo: int or bool) -> int
    def __rshift__(self, y: int) -> int
    def __sub__(self, y: int) -> int
    def __truediv__(self, y: int) -> float
    def __trunc__(self, ...) -> int
    def __xor__(self, y: bool) -> bool
    def __xor__(self, y: int) -> int
    def bit_length(self) -> int
    def conjugate(self, ...) -> int

class int(SupportsInt, SupportsFloat, SupportsAbs[int]):
    __slots__ = []
    denominator = ...  # type: int
    numerator = ... # type: int
    real = ... # type: int
    imag = ... # type: int
    def __init__(self) -> NoneType
    def __init__(self, x: int or float or str or bytes or SupportsInt) -> NoneType
    def __init__(self, x: str or bytes, base: int) -> NoneType
    def __add__(self, y: int) -> int
    def __add__(self, y: float) -> float
    def __add__(self, y: complex) -> complex
    def __and__(self, y: int) -> int
    def __and__(self, y: float) -> float
    def __and__(self, y: complex) -> complex
    def __div__(self, y: int) -> int
    def __div__(self, y: float) -> float
    def __div__(self, y: complex) -> complex
    def __divmod__(self, y: int) -> Tuple[int, int]
    def __divmod__(self, y: float) -> Tuple[float, float]
    def __divmod__(self, y: complex) -> Tuple[complex, complex]
    def __floordiv__(self, y: int) -> int
    def __floordiv__(self, y: float) -> float
    def __floordiv__(self, y: complex) -> complex
    def __mod__(self, y: int) -> int
    def __mod__(self, y: float) -> float
    def __mod__(self, y: complex) -> complex
    def __mul__(self, y: int) -> int
    def __mul__(self, y: float) -> float
    def __mul__(self, y: complex) -> complex
    def __mul__(self, n: str) -> str
    def __mul__(self, n: list[_T]) -> list[_T]
    def __mul__(self, n: tuple[_T, ...]) -> tuple[_T, ...]
    def __mul__(self, n: bytearray) -> bytearray
    def __pow__(self, y: int, modulo: int) -> int
    def __pow__(self, y: int) -> int or float  # 1 ** -2 == 0.5
    def __pow__(self, y: float) -> float
    def __pow__(self, y: complex) -> complex
    def __rshift__(self, y: int) -> int
    def __sub__(self, y: int) -> int
    def __sub__(self, y: float) -> float
    def __sub__(self, y: complex) -> complex
    def __truediv__(self, y: int or float) -> float
    def __truediv__(self, y: complex) -> complex
    def __coerce__(self, y: int) -> Tuple[int, int]
    def __float__(self) -> float
    def __hex__(self) -> str
    def __index__(self) -> int
    def __int__(self) -> int
    def __invert__(self) -> int
    def __long__(self) -> int
    def __lshift__(self, y: int) -> int
    def __neg__(self) -> int
    def __nonzero__(self) -> bool
    def __oct__(self) -> str
    def __or__(self, y: int) -> int
    def __pos__(self) -> int
    def __trunc__(self, ...) -> int
    def __xor__(self, y: int) -> int
    def bit_length(self) -> int
    def conjugate(self) -> int

class float(SupportsInt, SupportsFloat, SupportsAbs):
    __slots__ = []
    real = ... # type: float
    imag = ... # type: float
    def __init__(self, x: int or float or str or bytes or SupportsFloat) -> NoneType
    def __init__(self) -> NoneType
    def __abs__(self) -> float
    def __add__(self, y: int or float) -> float
    def __add__(self, y: complex) -> complex
    def __coerce__(self, y: int or float) -> Tuple[float, float or int]
    def __div__(self, y: int or float) -> float
    def __div__(self, y: complex) -> complex
    def __divmod__(self, y: int or float) -> Tuple[float, float]
    def __divmod__(self, y: complex) -> Tuple[complex, complex]
    def __float__(self) -> float
    def __floordiv__(self, y: int or float) -> float
    def __floordiv__(self, y: complex) -> complex
    def __hex__(self) -> str
    def __index__(self) -> int
    def __int__(self) -> int
    def __invert__(self) -> int
    def __long__(self) -> int
    def __mod__(self, y: int or float) -> float
    def __mod__(self, y: complex) -> complex
    def __mul__(self, y: int or float) -> float
    def __mul__(self, y: complex) -> complex
    def __neg__(self) -> float
    def __nonzero__(self) -> bool
    def __oct__(self) -> str
    def __pos__(self) -> float
    def __pow__(self, y: int or float) -> float
    def __pow__(self, y: complex) -> complex
    def __sub__(self, y: int or float) -> float
    def __sub__(self, y: complex) -> complex
    def __truediv__(self, y: int or float) -> float
    def __truediv__(self, y: complex) -> complex
    def __trunc__(self, ...) -> int
    def conjugate(self) -> float
    def as_integer_ratio(self) -> tuple[int, int]
    def hex(self) -> str
    def is_integer(self) -> bool

    @classmethod
    def fromhex(cls, string: str or bytes or bytearray) -> float

class complex(SupportsAbs):
    __slots__ = []
    real = ... # type: float
    imag = ... # type: float
    def __init__(self, real: int or float or complex or str or bytes or typing.SupportsComplex, ...) -> NoneType
    def __init__(self) -> NoneType
    def __abs__(self) -> float
    def __add__(self, y: int or float or complex) -> complex
    def __coerce__(self, y: int or float or complex) -> Tuple[complex, complex]
    def __div__(self, y: int or float or complex) -> complex
    def __divmod__(self, y: int or float or complex) -> Tuple[complex, complex]
    def __floordiv__(self, y: int or float or complex) -> complex
    def __mod__(self, y: int or float or complex) -> complex
    def __mul__(self, y: int or float or complex) -> complex
    def __neg__(self) -> complex
    def __nonzero__(self) -> bool
    def __pos__(self) -> complex
    def __pow__(self, y: int or float or complex) -> complex
    def __sub__(self, y: int or float or complex) -> complex
    def __truediv__(self, y: int or float or complex) -> complex
    def conjugate(self) -> complex

class generator(Generator[_T, _T2, _V]):
    __slots__ = []
    def __iter__(self) -> generator[_T, _T2, _V]
    def __next__(self) -> _T
    def send(self, value: _T2) -> _T
    def close(self) -> NoneType

# TODO(rechen): See https://github.com/google/pytype/issues/241. Due to a
# typeshed bug, coroutine needs to be defined in 3.4. Once this bug is fixed, we
# should define this class only in 3.5+.
if sys.version_info >= (3, 4):
    class coroutine(Coroutine[_T, _T2, _V]):
        __slots__ = []
        def close(self) -> NoneType
        def send(self, value: _T2) -> _T

if sys.version_info >= (3, 6):
    class asyncgenerator(AsyncGenerator[_T, _T2]):
        __slots__ = []
        def __aiter__(self) -> asyncgenerator[_T, _T2]
        def __anext__(self) -> Awaitable[_T]
        def asend(self, value: _T2) -> Awaitable[_T]
        def aclose(self) -> Awaitable[_T]

class instancemethod(object):
    __slots__ = []
    def __init__(self, function: Callable or instancemethod, instance, cls) -> NoneType
    def __get__(self, obj, ...) -> instancemethod

__path__ = ...  # type: Iterable[str]  # only sometimes present

class module(object):
    __doc__ = ...  # type: str
    __file__ = ...  # type: str
    __name__ = ...  # type: str
    __package__ = ...  # type: Optional[str]
    __path__ = ...  # type: Iterable[str]  # only sometimes present
    def __init__(self, name: str or bytearray, doc = ...) -> NoneType
    def __getattr__(self, name) -> ?  # modules can contain anything

class slice(object):
    __slots__ = []  # slices are readonly
    start = ...  # type: Optional[int]
    stop = ...  # type: Optional[int]
    step = ...  # type: Optional[int]
    def __init__(self, stop, ...) -> NoneType
    def indices(self, len: int) -> tuple[int, int, int]

class memoryview(object):
    __slots__ = []
    format = ...  # type: str
    itemsize = ...  # type: int
    shape = ...  # type: Optional[Tuple[int, ...]]
    strides = ...  # type: Optional[Tuple[int, ...]]
    suboffsets = ...  # type: Optional[Tuple[int, ...]]
    readonly = ...  # type: bool
    ndim = ...  # type: int
    def __init__(self, object: bytes or bytearray or memoryview) -> NoneType
    def __getitem__(self, index: int) -> int
    def __getitem__(self, index: slice) -> memoryview
    def __len__(self) -> int
    def __setitem__(self, index: int, o: int) -> None
    def __setitem__(self, index: slice, o: bytes or bytearray or memoryview) -> None
    def tobytes(self, ...) -> bytes
    def tolist(self) -> list[int]
    if sys.version_info >= (3, 2):
        def __enter__(self) -> memoryview
        def __exit__(self, exc_type: Optional[Type[BaseException]], exc_value: Optional[BaseException], traceback: Optional[?]) -> Optional[bool]
    if sys.version_info >= (3, 5):
        def hex(self) -> str

class type(Callable, Type[_T]):
    __name__ = ...  # type: str
    __module__ = ...  # type: str
    __bases__ = ...  # type: Tuple[type, ...]
    __base__ = ...  # type: Optional[type]
    __dictoffset__ = ...  # type: int
    __itemsize__ = ...  # type: int
    def __new__(cls: Type[type], object: _T) -> Type[_T]
    # The return type in the below two definitions is used only when abstract.py
    # isn't able to build a class from the arguments.
    def __new__(cls: Type[type], name: str, bases: tuple[type, ...], dict: Dict[str, ?]) -> type
    def __init__(self, object) -> None: ...
    def __init__(self, name, bases, dict) -> None: ...
    def __subclasses__(self) -> List[type]: ...
    def __instancecheck__(self, object) -> bool: ...
    def __subclasscheck__(self, cls) -> bool: ...
    def mro(self) -> List[type]: ...

class `callable-iterator`(Iterator[_T]):
    __slots__ = []
    def __iter__(self) -> `callable-iterator`[_T]
    def __next__(self) -> _T

# Usually the class argument to super() already inherits from object. So to
# avoid confusion, super() inherits from nothing.
class super(nothing):
    __slots__ = []
    def __init__(self, ...) -> NoneType
    def __get__(self, obj, ...) -> super
    def __set__(self, obj, value) -> super
    def __new__(cls: Type[super], ...) -> super

class range(Sequence[int]):
    __slots__ = []
    def __init__(self, stop: int, ...) -> NoneType
    def __getitem__(self, index: int) -> int
    def __iter__(self) -> Iterator[int]
    def __len__(self) -> int
    def __reversed__(self, ...) -> Iterator[int]

# From Python/objects/capsule.c. Used e.g. by datetime.datetime_CAPI
class PyCapsule(object):
    pass

# types.CodeType, a.k.a., [type 'code']
class code(object):
    pass

class ArithmeticError(StandardError):
    pass

class AssertionError(StandardError):
    pass

class AttributeError(StandardError):
    pass

class BaseException(object):
    def __init__(self, ...) -> NoneType
    def __getitem__(self, i: int) -> ?
    def __getslice__(self, i: int, j: int) -> tuple

class BufferError(StandardError):
    pass

class BytesWarning(Warning):
    pass

class DeprecationWarning(Warning):
    pass

class EOFError(StandardError):
    pass

EnvironmentError = OSError

class Exception(BaseException):
    pass

class FloatingPointError(ArithmeticError):
    pass

class FutureWarning(Warning):
    pass

class GeneratorExit(BaseException):
    pass

IOError = OSError

class ImportError(StandardError):
    pass

class ImportWarning(Warning):
    pass

class IndentationError(SyntaxError):
    pass

class IndexError(LookupError):
    pass

class KeyError(LookupError):
    pass

class KeyboardInterrupt(BaseException):
    pass

class LookupError(StandardError):
    pass

class MemoryError(StandardError):
    pass

class NameError(StandardError):
    pass

class NotImplementedError(RuntimeError):
    pass

class OSError(Exception):
    errno: int
    filename: str
    filename2: str
    strerror: str

class OverflowError(ArithmeticError):
    pass

class PendingDeprecationWarning(Warning):
    pass

class ReferenceError(StandardError):
    pass

class RuntimeError(StandardError):
    pass

class RuntimeWarning(Warning):
    pass

class StandardError(Exception):
    pass

class StopIteration(Exception):
    pass

class SyntaxError(StandardError):
    filename = ...  # type: str
    lineno = ...  # type: int
    msg = ...  # type: str
    offset = ...  # type: int
    print_file_and_line = ...  # type: Optional[str]
    text = ...  # type: str

class SyntaxWarning(Warning):
    pass

class SystemError(StandardError):
    pass

class SystemExit(BaseException):
    code = ...  # type: int

class TabError(IndentationError):
    pass

class TypeError(StandardError):
    pass

class UnboundLocalError(NameError):
    pass

class UnicodeError(ValueError):
    pass

class UnicodeDecodeError(UnicodeError):
    encoding = ...  # type: str
    object = ...  # type: str
    start = ...  # type: int
    end = ...  # type: int
    reason = ...  # type: str
    def __init__(self, encoding: str, object: str, start: int, end: int, reason: str) -> None: ...

class UnicodeEncodeError(UnicodeError):
    encoding = ...  # type: str
    object = ...  # type: str
    start = ...  # type: int
    end = ...  # type: int
    reason = ...  # type: str
    def __init__(self, encoding: str, object: str, start: int, end: int, reason: str) -> None: ...

class UnicodeTranslateError(UnicodeError):
    encoding = ...  # type: str
    object = ...  # type: str
    start = ...  # type: int
    end = ...  # type: int
    reason = ...  # type: str
    def __init__(self, object: str, start: int, end: int, reason: str) -> None: ...

class UnicodeWarning(Warning):
    pass

class UserWarning(Warning):
    pass

class ValueError(StandardError):
    pass

class Warning(Exception):
    pass

class ZeroDivisionError(ArithmeticError):
    pass

# -------------------------------------------------------------------
# Everything below this is new in python3

class BlockingIOError(OSError):
    characters_written = ...  # type: int
class ChildProcessError(OSError): ...
class FileExistsError(OSError): ...
class FileNotFoundError(OSError): ...
class InterruptedError(OSError): ...
class IsADirectoryError(OSError): ...
class NotADirectoryError(OSError): ...
class PermissionError(OSError): ...
class ProcessLookupError(OSError): ...
class TimeoutError(OSError): ...

class ResourceWarning(Warning): ...

# Connection errors
class ConnectionError(OSError): ...
class BrokenPipeError(ConnectionError): ...
class ConnectionAbortedError(ConnectionError): ...
class ConnectionRefusedError(ConnectionError): ...
class ConnectionResetError(ConnectionError): ...

if sys.version_info >= (3, 5):
    class StopAsyncIteration(Exception):
        value = ...  # type: ?
    class RecursionError(RuntimeError): ...

if sys.version_info >= (3, 6):
    class ModuleNotFoundError(ImportError): ...

if sys.version_info >= (3, 6):
    # This class is to be exported as PathLike from os,
    # but we define it here as _PathLike to avoid import cycle issues.
    # See https://github.com/python/typeshed/pull/991#issuecomment-288160993
    class _PathLike(Generic[AnyStr]):
        def __fspath__(self) -> AnyStr: ...

    def open(file: Union[str, bytes, int, _PathLike], mode: str = ..., buffering: int = ..., encoding: Optional[str] = ..., errors: Optional[str] = ..., newline: Optional[str] = ..., closefd: bool = ...) -> IO: ...
else:
    def open(file: Union[str, bytes, int], mode: str = ..., buffering: int = ..., encoding: Optional[str] = ..., errors: Optional[str] = ..., newline: Optional[str] = ..., closefd: bool = ...) -> IO: ...
