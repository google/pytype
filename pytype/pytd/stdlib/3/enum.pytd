# Needed until pytype can support typeshed/stdlib/3/enum.pyi.

from typing import Any, Dict, Iterable, Tuple, Type, TypeVar, Union

_T = TypeVar('_T')

class EnumMeta(type, Iterable):
  def __getattribute__(self, name) -> Any
  def __iter__(cls) -> Enum
  def __getitem__(cls: EnumMeta, name: str) -> Any
  def __contains__(self, member: Any) -> bool
  def __len__(self) -> int

class Enum(metaclass=EnumMeta):
  __members__ = ...  # type: collections.OrderedDict[str, Enum]
  def __init__(self, value: str, names: Union[str, Iterable[str], Iterable[Tuple[str, Any]], Dict[str, Any]], module = ..., type: type = ..., start: complex = ...) -> None: ...
  def __init__(self, value) -> None: ...
  def __getattribute__(self, name) -> Any: ...

  name = ...  # type: str
  value = ...  # type: Any

class IntEnum(Enum, int):
  value = ...  # type: int

def unique(enumeration: Type[Enum]) -> Type[Enum]

# Everything below this point is copied directly from the typeshed version,
# with the exception of a tweak to the definition of IntFlag, documented below.

_auto_null = ...  # type: Any

# subclassing IntFlag so it picks up all implemented base functions, best
# modeling behavior of enum.auto()
class auto(IntFlag):
  value = ...  # type: Any

class Flag(Enum):
  def __contains__(self: _T, other: _T) -> bool: ...
  def __repr__(self) -> str: ...
  def __str__(self) -> str: ...
  def __bool__(self) -> bool: ...
  def __or__(self: _T, other: _T) -> _T: ...
  def __and__(self: _T, other: _T) -> _T: ...
  def __xor__(self: _T, other: _T) -> _T: ...
  def __invert__(self: _T) -> _T: ...

# In typeshed, this line is `class IntFlag(int, Flag):  # type: ignore`.
# Pytype wants the Flag parent first and doesn't need the ignore.
class IntFlag(Flag, int):
  def __or__(self: _T, other: Union[int, _T]) -> _T: ...
  def __and__(self: _T, other: Union[int, _T]) -> _T: ...
  def __xor__(self: _T, other: Union[int, _T]) -> _T: ...
  __ror__ = __or__
  __rand__ = __and__
  __rxor__ = __xor__
