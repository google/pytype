
Backport of PEP 3107, function annotations, to Python 2. Using this
requires an import from __future__.
Example:
    from __future__ import google_type_annotations
    def f(x: int, y: int) -> Tuple[int, ...]

diff --git a/Doc/library/dis.rst b/Doc/library/dis.rst
index 04b9b15386..c99031b7cf 100644
--- a/Doc/library/dis.rst
+++ b/Doc/library/dis.rst
@@ -813,19 +813,23 @@ the more significant byte last.
    value.
 
 
-.. opcode:: MAKE_FUNCTION (argc)
+.. opcode:: MAKE_FUNCTION (argc | types << 16)
 
    Pushes a new function object on the stack.  TOS is the code associated with
    the function.  The function object is defined to have *argc* default
    parameters, which are found below TOS.
+   function.  The function object is defined to have *argc* default parameters, and
+   *types* argument types, which are found below TOS, in that order.
 
 
-.. opcode:: MAKE_CLOSURE (argc)
+.. opcode:: MAKE_CLOSURE (argc | types << 16)
 
    Creates a new function object, sets its *func_closure* slot, and pushes it on
    the stack.  TOS is the code associated with the function, TOS1 the tuple
    containing cells for the closure's free variables.  The function also has
    *argc* default parameters, which are found below the cells.
+   *argc* default parameters and *types* argument types, which are found below
+   the cells (default parameters first, then types).
 
 
 .. opcode:: BUILD_SLICE (argc)
diff --git a/Grammar/Grammar b/Grammar/Grammar
index 4c3f33da32..e495d8fc1d 100644
--- a/Grammar/Grammar
+++ b/Grammar/Grammar
@@ -22,13 +22,18 @@ eval_input: testlist NEWLINE* ENDMARKER
 decorator: '@' dotted_name [ '(' [arglist] ')' ] NEWLINE
 decorators: decorator+
 decorated: decorators (classdef | funcdef)
-funcdef: 'def' NAME parameters ':' suite
-parameters: '(' [varargslist] ')'
+funcdef: 'def' NAME parameters ['->' test] ':' suite
+parameters: '(' [typedargslist] ')'
+typedargslist: ((tfpdef ['=' test] ',')*
+              ('*' tdef [',' '**' tdef] | '**' tdef) |
+              tfpdef ['=' test] (',' tfpdef ['=' test])* [','])
 varargslist: ((fpdef ['=' test] ',')*
               ('*' NAME [',' '**' NAME] | '**' NAME) |
               fpdef ['=' test] (',' fpdef ['=' test])* [','])
 fpdef: NAME | '(' fplist ')'
 fplist: fpdef (',' fpdef)* [',']
+tdef: NAME [':' test]
+tfpdef: NAME [':' test] | '(' fplist ')'
 
 stmt: simple_stmt | compound_stmt
 simple_stmt: small_stmt (';' small_stmt)* [';'] NEWLINE
@@ -51,7 +56,8 @@ yield_stmt: yield_expr
 raise_stmt: 'raise' [test [',' test [',' test]]]
 import_stmt: import_name | import_from
 import_name: 'import' dotted_as_names
-import_from: ('from' ('.'* dotted_name | '.'+)
+# note below: the ('.' | '...') is necessary because '...' is tokenized as ELLIPSIS
+import_from: ('from' (('.' | '...')* dotted_name | ('.' | '...')+)
               'import' ('*' | '(' import_as_names ')' | import_as_names))
 import_as_name: NAME ['as' NAME]
 dotted_as_name: dotted_name ['as' NAME]
@@ -104,13 +110,13 @@ atom: ('(' [yield_expr|testlist_comp] ')' |
        '[' [listmaker] ']' |
        '{' [dictorsetmaker] '}' |
        '`' testlist1 '`' |
-       NAME | NUMBER | STRING+)
+       NAME | NUMBER | STRING+ | '...')
 listmaker: test ( list_for | (',' test)* [','] )
 testlist_comp: test ( comp_for | (',' test)* [','] )
 lambdef: 'lambda' [varargslist] ':' test
 trailer: '(' [arglist] ')' | '[' subscriptlist ']' | '.' NAME
 subscriptlist: subscript (',' subscript)* [',']
-subscript: '.' '.' '.' | test | [test] ':' [test] [sliceop]
+subscript: ELLIPSIS | test | [test] ':' [test] [sliceop]
 sliceop: ':' [test]
 exprlist: expr (',' expr)* [',']
 testlist: test (',' test)* [',']
diff --git a/Include/Python-ast.h b/Include/Python-ast.h
index 3f35bbb634..dbabc9ab57 100644
--- a/Include/Python-ast.h
+++ b/Include/Python-ast.h
@@ -73,6 +73,7 @@ struct _stmt {
                         identifier name;
                         arguments_ty args;
                         asdl_seq *body;
+                        expr_ty returns;
                         asdl_seq *decorator_list;
                 } FunctionDef;
                 
@@ -189,7 +190,8 @@ enum _expr_kind {BoolOp_kind=1, BinOp_kind=2, UnaryOp_kind=3, Lambda_kind=4,
                   SetComp_kind=9, DictComp_kind=10, GeneratorExp_kind=11,
                   Yield_kind=12, Compare_kind=13, Call_kind=14, Repr_kind=15,
                   Num_kind=16, Str_kind=17, Attribute_kind=18,
-                  Subscript_kind=19, Name_kind=20, List_kind=21, Tuple_kind=22};
+                  Subscript_kind=19, Name_kind=20, List_kind=21, Tuple_kind=22,
+                  Ellipsis_kind=23};
 struct _expr {
         enum _expr_kind kind;
         union {
@@ -312,7 +314,7 @@ struct _expr {
         int col_offset;
 };
 
-enum _slice_kind {Ellipsis_kind=1, Slice_kind=2, ExtSlice_kind=3, Index_kind=4};
+enum _slice_kind {Slice_kind=1, ExtSlice_kind=2, Index_kind=3};
 struct _slice {
         enum _slice_kind kind;
         union {
@@ -357,8 +359,11 @@ struct _excepthandler {
 struct _arguments {
         asdl_seq *args;
         identifier vararg;
+        expr_ty vararg_type;
         identifier kwarg;
+        expr_ty kwarg_type;
         asdl_seq *defaults;
+        asdl_seq *types;
 };
 
 struct _keyword {
@@ -380,10 +385,10 @@ mod_ty _Py_Interactive(asdl_seq * body, PyArena *arena);
 mod_ty _Py_Expression(expr_ty body, PyArena *arena);
 #define Suite(a0, a1) _Py_Suite(a0, a1)
 mod_ty _Py_Suite(asdl_seq * body, PyArena *arena);
-#define FunctionDef(a0, a1, a2, a3, a4, a5, a6) _Py_FunctionDef(a0, a1, a2, a3, a4, a5, a6)
+#define FunctionDef(a0, a1, a2, a3, a4, a5, a6, a7) _Py_FunctionDef(a0, a1, a2, a3, a4, a5, a6, a7)
 stmt_ty _Py_FunctionDef(identifier name, arguments_ty args, asdl_seq * body,
-                        asdl_seq * decorator_list, int lineno, int col_offset,
-                        PyArena *arena);
+                        expr_ty returns, asdl_seq * decorator_list, int
+                        lineno, int col_offset, PyArena *arena);
 #define ClassDef(a0, a1, a2, a3, a4, a5, a6) _Py_ClassDef(a0, a1, a2, a3, a4, a5, a6)
 stmt_ty _Py_ClassDef(identifier name, asdl_seq * bases, asdl_seq * body,
                      asdl_seq * decorator_list, int lineno, int col_offset,
@@ -508,8 +513,8 @@ expr_ty _Py_List(asdl_seq * elts, expr_context_ty ctx, int lineno, int
 #define Tuple(a0, a1, a2, a3, a4) _Py_Tuple(a0, a1, a2, a3, a4)
 expr_ty _Py_Tuple(asdl_seq * elts, expr_context_ty ctx, int lineno, int
                   col_offset, PyArena *arena);
-#define Ellipsis(a0) _Py_Ellipsis(a0)
-slice_ty _Py_Ellipsis(PyArena *arena);
+#define Ellipsis(a0, a1, a2) _Py_Ellipsis(a0, a1, a2)
+expr_ty _Py_Ellipsis(int lineno, int col_offset, PyArena *arena);
 #define Slice(a0, a1, a2, a3) _Py_Slice(a0, a1, a2, a3)
 slice_ty _Py_Slice(expr_ty lower, expr_ty upper, expr_ty step, PyArena *arena);
 #define ExtSlice(a0, a1) _Py_ExtSlice(a0, a1)
@@ -522,9 +527,11 @@ comprehension_ty _Py_comprehension(expr_ty target, expr_ty iter, asdl_seq *
 #define ExceptHandler(a0, a1, a2, a3, a4, a5) _Py_ExceptHandler(a0, a1, a2, a3, a4, a5)
 excepthandler_ty _Py_ExceptHandler(expr_ty type, expr_ty name, asdl_seq * body,
                                    int lineno, int col_offset, PyArena *arena);
-#define arguments(a0, a1, a2, a3, a4) _Py_arguments(a0, a1, a2, a3, a4)
-arguments_ty _Py_arguments(asdl_seq * args, identifier vararg, identifier
-                           kwarg, asdl_seq * defaults, PyArena *arena);
+#define arguments(a0, a1, a2, a3, a4, a5, a6, a7) _Py_arguments(a0, a1, a2, a3, a4, a5, a6, a7)
+arguments_ty _Py_arguments(asdl_seq * args, identifier vararg, expr_ty
+                           vararg_type, identifier kwarg, expr_ty kwarg_type,
+                           asdl_seq * defaults, asdl_seq * types, PyArena
+                           *arena);
 #define keyword(a0, a1, a2) _Py_keyword(a0, a1, a2)
 keyword_ty _Py_keyword(identifier arg, expr_ty value, PyArena *arena);
 #define alias(a0, a1, a2) _Py_alias(a0, a1, a2)
diff --git a/Include/code.h b/Include/code.h
index 7456fd610f..138e694527 100644
--- a/Include/code.h
+++ b/Include/code.h
@@ -52,6 +52,7 @@ typedef struct {
 #define CO_FUTURE_WITH_STATEMENT  0x8000
 #define CO_FUTURE_PRINT_FUNCTION  0x10000
 #define CO_FUTURE_UNICODE_LITERALS 0x20000
+#define CO_FUTURE_GOOGLE_TYPE_ANNOTATIONS 0x40000
 
 /* This should be defined if a future statement modifies the syntax.
    For example, when a keyword is added.
diff --git a/Include/compile.h b/Include/compile.h
index 61001016aa..09452f09ca 100644
--- a/Include/compile.h
+++ b/Include/compile.h
@@ -26,6 +26,7 @@ typedef struct {
 #define FUTURE_WITH_STATEMENT "with_statement"
 #define FUTURE_PRINT_FUNCTION "print_function"
 #define FUTURE_UNICODE_LITERALS "unicode_literals"
+#define FUTURE_GOOGLE_TYPE_ANNOTATIONS "google_type_annotations"
 
 
 struct _mod; /* Declare the existence of this type */
diff --git a/Include/graminit.h b/Include/graminit.h
index 40d531e8a1..df92c6dbb5 100644
--- a/Include/graminit.h
+++ b/Include/graminit.h
@@ -8,80 +8,83 @@
 #define decorated 261
 #define funcdef 262
 #define parameters 263
-#define varargslist 264
-#define fpdef 265
-#define fplist 266
-#define stmt 267
-#define simple_stmt 268
-#define small_stmt 269
-#define expr_stmt 270
-#define augassign 271
-#define print_stmt 272
-#define del_stmt 273
-#define pass_stmt 274
-#define flow_stmt 275
-#define break_stmt 276
-#define continue_stmt 277
-#define return_stmt 278
-#define yield_stmt 279
-#define raise_stmt 280
-#define import_stmt 281
-#define import_name 282
-#define import_from 283
-#define import_as_name 284
-#define dotted_as_name 285
-#define import_as_names 286
-#define dotted_as_names 287
-#define dotted_name 288
-#define global_stmt 289
-#define exec_stmt 290
-#define assert_stmt 291
-#define compound_stmt 292
-#define if_stmt 293
-#define while_stmt 294
-#define for_stmt 295
-#define try_stmt 296
-#define with_stmt 297
-#define with_item 298
-#define except_clause 299
-#define suite 300
-#define testlist_safe 301
-#define old_test 302
-#define old_lambdef 303
-#define test 304
-#define or_test 305
-#define and_test 306
-#define not_test 307
-#define comparison 308
-#define comp_op 309
-#define expr 310
-#define xor_expr 311
-#define and_expr 312
-#define shift_expr 313
-#define arith_expr 314
-#define term 315
-#define factor 316
-#define power 317
-#define atom 318
-#define listmaker 319
-#define testlist_comp 320
-#define lambdef 321
-#define trailer 322
-#define subscriptlist 323
-#define subscript 324
-#define sliceop 325
-#define exprlist 326
-#define testlist 327
-#define dictorsetmaker 328
-#define classdef 329
-#define arglist 330
-#define argument 331
-#define list_iter 332
-#define list_for 333
-#define list_if 334
-#define comp_iter 335
-#define comp_for 336
-#define comp_if 337
-#define testlist1 338
-#define encoding_decl 339
-#define yield_expr 340
+#define typedargslist 264
+#define varargslist 265
+#define fpdef 266
+#define fplist 267
+#define tdef 268
+#define tfpdef 269
+#define stmt 270
+#define simple_stmt 271
+#define small_stmt 272
+#define expr_stmt 273
+#define augassign 274
+#define print_stmt 275
+#define del_stmt 276
+#define pass_stmt 277
+#define flow_stmt 278
+#define break_stmt 279
+#define continue_stmt 280
+#define return_stmt 281
+#define yield_stmt 282
+#define raise_stmt 283
+#define import_stmt 284
+#define import_name 285
+#define import_from 286
+#define import_as_name 287
+#define dotted_as_name 288
+#define import_as_names 289
+#define dotted_as_names 290
+#define dotted_name 291
+#define global_stmt 292
+#define exec_stmt 293
+#define assert_stmt 294
+#define compound_stmt 295
+#define if_stmt 296
+#define while_stmt 297
+#define for_stmt 298
+#define try_stmt 299
+#define with_stmt 300
+#define with_item 301
+#define except_clause 302
+#define suite 303
+#define testlist_safe 304
+#define old_test 305
+#define old_lambdef 306
+#define test 307
+#define or_test 308
+#define and_test 309
+#define not_test 310
+#define comparison 311
+#define comp_op 312
+#define expr 313
+#define xor_expr 314
+#define and_expr 315
+#define shift_expr 316
+#define arith_expr 317
+#define term 318
+#define factor 319
+#define power 320
+#define atom 321
+#define listmaker 322
+#define testlist_comp 323
+#define lambdef 324
+#define trailer 325
+#define subscriptlist 326
+#define subscript 327
+#define sliceop 328
+#define exprlist 329
+#define testlist 330
+#define dictorsetmaker 331
+#define classdef 332
+#define arglist 333
+#define argument 334
+#define list_iter 335
+#define list_for 336
+#define list_if 337
+#define comp_iter 338
+#define comp_for 339
+#define comp_if 340
+#define testlist1 341
+#define encoding_decl 342
+#define yield_expr 343
diff --git a/Include/opcode.h b/Include/opcode.h
index 9ed548729e..03f7b5a740 100644
--- a/Include/opcode.h
+++ b/Include/opcode.h
@@ -137,10 +137,10 @@ extern "C" {
 #define RAISE_VARARGS	130	/* Number of raise arguments (1, 2 or 3) */
 /* CALL_FUNCTION_XXX opcodes defined below depend on this definition */
 #define CALL_FUNCTION	131	/* #args + (#kwargs<<8) */
-#define MAKE_FUNCTION	132	/* #defaults */
+#define MAKE_FUNCTION	132	/* #defaults + (#types<<16) */
 #define BUILD_SLICE 	133	/* Number of items */
 
-#define MAKE_CLOSURE    134     /* #free vars */
+#define MAKE_CLOSURE    134     /* #args + (#types<<16) */
 #define LOAD_CLOSURE    135     /* Load free variable from closure */
 #define LOAD_DEREF      136     /* Load and dereference from closure cell */ 
 #define STORE_DEREF     137     /* Store into cell */ 
diff --git a/Include/parsetok.h b/Include/parsetok.h
index ec1eb6ff7d..e0f2c7943b 100644
--- a/Include/parsetok.h
+++ b/Include/parsetok.h
@@ -29,6 +29,7 @@ typedef struct {
 
 #define PyPARSE_PRINT_IS_FUNCTION       0x0004
 #define PyPARSE_UNICODE_LITERALS        0x0008
+#define PyPARSE_GOOGLE_TYPE_ANNOTATIONS 0x0010
 
 
 
diff --git a/Include/pydebug.h b/Include/pydebug.h
index 0f45960f90..db15d3cd92 100644
--- a/Include/pydebug.h
+++ b/Include/pydebug.h
@@ -10,6 +10,7 @@ PyAPI_DATA(int) Py_VerboseFlag;
 PyAPI_DATA(int) Py_InteractiveFlag;
 PyAPI_DATA(int) Py_InspectFlag;
 PyAPI_DATA(int) Py_OptimizeFlag;
+PyAPI_DATA(int) Py_TypeAnnotationFlag;
 PyAPI_DATA(int) Py_NoSiteFlag;
 PyAPI_DATA(int) Py_BytesWarningFlag;
 PyAPI_DATA(int) Py_UseClassExceptionsFlag;
diff --git a/Include/pythonrun.h b/Include/pythonrun.h
index f0f4e382e5..6d8ade8805 100644
--- a/Include/pythonrun.h
+++ b/Include/pythonrun.h
@@ -9,7 +9,8 @@ extern "C" {
 
 #define PyCF_MASK (CO_FUTURE_DIVISION | CO_FUTURE_ABSOLUTE_IMPORT | \
                    CO_FUTURE_WITH_STATEMENT | CO_FUTURE_PRINT_FUNCTION | \
-                   CO_FUTURE_UNICODE_LITERALS)
+                   CO_FUTURE_UNICODE_LITERALS | \
+                   CO_FUTURE_GOOGLE_TYPE_ANNOTATIONS)
 #define PyCF_MASK_OBSOLETE (CO_NESTED)
 #define PyCF_SOURCE_IS_UTF8  0x0100
 #define PyCF_DONT_IMPLY_DEDENT 0x0200
diff --git a/Include/token.h b/Include/token.h
index 72659ac053..afb3fe1c01 100644
--- a/Include/token.h
+++ b/Include/token.h
@@ -60,10 +60,12 @@ extern "C" {
 #define DOUBLESLASH	48
 #define DOUBLESLASHEQUAL 49
 #define AT              50	
+#define RARROW          51
+#define ELLIPSIS        52
 /* Don't forget to update the table _PyParser_TokenNames in tokenizer.c! */
-#define OP		51
-#define ERRORTOKEN	52
-#define N_TOKENS	53
+#define OP		53
+#define ERRORTOKEN	54
+#define N_TOKENS	55
 
 /* Special definitions for cooperation with parser */
 
diff --git a/Lib/__future__.py b/Lib/__future__.py
index e0996eb007..95fd96fef2 100644
--- a/Lib/__future__.py
+++ b/Lib/__future__.py
@@ -55,6 +55,7 @@ all_feature_names = [
     "with_statement",
     "print_function",
     "unicode_literals",
+    "google_type_annotations",
 ]
 
 __all__ = ["all_feature_names"] + all_feature_names
@@ -70,6 +71,7 @@ CO_FUTURE_ABSOLUTE_IMPORT = 0x4000 # perform absolute imports by default
 CO_FUTURE_WITH_STATEMENT  = 0x8000   # with statement
 CO_FUTURE_PRINT_FUNCTION  = 0x10000   # print function
 CO_FUTURE_UNICODE_LITERALS = 0x20000 # unicode string literals
+CO_FUTURE_GOOGLE_TYPE_ANNOTATIONS = 0x40000  # type annotations
 
 class _Feature:
     def __init__(self, optionalRelease, mandatoryRelease, compiler_flag):
@@ -126,3 +128,7 @@ print_function = _Feature((2, 6, 0, "alpha", 2),
 unicode_literals = _Feature((2, 6, 0, "alpha", 2),
                             (3, 0, 0, "alpha", 0),
                             CO_FUTURE_UNICODE_LITERALS)
+
+google_type_annotations = _Feature((2, 7, 6, "alpha", 2),
+                                   (3, 0, 0, "alpha", 0),
+                                   CO_FUTURE_GOOGLE_TYPE_ANNOTATIONS)
diff --git a/Lib/compiler/future.py b/Lib/compiler/future.py
index fd5e5dfb37..259026fcd3 100644
--- a/Lib/compiler/future.py
+++ b/Lib/compiler/future.py
@@ -17,7 +17,7 @@ class FutureParser:
 
     features = ("nested_scopes", "generators", "division",
                 "absolute_import", "with_statement", "print_function",
-                "unicode_literals")
+                "unicode_literals", "google_type_annotations")
 
     def __init__(self):
         self.found = {} # set
diff --git a/Lib/compiler/pyassem.py b/Lib/compiler/pyassem.py
index b82073e4d1..f2ddfb6111 100644
--- a/Lib/compiler/pyassem.py
+++ b/Lib/compiler/pyassem.py
@@ -748,10 +748,10 @@ class StackDepthTracker:
     def CALL_FUNCTION_VAR_KW(self, argc):
         return self.CALL_FUNCTION(argc)-2
     def MAKE_FUNCTION(self, argc):
-        return -argc
+        return -(argc & 0xffff) - ((argc >> 16) & 0xffff)
     def MAKE_CLOSURE(self, argc):
         # XXX need to account for free variables too!
-        return -argc
+        return -(argc & 0xffff) - ((argc >> 16) & 0xffff)
     def BUILD_SLICE(self, argc):
         if argc == 2:
             return -1
diff --git a/Lib/compiler/pycodegen.py b/Lib/compiler/pycodegen.py
index 6515945f39..f4387db016 100644
--- a/Lib/compiler/pycodegen.py
+++ b/Lib/compiler/pycodegen.py
@@ -387,7 +387,7 @@ class CodeGenerator:
         self.set_lineno(node)
         for default in node.defaults:
             self.visit(default)
-        self._makeClosure(gen, len(node.defaults))
+        self._makeClosure(gen, len(node.defaults), 0)
         for i in range(ndecorators):
             self.emit('CALL_FUNCTION', 1)
 
@@ -401,7 +401,7 @@ class CodeGenerator:
         for base in node.bases:
             self.visit(base)
         self.emit('BUILD_TUPLE', len(node.bases))
-        self._makeClosure(gen, 0)
+        self._makeClosure(gen, 0, 0)
         self.emit('CALL_FUNCTION', 0)
         self.emit('BUILD_CLASS')
         self.storeName(node.name)
@@ -657,17 +657,17 @@ class CodeGenerator:
         self.emit('POP_JUMP_IF_FALSE', branch)
         self.newBlock()
 
-    def _makeClosure(self, gen, args):
+    def _makeClosure(self, gen, args, types):
         frees = gen.scope.get_free_vars()
         if frees:
             for name in frees:
                 self.emit('LOAD_CLOSURE', name)
             self.emit('BUILD_TUPLE', len(frees))
             self.emit('LOAD_CONST', gen)
-            self.emit('MAKE_CLOSURE', args)
+            self.emit('MAKE_CLOSURE', args | types << 16)
         else:
             self.emit('LOAD_CONST', gen)
-            self.emit('MAKE_FUNCTION', args)
+            self.emit('MAKE_FUNCTION', args | types << 16)
 
     def visitGenExpr(self, node):
         gen = GenExprCodeGenerator(node, self.scopes, self.class_name,
@@ -675,7 +675,7 @@ class CodeGenerator:
         walk(node.code, gen)
         gen.finish()
         self.set_lineno(node)
-        self._makeClosure(gen, 0)
+        self._makeClosure(gen, 0, 0)
         # precomputation of outmost iterable
         self.visit(node.code.quals[0].iter)
         self.emit('GET_ITER')
diff --git a/Lib/compiler/transformer.py b/Lib/compiler/transformer.py
index ba5c03ce75..618560ba8c 100644
--- a/Lib/compiler/transformer.py
+++ b/Lib/compiler/transformer.py
@@ -245,23 +245,26 @@ class Transformer:
         raise WalkerError()
 
     def funcdef(self, nodelist):
-        #                    -6   -5    -4         -3  -2    -1
-        # funcdef: [decorators] 'def' NAME parameters ':' suite
+        #                       0     1    2           3    4     -2  -1
+        # funcdef: [decorators] 'def' NAME parameters ['->' test] ':' suite
         # parameters: '(' [varargslist] ')'
 
-        if len(nodelist) == 6:
-            assert nodelist[0][0] == symbol.decorators
+        if nodelist[0][0] == symbol.decorators:
             decorators = self.decorators(nodelist[0][1:])
+            nodelist = nodelist[1:]
         else:
-            assert len(nodelist) == 5
             decorators = None
 
-        lineno = nodelist[-4][2]
-        name = nodelist[-4][1]
-        args = nodelist[-3][2]
+        assert nodelist[0][1] == 'def'
+
+        lineno = nodelist[1][2]
+        name = nodelist[1][1]
+        args = nodelist[2][2]
 
         if args[0] == symbol.varargslist:
-            names, defaults, flags = self.com_arglist(args[1:])
+            names, defaults, flags = self.com_arglist(args[1:], typed=False)
+        elif args[0] == symbol.typedargslist:
+            names, defaults, flags = self.com_arglist(args[1:], typed=True)
         else:
             names = defaults = ()
             flags = 0
@@ -810,12 +813,17 @@ class Transformer:
         # ('const', xxxx)) Nodes)
         return Discard(Const(None))
 
-    def com_arglist(self, nodelist):
+    def com_arglist(self, nodelist, typed=False):
+        # typedargslist: ((tfpdef ['=' test] ',')*
+        #     ('*' tdef [',' '**' tdef] | '**' tdef)
+        #   | tfpdef ['=' test] (',' tfpdef ['=' test])* [','])
         # varargslist:
         #     (fpdef ['=' test] ',')* ('*' NAME [',' '**' NAME] | '**' NAME)
         #   | fpdef ['=' test] (',' fpdef ['=' test])* [',']
         # fpdef: NAME | '(' fplist ')'
         # fplist: fpdef (',' fpdef)* [',']
+        # tdef: NAME [':' test]
+        # tfpdef: NAME [':' test] | '(' fplist ')'
         names = []
         defaults = []
         flags = 0
@@ -826,6 +834,8 @@ class Transformer:
             if node[0] == token.STAR or node[0] == token.DOUBLESTAR:
                 if node[0] == token.STAR:
                     node = nodelist[i+1]
+                    if node[0] == symbol.tdef:
+                        node = node[1]
                     if node[0] == token.NAME:
                         names.append(node[1])
                         flags = flags | CO_VARARGS
@@ -838,12 +848,15 @@ class Transformer:
                         node = nodelist[i+1]
                     else:
                         raise ValueError, "unexpected token: %s" % t
+                    if node[0] == symbol.tdef:
+                        node = node[1]
                     names.append(node[1])
                     flags = flags | CO_VARKEYWORDS
 
                 break
 
             # fpdef: NAME | '(' fplist ')'
+            # tfpdef: NAME [':' test] | '(' fplist ')'
             names.append(self.com_fpdef(node))
 
             i = i + 1
@@ -862,6 +875,7 @@ class Transformer:
 
     def com_fpdef(self, node):
         # fpdef: NAME | '(' fplist ')'
+        # tfpdef: NAME [':' test] | '(' fplist ')'
         if node[1][0] == token.LPAR:
             return self.com_fplist(node[2])
         return node[1][1]
diff --git a/Lib/symbol.py b/Lib/symbol.py
index b4d4e13ab8..cf83edb132 100755
--- a/Lib/symbol.py
+++ b/Lib/symbol.py
@@ -18,83 +18,86 @@ decorators = 260
 decorated = 261
 funcdef = 262
 parameters = 263
-varargslist = 264
-fpdef = 265
-fplist = 266
-stmt = 267
-simple_stmt = 268
-small_stmt = 269
-expr_stmt = 270
-augassign = 271
-print_stmt = 272
-del_stmt = 273
-pass_stmt = 274
-flow_stmt = 275
-break_stmt = 276
-continue_stmt = 277
-return_stmt = 278
-yield_stmt = 279
-raise_stmt = 280
-import_stmt = 281
-import_name = 282
-import_from = 283
-import_as_name = 284
-dotted_as_name = 285
-import_as_names = 286
-dotted_as_names = 287
-dotted_name = 288
-global_stmt = 289
-exec_stmt = 290
-assert_stmt = 291
-compound_stmt = 292
-if_stmt = 293
-while_stmt = 294
-for_stmt = 295
-try_stmt = 296
-with_stmt = 297
-with_item = 298
-except_clause = 299
-suite = 300
-testlist_safe = 301
-old_test = 302
-old_lambdef = 303
-test = 304
-or_test = 305
-and_test = 306
-not_test = 307
-comparison = 308
-comp_op = 309
-expr = 310
-xor_expr = 311
-and_expr = 312
-shift_expr = 313
-arith_expr = 314
-term = 315
-factor = 316
-power = 317
-atom = 318
-listmaker = 319
-testlist_comp = 320
-lambdef = 321
-trailer = 322
-subscriptlist = 323
-subscript = 324
-sliceop = 325
-exprlist = 326
-testlist = 327
-dictorsetmaker = 328
-classdef = 329
-arglist = 330
-argument = 331
-list_iter = 332
-list_for = 333
-list_if = 334
-comp_iter = 335
-comp_for = 336
-comp_if = 337
-testlist1 = 338
-encoding_decl = 339
-yield_expr = 340
+typedargslist = 264
+varargslist = 265
+fpdef = 266
+fplist = 267
+tdef = 268
+tfpdef = 269
+stmt = 270
+simple_stmt = 271
+small_stmt = 272
+expr_stmt = 273
+augassign = 274
+print_stmt = 275
+del_stmt = 276
+pass_stmt = 277
+flow_stmt = 278
+break_stmt = 279
+continue_stmt = 280
+return_stmt = 281
+yield_stmt = 282
+raise_stmt = 283
+import_stmt = 284
+import_name = 285
+import_from = 286
+import_as_name = 287
+dotted_as_name = 288
+import_as_names = 289
+dotted_as_names = 290
+dotted_name = 291
+global_stmt = 292
+exec_stmt = 293
+assert_stmt = 294
+compound_stmt = 295
+if_stmt = 296
+while_stmt = 297
+for_stmt = 298
+try_stmt = 299
+with_stmt = 300
+with_item = 301
+except_clause = 302
+suite = 303
+testlist_safe = 304
+old_test = 305
+old_lambdef = 306
+test = 307
+or_test = 308
+and_test = 309
+not_test = 310
+comparison = 311
+comp_op = 312
+expr = 313
+xor_expr = 314
+and_expr = 315
+shift_expr = 316
+arith_expr = 317
+term = 318
+factor = 319
+power = 320
+atom = 321
+listmaker = 322
+testlist_comp = 323
+lambdef = 324
+trailer = 325
+subscriptlist = 326
+subscript = 327
+sliceop = 328
+exprlist = 329
+testlist = 330
+dictorsetmaker = 331
+classdef = 332
+arglist = 333
+argument = 334
+list_iter = 335
+list_for = 336
+list_if = 337
+comp_iter = 338
+comp_for = 339
+comp_if = 340
+testlist1 = 341
+encoding_decl = 342
+yield_expr = 343
 #--end constants--
 
 sym_name = {}
diff --git a/Lib/test/test_ast.py b/Lib/test/test_ast.py
index 0a1ca4168a..c6ad031396 100644
--- a/Lib/test/test_ast.py
+++ b/Lib/test/test_ast.py
@@ -227,6 +227,25 @@ class AST_Tests(unittest.TestCase):
         self.assertIsInstance(slc.step, ast.Name)
         self.assertEqual(slc.step.id, "None")
 
+    def test_ellipsis(self):
+        a = ast.parse("a[...]").body[0].value
+        self.assertIsInstance(a.slice.value, ast.Ellipsis)
+
+    def test_ellipsis_2(self):
+        a = ast.parse("a[..., ...]").body[0].value
+        self.assertIsInstance(a.slice.value, ast.Tuple)
+        self.assertIsInstance(a.slice.value.elts[0], ast.Ellipsis)
+        self.assertIsInstance(a.slice.value.elts[1], ast.Ellipsis)
+
+    def test_ellipsis_literal(self):
+        e = ast.parse("from __future__ import google_type_annotations\n"
+                      "...").body[1].value
+        self.assertIsInstance(e, ast.Ellipsis)
+
+    def test_ellipsis_raises_without_future(self):
+        self.assertRaises(SyntaxError, lambda: ast.parse("..."))
+        self.assertRaises(SyntaxError, lambda: ast.parse("a = ..."))
+
     def test_from_import(self):
         im = ast.parse("from . import y").body[0]
         self.assertIsNone(im.module)
@@ -254,12 +273,13 @@ class AST_Tests(unittest.TestCase):
 
     def test_arguments(self):
         x = ast.arguments()
-        self.assertEqual(x._fields, ('args', 'vararg', 'kwarg', 'defaults'))
+        self.assertEqual(x._fields, ('args', 'vararg', 'vararg_type', 'kwarg',
+                                     'kwarg_type', 'defaults', 'types'))
 
         with self.assertRaises(AttributeError):
             x.vararg
 
-        x = ast.arguments(1, 2, 3, 4)
+        x = ast.arguments(1, 2, 3, 4, 5, 6, 7)
         self.assertEqual(x.vararg, 2)
 
     def test_field_attr_writable(self):
@@ -507,17 +527,18 @@ def main():
     test_main()
 
 #### EVERYTHING BELOW IS GENERATED #####
+
 exec_results = [
 ('Module', [('Expr', (1, 0), ('Name', (1, 0), 'None', ('Load',)))]),
-('Module', [('FunctionDef', (1, 0), 'f', ('arguments', [], None, None, []), [('Pass', (1, 9))], [])]),
-('Module', [('FunctionDef', (1, 0), 'f', ('arguments', [('Name', (1, 6), 'a', ('Param',))], None, None, []), [('Pass', (1, 10))], [])]),
-('Module', [('FunctionDef', (1, 0), 'f', ('arguments', [('Name', (1, 6), 'a', ('Param',))], None, None, [('Num', (1, 8), 0)]), [('Pass', (1, 12))], [])]),
-('Module', [('FunctionDef', (1, 0), 'f', ('arguments', [], 'args', None, []), [('Pass', (1, 14))], [])]),
-('Module', [('FunctionDef', (1, 0), 'f', ('arguments', [], None, 'kwargs', []), [('Pass', (1, 17))], [])]),
-('Module', [('FunctionDef', (1, 0), 'f', ('arguments', [('Name', (1, 6), 'a', ('Param',)), ('Name', (1, 9), 'b', ('Param',)), ('Name', (1, 14), 'c', ('Param',)), ('Name', (1, 22), 'd', ('Param',)), ('Name', (1, 28), 'e', ('Param',))], 'args', 'kwargs', [('Num', (1, 11), 1), ('Name', (1, 16), 'None', ('Load',)), ('List', (1, 24), [], ('Load',)), ('Dict', (1, 30), [], [])]), [('Pass', (1, 52))], [])]),
+('Module', [('FunctionDef', (1, 0), 'f', ('arguments', [], None, None, None, None, [], []), [('Pass', (1, 9))], None, [])]),
+('Module', [('FunctionDef', (1, 0), 'f', ('arguments', [('Name', (1, 6), 'a', ('Param',))], None, None, None, None, [], [None]), [('Pass', (1, 10))], None, [])]),
+('Module', [('FunctionDef', (1, 0), 'f', ('arguments', [('Name', (1, 6), 'a', ('Param',))], None, None, None, None, [('Num', (1, 8), 0)], [None]), [('Pass', (1, 12))], None, [])]),
+('Module', [('FunctionDef', (1, 0), 'f', ('arguments', [], 'args', None, None, None, [], []), [('Pass', (1, 14))], None, [])]),
+('Module', [('FunctionDef', (1, 0), 'f', ('arguments', [], None, None, 'kwargs', None, [], []), [('Pass', (1, 17))], None, [])]),
+('Module', [('FunctionDef', (1, 0), 'f', ('arguments', [('Name', (1, 6), 'a', ('Param',)), ('Name', (1, 9), 'b', ('Param',)), ('Name', (1, 14), 'c', ('Param',)), ('Name', (1, 22), 'd', ('Param',)), ('Name', (1, 28), 'e', ('Param',))], 'args', None, 'kwargs', None, [('Num', (1, 11), 1), ('Name', (1, 16), 'None', ('Load',)), ('List', (1, 24), [], ('Load',)), ('Dict', (1, 30), [], [])], [None, None, None, None, None]), [('Pass', (1, 52))], None, [])]),
 ('Module', [('ClassDef', (1, 0), 'C', [], [('Pass', (1, 8))], [])]),
 ('Module', [('ClassDef', (1, 0), 'C', [('Name', (1, 8), 'object', ('Load',))], [('Pass', (1, 17))], [])]),
-('Module', [('FunctionDef', (1, 0), 'f', ('arguments', [], None, None, []), [('Return', (1, 8), ('Num', (1, 15), 1))], [])]),
+('Module', [('FunctionDef', (1, 0), 'f', ('arguments', [], None, None, None, None, [], []), [('Return', (1, 8), ('Num', (1, 15), 1))], None, [])]),
 ('Module', [('Delete', (1, 0), [('Name', (1, 4), 'v', ('Del',))])]),
 ('Module', [('Assign', (1, 0), [('Name', (1, 0), 'v', ('Store',))], ('Num', (1, 4), 1))]),
 ('Module', [('AugAssign', (1, 0), ('Name', (1, 0), 'v', ('Store',)), ('Add',), ('Num', (1, 5), 1))]),
@@ -555,7 +576,7 @@ eval_results = [
 ('Expression', ('BoolOp', (1, 0), ('And',), [('Name', (1, 0), 'a', ('Load',)), ('Name', (1, 6), 'b', ('Load',))])),
 ('Expression', ('BinOp', (1, 0), ('Name', (1, 0), 'a', ('Load',)), ('Add',), ('Name', (1, 4), 'b', ('Load',)))),
 ('Expression', ('UnaryOp', (1, 0), ('Not',), ('Name', (1, 4), 'v', ('Load',)))),
-('Expression', ('Lambda', (1, 0), ('arguments', [], None, None, []), ('Name', (1, 7), 'None', ('Load',)))),
+('Expression', ('Lambda', (1, 0), ('arguments', [], None, None, None, None, [], []), ('Name', (1, 7), 'None', ('Load',)))),
 ('Expression', ('Dict', (1, 0), [('Num', (1, 2), 1)], [('Num', (1, 4), 2)])),
 ('Expression', ('Dict', (1, 0), [], [])),
 ('Expression', ('Set', (1, 0), [('Name', (1, 1), 'None', ('Load',))])),
diff --git a/Lib/test/test_compile.py b/Lib/test/test_compile.py
index e954a0ce74..1d8556e1d1 100644
--- a/Lib/test/test_compile.py
+++ b/Lib/test/test_compile.py
@@ -1,3 +1,4 @@
+from __future__ import google_type_annotations
 import math
 import unittest
 import sys
@@ -218,6 +219,52 @@ def f(x):
         self.assertEqual(comp_args(), (2, 3, 4))
         ''')
 
+    def test_typed_args(self) -> None:
+        exec textwrap.dedent('''
+        def comp_args(x: int, (a, b), y: int) -> int:
+            return x, y
+        self.assertEqual(comp_args(1, (3, 4), 2), (1, 2))
+
+        def comp_args((a, b), y: int) -> int:
+            return a, b
+        self.assertEqual(comp_args((1, 2), 3), (1, 2))
+
+        def comp_args(x: int, y: int, *args, **kwargs) -> int:
+            return args, kwargs
+        self.assertEqual(comp_args(1, 1, 2, a=3), ((2, ), {"a": 3}))
+
+        def comp_args(x: int, y, *args) -> []:
+            return x
+        self.assertEqual(comp_args(1, "", 3), 1)
+        ''')
+
+    def test_typed_args_in_closure(self):
+        exec textwrap.dedent('''
+        def f():
+          def g(x: int, (a, b), y: int) -> int:
+              return x, y
+          return g
+        self.assertEqual(f()(1, (3, 4), 2), (1, 2))
+
+        def f():
+          def g((a, b), y: int) -> int:
+              return a, b
+          return g
+        self.assertEqual(f()((1, 2), 3), (1, 2))
+
+        def f():
+          def g(x: int, y: int, *args, **kwargs) -> int:
+              return args, kwargs
+          return g
+        self.assertEqual(f()(1, 1, 2, a=3), ((2, ), {"a": 3}))
+
+        def f():
+          def g(x: int, y, *args) -> []:
+            return x
+          return g
+        self.assertEqual(f()(1, "", 3), 1)
+        ''')
+
     def test_argument_order(self):
         try:
             exec 'def f(a=1, (b, c)): pass'
@@ -505,6 +552,14 @@ if 1:
         self.assertEqual(d[..., ...], 2)
         del d[..., ...]
         self.assertNotIn((Ellipsis, Ellipsis), d)
+        # Ellipsis literal
+        e = ...
+        d[e] = 1
+        self.assertEqual(d[e], 1)
+        d[e] += 1
+        self.assertEqual(d[e], 2)
+        del d[e]
+        self.assertNotIn(Ellipsis, d)
 
     def test_mangling(self):
         class A:
diff --git a/Lib/test/test_compiler.py b/Lib/test/test_compiler.py
index c98e494742..be1cb96b62 100644
--- a/Lib/test/test_compiler.py
+++ b/Lib/test/test_compiler.py
@@ -87,6 +87,28 @@ class CompilerTest(unittest.TestCase):
     def testDefaultArgs(self):
         self.assertRaises(SyntaxError, compiler.parse, "def foo(a=1, b): pass")
 
+    def testTupleArgs(self):
+        compiler.compile("def g(x, (y, z)): pass", "<string>", "exec")
+        compiler.compile("def g(*args: tuple): pass", "<string>", "exec")
+        self.assertRaises(SyntaxError, compiler.parse, "def g(x, (y: int, z)): pass")
+
+    def testTypedArgs(self):
+        def c(s):
+            compiler.compile(s, "<string>", "exec")
+        c("def g(x: int, y: int) -> int: pass\n\n")
+        c("def g(x: int, *args, **kwargs) -> int: pass\n\n")
+        c("def g(x: [1, 3][1:3]) -> -3: pass\n\n")
+        c("def g(x: int, y: int = 2, z: int = 3): pass\n\n")
+        c("def g(x, *args): pass\n\n")
+        c("def g(x, *args, **kwargs: int): pass\n\n")
+        c("def g(x, *args: int): pass\n\n")
+        c("def g(x, *args: int, **kwargs: int): pass\n\n")
+        c("def g(x, **kwargs: int): pass\n\n")
+        c("def g(x, *args, **kwargs): pass\n\n")
+
+    def testTypedArgsWithtuples(self):
+        compiler.parse("def g(x: int, (u, v), y: float): pass\n\n")
+
     def testDocstrings(self):
         c = compiler.compile('"doc"', '<string>', 'exec')
         self.assertIn('__doc__', c.co_names)
diff --git a/Lib/test/test_parser.py b/Lib/test/test_parser.py
index 73974a96f0..dbc93c5e8b 100644
--- a/Lib/test/test_parser.py
+++ b/Lib/test/test_parser.py
@@ -125,6 +125,14 @@ class RoundtripLegalSyntaxTestCase(unittest.TestCase):
         self.check_expr("(x for x in range(10))")
         self.check_expr("foo(x for x in range(10))")
 
+    def test_ellipsis(self):
+        self.check_expr("Ellipsis")
+        self.check_expr("...")
+        self.check_expr("a[...]")
+        self.check_expr("a[..., ...]")
+        self.check_expr("a[x, ...]")
+        self.check_expr("a[..., x:y]")
+
     def test_print(self):
         self.check_suite("print")
         self.check_suite("print 1")
@@ -174,6 +182,25 @@ class RoundtripLegalSyntaxTestCase(unittest.TestCase):
         self.check_suite("def f(a, b, foo=bar, *args, **kw): pass")
         self.check_suite("def f(a, b, foo=bar, **kw): pass")
 
+        self.check_suite("def f(a: int, b): pass")
+        self.check_suite("def f(a, b:int): pass")
+        self.check_suite("def f(a:int, b:int): pass")
+        self.check_suite("def f(a, b) -> int: pass")
+        self.check_suite("def f(a: int, b) -> int: pass")
+        self.check_suite("def f(a, b:int) -> int: pass")
+        self.check_suite("def f(a:int, b:int) -> int: pass")
+        self.check_suite("def f(a:int, b:int, *args) -> int: pass")
+        self.check_suite("def f(a:int, b:int, *args, **kw) -> int: pass")
+        self.check_suite("def f(a=3, b:int, c:int=3, *args, **kw) -> int: pass")
+
+        self.check_suite("def f(*args: int): pass")
+        self.check_suite("def f(**kwargs: float): pass")
+        self.check_suite("def f(*args: str, **kwargs: x**3): pass")
+        self.check_suite("def f(*args: x*y, **kwargs: str): pass")
+        self.check_suite("def f(*args: str, **kwargs): pass")
+        self.check_suite("def f(x, y: int, *args: str, **kwargs): pass")
+        self.check_suite("def f(x, y: int, **kwargs: float): pass")
+
         self.check_suite("@staticmethod\n"
                          "def f(): pass")
         self.check_suite("@staticmethod\n"
diff --git a/Lib/token.py b/Lib/token.py
index 45825b4a77..c9dac79437 100644
--- a/Lib/token.py
+++ b/Lib/token.py
@@ -59,9 +59,11 @@ DOUBLESTAREQUAL = 47
 DOUBLESLASH = 48
 DOUBLESLASHEQUAL = 49
 AT = 50
-OP = 51
-ERRORTOKEN = 52
-N_TOKENS = 53
+RARROW = 51
+ELLIPSIS = 52
+OP = 53
+ERRORTOKEN = 54
+N_TOKENS = 55
 NT_OFFSET = 256
 #--end constants--
 
diff --git a/Lib/tokenize.py b/Lib/tokenize.py
index 6c857f8547..b4132da853 100644
--- a/Lib/tokenize.py
+++ b/Lib/tokenize.py
@@ -80,7 +80,7 @@ String = group(r"[uUbB]?[rR]?'[^\n'\\]*(?:\\.[^\n'\\]*)*'",
 # longest operators first (e.g., if = came before ==, == would get
 # recognized as two instances of =).
 Operator = group(r"\*\*=?", r">>=?", r"<<=?", r"<>", r"!=",
-                 r"//=?",
+                 r"//=?", r"->",
                  r"[+\-*/%&|^=<>]=?",
                  r"~")
 
diff --git a/Modules/main.c b/Modules/main.c
index a6edf822d0..6d43051344 100644
--- a/Modules/main.c
+++ b/Modules/main.c
@@ -43,7 +43,7 @@ static char **orig_argv;
 static int  orig_argc;
 
 /* command line options */
-#define BASE_OPTS "3bBc:dEhiJm:OQ:RsStuUvVW:xX?"
+#define BASE_OPTS "3bBc:dEhiJm:OTQ:RsStuUvVW:xX?"
 
 #ifndef RISCOS
 #define PROGRAM_OPTS BASE_OPTS
@@ -76,6 +76,7 @@ static char *usage_2 = "\
 -m mod : run library module as a script (terminates option list)\n\
 -O     : optimize generated bytecode slightly; also PYTHONOPTIMIZE=x\n\
 -OO    : remove doc-strings in addition to the -O optimizations\n\
+-T     : generate (no-op) bytecode for type annotations\n\
 -R     : use a pseudo-random salt to make hash() values of various types be\n\
          unpredictable between separate invocations of the interpreter, as\n\
          a defense against denial-of-service attacks\n\
@@ -375,6 +376,10 @@ Py_Main(int argc, char **argv)
             Py_OptimizeFlag++;
             break;
 
+        case 'T':
+            Py_TypeAnnotationFlag++;
+            break;
+
         case 'B':
             Py_DontWriteBytecodeFlag++;
             break;
diff --git a/Modules/parsermodule.c b/Modules/parsermodule.c
index fcc618d5d9..f06bc91990 100644
--- a/Modules/parsermodule.c
+++ b/Modules/parsermodule.c
@@ -1014,6 +1014,7 @@ VALIDATER(comp_iter);           VALIDATER(comp_if);
 VALIDATER(testlist_comp);       VALIDATER(yield_expr);
 VALIDATER(yield_or_testlist);   VALIDATER(or_test);
 VALIDATER(old_test);            VALIDATER(old_lambdef);
+VALIDATER(typedargslist);
 
 #undef VALIDATER
 
@@ -1171,7 +1172,7 @@ validate_if(node *tree)
 
 
 /*  parameters:
- *      '(' [varargslist] ')'
+ *      '(' [typedargslist] ')'
  *
  */
 static int
@@ -1184,7 +1185,7 @@ validate_parameters(node *tree)
         res = (validate_lparen(CHILD(tree, 0))
                && validate_rparen(CHILD(tree, nch - 1)));
         if (res && (nch == 3))
-            res = validate_varargslist(CHILD(tree, 1));
+            res = validate_typedargslist(CHILD(tree, 1));
     }
     else {
         (void) validate_numnodes(tree, 2, "parameters");
@@ -1250,6 +1251,25 @@ validate_testlist_safe(node *tree)
                                     validate_old_test, "testlist_safe"));
 }
 
+/* NAME | tdef
+ */
+static int
+validate_name_or_tdef(node *tree)
+{
+    if (TYPE(tree) == tdef) {
+        if (NCH(tree) == 1) {
+            return validate_name(CHILD(tree, 0), NULL);
+        } else if (NCH(tree) == 3) {
+            return validate_name(CHILD(tree, 0), NULL) &&
+                   validate_colon(CHILD(tree, 1)) &&
+                   validate_test(CHILD(tree, 2));
+        } else {
+            return 0;
+        }
+    } else {
+        return validate_name(tree, NULL);
+    }
+}
 
 /* '*' NAME [',' '**' NAME] | '**' NAME
  */
@@ -1268,42 +1288,36 @@ validate_varargslist_trailer(node *tree, int start)
     if (sym == STAR) {
         /*
          *  ('*' NAME [',' '**' NAME]
+            ('*' tdef [',' '**' tdef]
          */
         if (nch-start == 2)
-            res = validate_name(CHILD(tree, start+1), NULL);
+            res = validate_name_or_tdef(CHILD(tree, start+1));
         else if (nch-start == 5)
-            res = (validate_name(CHILD(tree, start+1), NULL)
+            res = (validate_name_or_tdef(CHILD(tree, start+1))
                    && validate_comma(CHILD(tree, start+2))
                    && validate_doublestar(CHILD(tree, start+3))
-                   && validate_name(CHILD(tree, start+4), NULL));
+                   && validate_name_or_tdef(CHILD(tree, start+4)));
     }
     else if (sym == DOUBLESTAR) {
         /*
          *  '**' NAME
          */
         if (nch-start == 2)
-            res = validate_name(CHILD(tree, start+1), NULL);
+            res = validate_name_or_tdef(CHILD(tree, start+1));
     }
-    if (!res)
+    if (!res) {
         err_string("illegal variable argument trailer for varargslist");
+    }
     return res;
 }
 
-
-/*  validate_varargslist()
- *
- *  varargslist:
- *      (fpdef ['=' test] ',')*
- *           ('*' NAME [',' '**' NAME]
- *         | '**' NAME)
- *    | fpdef ['=' test] (',' fpdef ['=' test])* [',']
- *
- */
+/* common functionality for validate_varargslist and validate_typedargslist */
 static int
-validate_varargslist(node *tree)
+validate_argslist(node *tree, int typed)
 {
     int nch = NCH(tree);
-    int res = validate_ntype(tree, varargslist) && (nch != 0);
+    int root_type = typed ? typedargslist : varargslist;
+    int res = validate_ntype(tree, root_type) && (nch != 0);
     int sym;
 
     if (!res)
@@ -1393,11 +1407,61 @@ validate_varargslist(node *tree)
                 err_string("illegal formation for varargslist");
             }
         }
+    } else if (sym == tfpdef) {
+        int i;
+        for (i = 0; i < nch; i++) {
+            node *n = CHILD(tree, i);
+            switch(TYPE(n)) {
+                case tfpdef:
+                case tdef:
+                case test:
+                case EQUAL:
+                case COMMA:
+                case STAR:
+                case DOUBLESTAR:
+                case NAME:
+                break;
+                default:
+                     PyErr_Format(parser_error, "Invalid node type %d in tfpdef",
+                                  TYPE(n));
+                     return 0;
+            }
+        }
+        return 1;
     }
     return res;
 }
 
 
+/*  validate_varargslist()
+ *
+ *  varargslist:
+ *      (fpdef ['=' test] ',')*
+ *           ('*' NAME [',' '**' NAME]
+ *         | '**' NAME)
+ *    | fpdef ['=' test] (',' fpdef ['=' test])* [',']
+ *
+ */
+static int
+validate_varargslist(node *tree)
+{
+    return validate_argslist(tree, 0);
+}
+
+
+/*  validate_typedargslist()
+ *
+ *  typedargslist: ((tfpdef ['=' test] ',')*
+ *               ('*' NAME [',' '**' NAME] | '**' NAME) |
+ *               tfpdef ['=' test] (',' tfpdef ['=' test])* [','])
+ */
+static int
+validate_typedargslist(node *tree)
+{
+    return validate_argslist(tree, 1);
+}
+
+
 /*  list_iter:  list_for | list_if
  */
 static int
@@ -2562,6 +2626,7 @@ validate_atom(node *tree)
             break;
           case NAME:
           case NUMBER:
+          case ELLIPSIS:
             res = (nch == 1);
             break;
           case STRING:
@@ -2730,19 +2795,19 @@ validate_with_stmt(node *tree)
 
 /*  funcdef:
  *
- *     -5   -4         -3  -2    -1
- *  'def' NAME parameters ':' suite
+ *  0     1    2                      -2  -1
+ *  'def' NAME parameters ['->' test] ':' suite
  */
 static int
 validate_funcdef(node *tree)
 {
     int nch = NCH(tree);
     int ok = (validate_ntype(tree, funcdef)
-               && (nch == 5)
-               && validate_name(RCHILD(tree, -5), "def")
-               && validate_ntype(RCHILD(tree, -4), NAME)
+               && (nch == 5 || nch == 7)
+               && validate_name(CHILD(tree, 0), "def")
+               && validate_ntype(CHILD(tree, 1), NAME)
                && validate_colon(RCHILD(tree, -2))
-               && validate_parameters(RCHILD(tree, -3))
+               && validate_parameters(CHILD(tree, 2))
                && validate_suite(RCHILD(tree, -1)));
     return ok;
 }
diff --git a/Parser/Python.asdl b/Parser/Python.asdl
index 9a9b933143..aa252c1d51 100644
--- a/Parser/Python.asdl
+++ b/Parser/Python.asdl
@@ -10,7 +10,7 @@ module Python version "$Revision$"
 	    | Suite(stmt* body)
 
 	stmt = FunctionDef(identifier name, arguments args, 
-                            stmt* body, expr* decorator_list)
+                            stmt* body, expr? returns, expr* decorator_list)
 	      | ClassDef(identifier name, expr* bases, stmt* body, expr* decorator_list)
 	      | Return(expr? value)
 
@@ -79,13 +79,14 @@ module Python version "$Revision$"
 	     | Name(identifier id, expr_context ctx)
 	     | List(expr* elts, expr_context ctx) 
 	     | Tuple(expr* elts, expr_context ctx)
+	     | Ellipsis
 
 	      -- col_offset is the byte offset in the utf8 string the parser uses
 	      attributes (int lineno, int col_offset)
 
 	expr_context = Load | Store | Del | AugLoad | AugStore | Param
 
-	slice = Ellipsis | Slice(expr? lower, expr? upper, expr? step) 
+	slice = Slice(expr? lower, expr? upper, expr? step)
 	      | ExtSlice(slice* dims) 
 	      | Index(expr value) 
 
@@ -104,8 +105,10 @@ module Python version "$Revision$"
 	excepthandler = ExceptHandler(expr? type, expr? name, stmt* body)
 	                attributes (int lineno, int col_offset)
 
-	arguments = (expr* args, identifier? vararg, 
-		     identifier? kwarg, expr* defaults)
+	arguments = (expr* args,
+		     identifier? vararg, expr? vararg_type,
+		     identifier? kwarg, expr? kwarg_type,
+		     expr* defaults, expr* types)
 
         -- keyword arguments supplied to call
         keyword = (identifier arg, expr value)
diff --git a/Parser/parser.c b/Parser/parser.c
index b753a177c8..b2337c160f 100644
--- a/Parser/parser.c
+++ b/Parser/parser.c
@@ -210,6 +210,8 @@ future_hack(parser_state *ps)
                 ps->p_flags |= CO_FUTURE_PRINT_FUNCTION;
             } else if (strcmp(str_ch, FUTURE_UNICODE_LITERALS) == 0) {
                 ps->p_flags |= CO_FUTURE_UNICODE_LITERALS;
+            } else if (strcmp(str_ch, FUTURE_GOOGLE_TYPE_ANNOTATIONS) == 0) {
+                ps->p_flags |= CO_FUTURE_GOOGLE_TYPE_ANNOTATIONS;
             }
         }
     }
diff --git a/Parser/parsetok.c b/Parser/parsetok.c
index 069cc6b711..612f434708 100644
--- a/Parser/parsetok.c
+++ b/Parser/parsetok.c
@@ -146,6 +146,9 @@ parsetok(struct tok_state *tok, grammar *g, int start, perrdetail *err_ret,
     if (*flags & PyPARSE_UNICODE_LITERALS) {
         ps->p_flags |= CO_FUTURE_UNICODE_LITERALS;
     }
+    if (*flags & PyPARSE_GOOGLE_TYPE_ANNOTATIONS) {
+        ps->p_flags |= CO_FUTURE_GOOGLE_TYPE_ANNOTATIONS;
+    }
 
 #endif
 
diff --git a/Parser/tokenizer.c b/Parser/tokenizer.c
index 61bfb4e1b7..aaaf4337e0 100644
--- a/Parser/tokenizer.c
+++ b/Parser/tokenizer.c
@@ -86,6 +86,8 @@ char *_PyParser_TokenNames[] = {
     "DOUBLESLASH",
     "DOUBLESLASHEQUAL",
     "AT",
+    "RARROW",
+    "ELLIPSIS",
     /* This table must match the #defines in token.h! */
     "OP",
     "<ERRORTOKEN>",
@@ -1108,6 +1110,7 @@ PyToken_TwoChars(int c1, int c2)
     case '-':
         switch (c2) {
         case '=':               return MINEQUAL;
+        case '>':               return RARROW;
         }
         break;
     case '*':
@@ -1190,6 +1193,16 @@ PyToken_ThreeChars(int c1, int c2, int c3)
             break;
         }
         break;
+    case '.':
+        switch (c2) {
+        case '.':
+            switch (c3) {
+            case '.':
+                return ELLIPSIS;
+            }
+            break;
+        }
+        break;
     }
     return OP;
 }
@@ -1416,13 +1429,22 @@ tok_get(register struct tok_state *tok, char **p_start, char **p_end)
         c = tok_nextc(tok);
         if (isdigit(c)) {
             goto fraction;
-        }
-        else {
+        } else if (c == '.') {
+            c = tok_nextc(tok);
+            if (c == '.') {
+                *p_start = tok->start;
+                *p_end = tok->cur;
+                return ELLIPSIS;
+            } else {
+                tok_backup(tok, c);
+            }
+            tok_backup(tok, '.');
+        } else {
             tok_backup(tok, c);
-            *p_start = tok->start;
-            *p_end = tok->cur;
-            return DOT;
         }
+        *p_start = tok->start;
+        *p_end = tok->cur;
+        return DOT;
     }
 
     /* Number */
diff --git a/Python/Python-ast.c b/Python/Python-ast.c
index 2e7a1afbbc..7ec46b489a 100644
--- a/Python/Python-ast.c
+++ b/Python/Python-ast.c
@@ -42,6 +42,7 @@ static char *FunctionDef_fields[]={
         "name",
         "args",
         "body",
+        "returns",
         "decorator_list",
 };
 static PyTypeObject *ClassDef_type;
@@ -270,6 +271,7 @@ static char *Tuple_fields[]={
         "elts",
         "ctx",
 };
+static PyTypeObject *Ellipsis_type;
 static PyTypeObject *expr_context_type;
 static PyObject *Load_singleton, *Store_singleton, *Del_singleton,
 *AugLoad_singleton, *AugStore_singleton, *Param_singleton;
@@ -282,7 +284,6 @@ static PyTypeObject *AugStore_type;
 static PyTypeObject *Param_type;
 static PyTypeObject *slice_type;
 static PyObject* ast2obj_slice(void*);
-static PyTypeObject *Ellipsis_type;
 static PyTypeObject *Slice_type;
 static char *Slice_fields[]={
         "lower",
@@ -367,8 +368,11 @@ static PyObject* ast2obj_arguments(void*);
 static char *arguments_fields[]={
         "args",
         "vararg",
+        "vararg_type",
         "kwarg",
+        "kwarg_type",
         "defaults",
+        "types",
 };
 static PyTypeObject *keyword_type;
 static PyObject* ast2obj_keyword(void*);
@@ -688,7 +692,7 @@ static int init_types(void)
         if (!stmt_type) return 0;
         if (!add_attributes(stmt_type, stmt_attributes, 2)) return 0;
         FunctionDef_type = make_type("FunctionDef", stmt_type,
-                                     FunctionDef_fields, 4);
+                                     FunctionDef_fields, 5);
         if (!FunctionDef_type) return 0;
         ClassDef_type = make_type("ClassDef", stmt_type, ClassDef_fields, 4);
         if (!ClassDef_type) return 0;
@@ -784,6 +788,8 @@ static int init_types(void)
         if (!List_type) return 0;
         Tuple_type = make_type("Tuple", expr_type, Tuple_fields, 2);
         if (!Tuple_type) return 0;
+        Ellipsis_type = make_type("Ellipsis", expr_type, NULL, 0);
+        if (!Ellipsis_type) return 0;
         expr_context_type = make_type("expr_context", &AST_type, NULL, 0);
         if (!expr_context_type) return 0;
         if (!add_attributes(expr_context_type, NULL, 0)) return 0;
@@ -814,8 +820,6 @@ static int init_types(void)
         slice_type = make_type("slice", &AST_type, NULL, 0);
         if (!slice_type) return 0;
         if (!add_attributes(slice_type, NULL, 0)) return 0;
-        Ellipsis_type = make_type("Ellipsis", slice_type, NULL, 0);
-        if (!Ellipsis_type) return 0;
         Slice_type = make_type("Slice", slice_type, Slice_fields, 3);
         if (!Slice_type) return 0;
         ExtSlice_type = make_type("ExtSlice", slice_type, ExtSlice_fields, 1);
@@ -956,7 +960,7 @@ static int init_types(void)
         ExceptHandler_type = make_type("ExceptHandler", excepthandler_type,
                                        ExceptHandler_fields, 3);
         if (!ExceptHandler_type) return 0;
-        arguments_type = make_type("arguments", &AST_type, arguments_fields, 4);
+        arguments_type = make_type("arguments", &AST_type, arguments_fields, 7);
         if (!arguments_type) return 0;
         keyword_type = make_type("keyword", &AST_type, keyword_fields, 2);
         if (!keyword_type) return 0;
@@ -1038,8 +1042,9 @@ Suite(asdl_seq * body, PyArena *arena)
 }
 
 stmt_ty
-FunctionDef(identifier name, arguments_ty args, asdl_seq * body, asdl_seq *
-            decorator_list, int lineno, int col_offset, PyArena *arena)
+FunctionDef(identifier name, arguments_ty args, asdl_seq * body, expr_ty
+            returns, asdl_seq * decorator_list, int lineno, int col_offset,
+            PyArena *arena)
 {
         stmt_ty p;
         if (!name) {
@@ -1059,6 +1064,7 @@ FunctionDef(identifier name, arguments_ty args, asdl_seq * body, asdl_seq *
         p->v.FunctionDef.name = name;
         p->v.FunctionDef.args = args;
         p->v.FunctionDef.body = body;
+        p->v.FunctionDef.returns = returns;
         p->v.FunctionDef.decorator_list = decorator_list;
         p->lineno = lineno;
         p->col_offset = col_offset;
@@ -1981,14 +1987,16 @@ Tuple(asdl_seq * elts, expr_context_ty ctx, int lineno, int col_offset, PyArena
         return p;
 }
 
-slice_ty
-Ellipsis(PyArena *arena)
+expr_ty
+Ellipsis(int lineno, int col_offset, PyArena *arena)
 {
-        slice_ty p;
-        p = (slice_ty)PyArena_Malloc(arena, sizeof(*p));
+        expr_ty p;
+        p = (expr_ty)PyArena_Malloc(arena, sizeof(*p));
         if (!p)
                 return NULL;
         p->kind = Ellipsis_kind;
+        p->lineno = lineno;
+        p->col_offset = col_offset;
         return p;
 }
 
@@ -2076,8 +2084,9 @@ ExceptHandler(expr_ty type, expr_ty name, asdl_seq * body, int lineno, int
 }
 
 arguments_ty
-arguments(asdl_seq * args, identifier vararg, identifier kwarg, asdl_seq *
-          defaults, PyArena *arena)
+arguments(asdl_seq * args, identifier vararg, expr_ty vararg_type, identifier
+          kwarg, expr_ty kwarg_type, asdl_seq * defaults, asdl_seq * types,
+          PyArena *arena)
 {
         arguments_ty p;
         p = (arguments_ty)PyArena_Malloc(arena, sizeof(*p));
@@ -2085,8 +2094,11 @@ arguments(asdl_seq * args, identifier vararg, identifier kwarg, asdl_seq *
                 return NULL;
         p->args = args;
         p->vararg = vararg;
+        p->vararg_type = vararg_type;
         p->kwarg = kwarg;
+        p->kwarg_type = kwarg_type;
         p->defaults = defaults;
+        p->types = types;
         return p;
 }
 
@@ -2214,6 +2226,11 @@ ast2obj_stmt(void* _o)
                 if (PyObject_SetAttrString(result, "body", value) == -1)
                         goto failed;
                 Py_DECREF(value);
+                value = ast2obj_expr(o->v.FunctionDef.returns);
+                if (!value) goto failed;
+                if (PyObject_SetAttrString(result, "returns", value) == -1)
+                        goto failed;
+                Py_DECREF(value);
                 value = ast2obj_list(o->v.FunctionDef.decorator_list,
                                      ast2obj_expr);
                 if (!value) goto failed;
@@ -2911,6 +2928,10 @@ ast2obj_expr(void* _o)
                         goto failed;
                 Py_DECREF(value);
                 break;
+        case Ellipsis_kind:
+                result = PyType_GenericNew(Ellipsis_type, NULL, NULL);
+                if (!result) goto failed;
+                break;
         }
         value = ast2obj_int(o->lineno);
         if (!value) goto failed;
@@ -2967,10 +2988,6 @@ ast2obj_slice(void* _o)
         }
 
         switch (o->kind) {
-        case Ellipsis_kind:
-                result = PyType_GenericNew(Ellipsis_type, NULL, NULL);
-                if (!result) goto failed;
-                break;
         case Slice_kind:
                 result = PyType_GenericNew(Slice_type, NULL, NULL);
                 if (!result) goto failed;
@@ -3240,16 +3257,31 @@ ast2obj_arguments(void* _o)
         if (PyObject_SetAttrString(result, "vararg", value) == -1)
                 goto failed;
         Py_DECREF(value);
+        value = ast2obj_expr(o->vararg_type);
+        if (!value) goto failed;
+        if (PyObject_SetAttrString(result, "vararg_type", value) == -1)
+                goto failed;
+        Py_DECREF(value);
         value = ast2obj_identifier(o->kwarg);
         if (!value) goto failed;
         if (PyObject_SetAttrString(result, "kwarg", value) == -1)
                 goto failed;
         Py_DECREF(value);
+        value = ast2obj_expr(o->kwarg_type);
+        if (!value) goto failed;
+        if (PyObject_SetAttrString(result, "kwarg_type", value) == -1)
+                goto failed;
+        Py_DECREF(value);
         value = ast2obj_list(o->defaults, ast2obj_expr);
         if (!value) goto failed;
         if (PyObject_SetAttrString(result, "defaults", value) == -1)
                 goto failed;
         Py_DECREF(value);
+        value = ast2obj_list(o->types, ast2obj_expr);
+        if (!value) goto failed;
+        if (PyObject_SetAttrString(result, "types", value) == -1)
+                goto failed;
+        Py_DECREF(value);
         return result;
 failed:
         Py_XDECREF(value);
@@ -3524,6 +3556,7 @@ obj2ast_stmt(PyObject* obj, stmt_ty* out, PyArena* arena)
                 identifier name;
                 arguments_ty args;
                 asdl_seq* body;
+                expr_ty returns;
                 asdl_seq* decorator_list;
 
                 if (PyObject_HasAttrString(obj, "name")) {
@@ -3579,6 +3612,17 @@ obj2ast_stmt(PyObject* obj, stmt_ty* out, PyArena* arena)
                         PyErr_SetString(PyExc_TypeError, "required field \"body\" missing from FunctionDef");
                         return 1;
                 }
+                if (PyObject_HasAttrString(obj, "returns")) {
+                        int res;
+                        tmp = PyObject_GetAttrString(obj, "returns");
+                        if (tmp == NULL) goto failed;
+                        res = obj2ast_expr(tmp, &returns, arena);
+                        if (res != 0) goto failed;
+                        Py_XDECREF(tmp);
+                        tmp = NULL;
+                } else {
+                        returns = NULL;
+                }
                 if (PyObject_HasAttrString(obj, "decorator_list")) {
                         int res;
                         Py_ssize_t len;
@@ -3608,8 +3652,8 @@ obj2ast_stmt(PyObject* obj, stmt_ty* out, PyArena* arena)
                         PyErr_SetString(PyExc_TypeError, "required field \"decorator_list\" missing from FunctionDef");
                         return 1;
                 }
-                *out = FunctionDef(name, args, body, decorator_list, lineno,
-                                   col_offset, arena);
+                *out = FunctionDef(name, args, body, returns, decorator_list,
+                                   lineno, col_offset, arena);
                 if (*out == NULL) goto failed;
                 return 0;
         }
@@ -5910,6 +5954,16 @@ obj2ast_expr(PyObject* obj, expr_ty* out, PyArena* arena)
                 if (*out == NULL) goto failed;
                 return 0;
         }
+        isinstance = PyObject_IsInstance(obj, (PyObject*)Ellipsis_type);
+        if (isinstance == -1) {
+                return 1;
+        }
+        if (isinstance) {
+
+                *out = Ellipsis(lineno, col_offset, arena);
+                if (*out == NULL) goto failed;
+                return 0;
+        }
 
         tmp = PyObject_Repr(obj);
         if (tmp == NULL) goto failed;
@@ -5993,16 +6047,6 @@ obj2ast_slice(PyObject* obj, slice_ty* out, PyArena* arena)
                 *out = NULL;
                 return 0;
         }
-        isinstance = PyObject_IsInstance(obj, (PyObject*)Ellipsis_type);
-        if (isinstance == -1) {
-                return 1;
-        }
-        if (isinstance) {
-
-                *out = Ellipsis(arena);
-                if (*out == NULL) goto failed;
-                return 0;
-        }
         isinstance = PyObject_IsInstance(obj, (PyObject*)Slice_type);
         if (isinstance == -1) {
                 return 1;
@@ -6590,8 +6634,11 @@ obj2ast_arguments(PyObject* obj, arguments_ty* out, PyArena* arena)
         PyObject* tmp = NULL;
         asdl_seq* args;
         identifier vararg;
+        expr_ty vararg_type;
         identifier kwarg;
+        expr_ty kwarg_type;
         asdl_seq* defaults;
+        asdl_seq* types;
 
         if (PyObject_HasAttrString(obj, "args")) {
                 int res;
@@ -6633,6 +6680,17 @@ obj2ast_arguments(PyObject* obj, arguments_ty* out, PyArena* arena)
         } else {
                 vararg = NULL;
         }
+        if (PyObject_HasAttrString(obj, "vararg_type")) {
+                int res;
+                tmp = PyObject_GetAttrString(obj, "vararg_type");
+                if (tmp == NULL) goto failed;
+                res = obj2ast_expr(tmp, &vararg_type, arena);
+                if (res != 0) goto failed;
+                Py_XDECREF(tmp);
+                tmp = NULL;
+        } else {
+                vararg_type = NULL;
+        }
         if (PyObject_HasAttrString(obj, "kwarg")) {
                 int res;
                 tmp = PyObject_GetAttrString(obj, "kwarg");
@@ -6644,6 +6702,17 @@ obj2ast_arguments(PyObject* obj, arguments_ty* out, PyArena* arena)
         } else {
                 kwarg = NULL;
         }
+        if (PyObject_HasAttrString(obj, "kwarg_type")) {
+                int res;
+                tmp = PyObject_GetAttrString(obj, "kwarg_type");
+                if (tmp == NULL) goto failed;
+                res = obj2ast_expr(tmp, &kwarg_type, arena);
+                if (res != 0) goto failed;
+                Py_XDECREF(tmp);
+                tmp = NULL;
+        } else {
+                kwarg_type = NULL;
+        }
         if (PyObject_HasAttrString(obj, "defaults")) {
                 int res;
                 Py_ssize_t len;
@@ -6673,7 +6742,33 @@ obj2ast_arguments(PyObject* obj, arguments_ty* out, PyArena* arena)
                 PyErr_SetString(PyExc_TypeError, "required field \"defaults\" missing from arguments");
                 return 1;
         }
-        *out = arguments(args, vararg, kwarg, defaults, arena);
+        if (PyObject_HasAttrString(obj, "types")) {
+                int res;
+                Py_ssize_t len;
+                Py_ssize_t i;
+                tmp = PyObject_GetAttrString(obj, "types");
+                if (tmp == NULL) goto failed;
+                if (!PyList_Check(tmp)) {
+                        PyErr_Format(PyExc_TypeError, "arguments field \"types\" must be a list, not a %.200s", tmp->ob_type->tp_name);
+                        goto failed;
+                }
+                len = PyList_GET_SIZE(tmp);
+                types = asdl_seq_new(len, arena);
+                if (types == NULL) goto failed;
+                for (i = 0; i < len; i++) {
+                        expr_ty value;
+                        res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &value, arena);
+                        if (res != 0) goto failed;
+                        asdl_seq_SET(types, i, value);
+                }
+                Py_XDECREF(tmp);
+                tmp = NULL;
+        } else {
+                PyErr_SetString(PyExc_TypeError, "required field \"types\" missing from arguments");
+                return 1;
+        }
+        *out = arguments(args, vararg, vararg_type, kwarg, kwarg_type,
+                         defaults, types, arena);
         return 0;
 failed:
         Py_XDECREF(tmp);
@@ -6847,6 +6942,8 @@ init_ast(void)
         if (PyDict_SetItemString(d, "Name", (PyObject*)Name_type) < 0) return;
         if (PyDict_SetItemString(d, "List", (PyObject*)List_type) < 0) return;
         if (PyDict_SetItemString(d, "Tuple", (PyObject*)Tuple_type) < 0) return;
+        if (PyDict_SetItemString(d, "Ellipsis", (PyObject*)Ellipsis_type) < 0)
+            return;
         if (PyDict_SetItemString(d, "expr_context",
             (PyObject*)expr_context_type) < 0) return;
         if (PyDict_SetItemString(d, "Load", (PyObject*)Load_type) < 0) return;
@@ -6858,8 +6955,6 @@ init_ast(void)
             return;
         if (PyDict_SetItemString(d, "Param", (PyObject*)Param_type) < 0) return;
         if (PyDict_SetItemString(d, "slice", (PyObject*)slice_type) < 0) return;
-        if (PyDict_SetItemString(d, "Ellipsis", (PyObject*)Ellipsis_type) < 0)
-            return;
         if (PyDict_SetItemString(d, "Slice", (PyObject*)Slice_type) < 0) return;
         if (PyDict_SetItemString(d, "ExtSlice", (PyObject*)ExtSlice_type) < 0)
             return;
diff --git a/Python/ast.c b/Python/ast.c
index 318c0bb27d..49491874c1 100644
--- a/Python/ast.c
+++ b/Python/ast.c
@@ -19,6 +19,7 @@
 struct compiling {
     char *c_encoding; /* source encoding */
     int c_future_unicode; /* __future__ unicode literals flag */
+    int c_future_google_type_annotations;
     PyArena *c_arena; /* arena for allocating memeory */
     const char *c_filename; /* filename */
 };
@@ -234,7 +235,10 @@ PyAST_FromNode(const node *n, PyCompilerFlags *flags, const char *filename,
     } else {
         c.c_encoding = NULL;
     }
-    c.c_future_unicode = flags && flags->cf_flags & CO_FUTURE_UNICODE_LITERALS;
+    c.c_future_unicode =
+        flags && flags->cf_flags & CO_FUTURE_UNICODE_LITERALS;
+    c.c_future_google_type_annotations =
+        flags && flags->cf_flags & CO_FUTURE_GOOGLE_TYPE_ANNOTATIONS;
     c.c_arena = arena;
     c.c_filename = filename;
 
@@ -445,6 +449,9 @@ set_context(struct compiling *c, expr_ty e, expr_context_ty ctx, const node *n)
         case Str_kind:
             expr_name = "literal";
             break;
+        case Ellipsis_kind:
+            expr_name = "Ellipsis";
+            break;
         case Compare_kind:
             expr_name = "comparison";
             break;
@@ -662,29 +669,36 @@ set_name:
 static arguments_ty
 ast_for_arguments(struct compiling *c, const node *n)
 {
-    /* parameters: '(' [varargslist] ')'
-       varargslist: (fpdef ['=' test] ',')* ('*' NAME [',' '**' NAME]
-            | '**' NAME) | fpdef ['=' test] (',' fpdef ['=' test])* [',']
+    /* parameters: '(' [typedargslist] ')'
+       typedargslist: ((tfpdef ['=' test] ',')*
+                     ('*' tdef [',' '**' tdef] | '**' tdef) |
+                     tfpdef ['=' test] (',' tfpdef ['=' test])* [','])
+       varargslist: ((fpdef ['=' test] ',')*
+                     ('*' NAME [',' '**' NAME] | '**' NAME) |
+                     fpdef ['=' test] (',' fpdef ['=' test])* [','])
     */
     int i, j, k, n_args = 0, n_defaults = 0, found_default = 0;
-    asdl_seq *args, *defaults;
+    asdl_seq *args, *defaults, *types;
     identifier vararg = NULL, kwarg = NULL;
+    expr_ty vararg_type = NULL, kwarg_type = NULL;
     node *ch;
 
     if (TYPE(n) == parameters) {
         if (NCH(n) == 2) /* () as argument list */
-            return arguments(NULL, NULL, NULL, NULL, c->c_arena);
+            return arguments(NULL, NULL, NULL, NULL, NULL, NULL, NULL,
+                             c->c_arena);
         n = CHILD(n, 1);
     }
-    REQ(n, varargslist);
+    assert(TYPE(n) == varargslist || TYPE(n) == typedargslist);
 
     /* first count the number of normal args & defaults */
     for (i = 0; i < NCH(n); i++) {
         ch = CHILD(n, i);
-        if (TYPE(ch) == fpdef)
+        if (TYPE(ch) == fpdef || TYPE(ch) == tfpdef) {
             n_args++;
-        if (TYPE(ch) == EQUAL)
+        } else if (TYPE(ch) == EQUAL) {
             n_defaults++;
+        }
     }
     args = (n_args ? asdl_seq_new(n_args, c->c_arena) : NULL);
     if (!args && n_args)
@@ -692,16 +706,24 @@ ast_for_arguments(struct compiling *c, const node *n)
     defaults = (n_defaults ? asdl_seq_new(n_defaults, c->c_arena) : NULL);
     if (!defaults && n_defaults)
         return NULL;
+    types = (n_args ? asdl_seq_new(n_args, c->c_arena) : NULL);
+    if (!types && n_args)
+        return NULL;
 
     /* fpdef: NAME | '(' fplist ')'
        fplist: fpdef (',' fpdef)* [',']
+       tdef: NAME [':' test]
+       tfpdef: NAME [':' test] | '(' fplist ')'
     */
     i = 0;
     j = 0;  /* index for defaults */
     k = 0;  /* index for args */
+
     while (i < NCH(n)) {
         ch = CHILD(n, i);
         switch (TYPE(ch)) {
+            case tdef:
+            case tfpdef:
             case fpdef: {
                 int complex_args = 0, parenthesized = 0;
             handle_fpdef:
@@ -728,10 +750,21 @@ ast_for_arguments(struct compiling *c, const node *n)
                              "non-default argument follows default argument");
                     return NULL;
                 }
+
                 if (NCH(ch) == 3) {
-                    ch = CHILD(ch, 1);
-                    /* def foo((x)): is not complex, special case. */
-                    if (NCH(ch) != 1) {
+                    if (TYPE(CHILD(ch, 0)) != LPAR) {
+                        /* "def foo(arg: type)" */
+                        assert(TYPE(CHILD(ch, 1)) == COLON);
+                        if (!c->c_future_google_type_annotations) {
+                          ast_error(n, "Type annotations not enabled.");
+                          return NULL;
+                        }
+                        // store at the same location as the argument
+                        asdl_seq_SET(types, k, ast_for_expr(c, CHILD(ch, 2)));
+                    } else if (NCH(CHILD(ch, 1)) != 1) {
+                        /* def foo((x)): is not complex, special case. */
+                        assert(TYPE(CHILD(ch, 0)) == LPAR);
+                        ch = CHILD(ch, 1);
                         /* We have complex arguments, setup for unpacking. */
                         if (Py_Py3kWarningFlag && !ast_warn(c, ch,
                             "tuple parameter unpacking has been removed in 3.x"))
@@ -741,6 +774,8 @@ ast_for_arguments(struct compiling *c, const node *n)
                         if (!asdl_seq_GET(args, k-1))
                                 return NULL;
                     } else {
+                        assert(TYPE(CHILD(ch, 0)) == LPAR);
+                        ch = CHILD(ch, 1);
                         /* def foo((x)): setup for checking NAME below. */
                         /* Loop because there can be many parens and tuple
                            unpacking mixed in. */
@@ -773,22 +808,50 @@ ast_for_arguments(struct compiling *c, const node *n)
 
                 break;
             }
-            case STAR:
-                if (!forbidden_check(c, CHILD(n, i+1), STR(CHILD(n, i+1))))
+            case STAR: {
+                node* id = CHILD(n, i+1);
+                if (TYPE(id) == tdef) {
+                    if (NCH(id) == 3) {
+                      if (!c->c_future_google_type_annotations) {
+                          ast_error(n, "Type annotations not enabled.");
+                          return NULL;
+                      }
+                      vararg_type = ast_for_expr(c, CHILD(id, 2));
+                      if (!vararg_type)
+                          return NULL;
+                    }
+                    id = CHILD(id, 0);
+                }
+                if (!forbidden_check(c, id, STR(id)))
                     return NULL;
-                vararg = NEW_IDENTIFIER(CHILD(n, i+1));
+                vararg = NEW_IDENTIFIER(id);
                 if (!vararg)
                     return NULL;
                 i += 3;
                 break;
-            case DOUBLESTAR:
-                if (!forbidden_check(c, CHILD(n, i+1), STR(CHILD(n, i+1))))
+            }
+            case DOUBLESTAR: {
+                node* id = CHILD(n, i+1);
+                if (TYPE(id) == tdef) {
+                    if (NCH(id) == 3) {
+                      if (!c->c_future_google_type_annotations) {
+                          ast_error(n, "Type annotations not enabled.");
+                          return NULL;
+                      }
+                      kwarg_type = ast_for_expr(c, CHILD(id, 2));
+                      if (!kwarg_type)
+                          return NULL;
+                    }
+                    id = CHILD(id, 0);
+                }
+                if (!forbidden_check(c, id, STR(id)))
                     return NULL;
-                kwarg = NEW_IDENTIFIER(CHILD(n, i+1));
+                kwarg = NEW_IDENTIFIER(id);
                 if (!kwarg)
                     return NULL;
                 i += 3;
                 break;
+            }
             default:
                 PyErr_Format(PyExc_SystemError,
                              "unexpected node in varargslist: %d @ %d",
@@ -796,8 +859,8 @@ ast_for_arguments(struct compiling *c, const node *n)
                 return NULL;
         }
     }
-
-    return arguments(args, vararg, kwarg, defaults, c->c_arena);
+    return arguments(args, vararg, vararg_type, kwarg, kwarg_type,
+                     defaults, types, c->c_arena);
 }
 
 static expr_ty
@@ -892,11 +955,12 @@ ast_for_decorators(struct compiling *c, const node *n)
 static stmt_ty
 ast_for_funcdef(struct compiling *c, const node *n, asdl_seq *decorator_seq)
 {
-    /* funcdef: 'def' NAME parameters ':' suite */
+    /* funcdef: 'def' NAME parameters ['->' test] ':' suite */
     identifier name;
     arguments_ty args;
     asdl_seq *body;
     int name_i = 1;
+    expr_ty returns = NULL;
 
     REQ(n, funcdef);
 
@@ -908,11 +972,19 @@ ast_for_funcdef(struct compiling *c, const node *n, asdl_seq *decorator_seq)
     args = ast_for_arguments(c, CHILD(n, name_i + 1));
     if (!args)
         return NULL;
+    if (TYPE(CHILD(n, name_i + 2)) == RARROW) {
+        if (!c->c_future_google_type_annotations) {
+          ast_error(n, "Type annotations not enabled.");
+          return NULL;
+        }
+        returns = ast_for_expr(c, CHILD(n, name_i + 3));
+        name_i += 2;
+    }
     body = ast_for_suite(c, CHILD(n, name_i + 3));
     if (!body)
         return NULL;
 
-    return FunctionDef(name, args, body, decorator_seq, LINENO(n),
+    return FunctionDef(name, args, body, returns, decorator_seq, LINENO(n),
                        n->n_col_offset, c->c_arena);
 }
 
@@ -954,7 +1026,7 @@ ast_for_lambdef(struct compiling *c, const node *n)
     expr_ty expression;
 
     if (NCH(n) == 3) {
-        args = arguments(NULL, NULL, NULL, NULL, c->c_arena);
+        args = arguments(NULL, NULL, NULL, NULL, NULL, NULL, NULL, c->c_arena);
         if (!args)
             return NULL;
         expression = ast_for_expr(c, CHILD(n, 2));
@@ -1409,6 +1481,12 @@ ast_for_atom(struct compiling *c, const node *n)
         PyArena_AddPyObject(c->c_arena, pynum);
         return Num(pynum, LINENO(n), n->n_col_offset, c->c_arena);
     }
+    case ELLIPSIS: /* Ellipsis */
+        if (!c->c_future_google_type_annotations) {
+            ast_error(n, "Type annotations and ellipsis literal not enabled.");
+            return NULL;
+        }
+        return Ellipsis(LINENO(n), n->n_col_offset, c->c_arena);
     case LPAR: /* some parenthesized expressions */
         ch = CHILD(n, 1);
 
@@ -1513,6 +1591,31 @@ ast_for_atom(struct compiling *c, const node *n)
     }
 }
 
+/*
+A pattern for detecting a literal Ellipsis.
+
+This goes back to the fact that even though we have a Google-internal backport
+of "...", Python 2 already allows "..." in one specific context: As an array
+index. E.g.  "matrix[...]".
+
+So we want to allow "..." everywhere (i.e., as a literal) if the user did "from
+__future__ import google_type_annotations", but only allow it as an array index
+otherwise.
+
+All the "literal Ellipsis" cases are handled in ast_for_expr, which throws an
+error if google_type_annotations wasn't imported. So since the call to
+ast_for_expr in ast_for_slice below might throw an error upon encountering
+Ellipsis, we have to detect Ellipsis, and handle it ourselves, before that call.
+
+The parse tree generated by having an Ellipsis as an array index is quite deep,
+but thankfully, unique. Also, it doesn't branch.  So we just match the current
+parse tree against the canonical pattern of an Ellipsis parse tree.  And if we
+find an Ellipsis parse tree, we return an Ellipsis in the AST.
+*/
+static const int ellipsis_pattern[] = {
+  and_test, not_test, comparison, expr, xor_expr, and_expr, shift_expr,
+  arith_expr, term, factor, power, atom, ELLIPSIS, -1};
+
 static slice_ty
 ast_for_slice(struct compiling *c, const node *n)
 {
@@ -1522,16 +1625,33 @@ ast_for_slice(struct compiling *c, const node *n)
     REQ(n, subscript);
 
     /*
-       subscript: '.' '.' '.' | test | [test] ':' [test] [sliceop]
+       subscript: test | [test] ':' [test] [sliceop]
        sliceop: ':' [test]
     */
     ch = CHILD(n, 0);
-    if (TYPE(ch) == DOT)
-        return Ellipsis(c->c_arena);
 
     if (NCH(n) == 1 && TYPE(ch) == test) {
         /* 'step' variable hold no significance in terms of being used over
            other vars */
+        node *s = ch;
+        int i = 0;
+        s = CHILD(s, 0);
+        /* Determine whether this expression is an Ellipsis literal.
+           This depends on the expression grammar. The alternative would be
+           to catch the error produced by ast_for_expr and discard it if it's
+           complaining about Ellipsis not being enabled. */
+        while (NCH(s) == 1 && TYPE(CHILD(s, 0)) == ellipsis_pattern[i]) {
+            s = CHILD(s, 0);
+            i++;
+        }
+        if (ellipsis_pattern[i] == -1) {
+            /* Ellipsis as an index is a standard Python 2 feature, and is
+             * allowed even without __future__.google_type_annotations. */
+            step = Ellipsis(LINENO(n), ch->n_col_offset, c->c_arena);
+            if (!step)
+                return NULL;
+            return Index(step, c->c_arena);
+        }
         step = ast_for_expr(c, ch);
         if (!step)
             return NULL;
@@ -1652,7 +1772,7 @@ ast_for_trailer(struct compiling *c, const node *n, expr_ty left_expr)
 {
     /* trailer: '(' [arglist] ')' | '[' subscriptlist ']' | '.' NAME
        subscriptlist: subscript (',' subscript)* [',']
-       subscript: '.' '.' '.' | test | [test] ':' [test] [sliceop]
+       subscript: test | [test] ':' [test] [sliceop]
      */
     REQ(n, trailer);
     if (TYPE(CHILD(n, 0)) == LPAR) {
@@ -2579,6 +2699,10 @@ ast_for_import_stmt(struct compiling *c, const node *n)
                     return NULL;
                 idx++;
                 break;
+            } else if (TYPE(CHILD(n, idx)) == ELLIPSIS) {
+                /* three consecutive dots are tokenized as one ELLIPSIS */
+                ndots += 3;
+                continue;
             } else if (TYPE(CHILD(n, idx)) != DOT) {
                 break;
             }
diff --git a/Python/ceval.c b/Python/ceval.c
index 2088a271d8..706c8a6f7f 100644
--- a/Python/ceval.c
+++ b/Python/ceval.c
@@ -3065,17 +3065,28 @@ PyEval_EvalFrameEx(PyFrameObject *f, int throwflag)
             v = POP(); /* code object */
             x = PyFunction_New(v, f->f_globals);
             Py_DECREF(v);
-            /* XXX Maybe this should be a separate opcode? */
+
+            /* Type annotations */
             if (x != NULL && oparg > 0) {
-                v = PyTuple_New(oparg);
+                int i, num_types = (oparg >> 16) & 0xffff;
+                for (i = 0; i < num_types; i++) {
+                    w = POP();
+                }
+            }
+
+            /* XXX Maybe this should be a separate opcode? */
+            /* "oparg > 0" because we want sane behavior with oparg=-1 */
+            if (x != NULL && (oparg & 0xffff) && oparg > 0) {
+                int i = oparg & 0xffff;
+                v = PyTuple_New(i);
                 if (v == NULL) {
                     Py_DECREF(x);
                     x = NULL;
                     break;
                 }
-                while (--oparg >= 0) {
+                while (--i >= 0) {
                     w = POP();
-                    PyTuple_SET_ITEM(v, oparg, w);
+                    PyTuple_SET_ITEM(v, i, w);
                 }
                 err = PyFunction_SetDefaults(x, v);
                 Py_DECREF(v);
@@ -3097,16 +3108,18 @@ PyEval_EvalFrameEx(PyFrameObject *f, int throwflag)
                 }
                 Py_DECREF(v);
             }
-            if (x != NULL && oparg > 0) {
-                v = PyTuple_New(oparg);
+            /* "oparg > 0" because we want sane behavior with oparg=-1 */
+            if (x != NULL && oparg > 0 && (oparg & 0xffff)) {
+                int i = oparg & 0xffff;
+                v = PyTuple_New(i);
                 if (v == NULL) {
                     Py_DECREF(x);
                     x = NULL;
                     break;
                 }
-                while (--oparg >= 0) {
+                while (--i >= 0) {
                     w = POP();
-                    PyTuple_SET_ITEM(v, oparg, w);
+                    PyTuple_SET_ITEM(v, i, w);
                 }
                 if (PyFunction_SetDefaults(x, v) != 0) {
                     /* Can't happen unless
@@ -3115,6 +3128,12 @@ PyEval_EvalFrameEx(PyFrameObject *f, int throwflag)
                 }
                 Py_DECREF(v);
             }
+            if (x != NULL && oparg > 0) {
+                int i, num_types = (oparg >> 16) & 0xffff;
+                for (i = 0; i < num_types; i++) {
+                    w = POP();
+                }
+            }
             PUSH(x);
             break;
         }
diff --git a/Python/compile.c b/Python/compile.c
index 4fe69e12bf..bfa1466f78 100644
--- a/Python/compile.c
+++ b/Python/compile.c
@@ -893,7 +893,7 @@ opcode_stack_effect(int opcode, int oparg)
             return -NARGS(oparg)-2;
 #undef NARGS
         case MAKE_FUNCTION:
-            return -oparg;
+            return - (oparg & 0xffff) - ((oparg >> 16) & 0xffff);
         case BUILD_SLICE:
             if (oparg == 3)
                 return -2;
@@ -901,7 +901,7 @@ opcode_stack_effect(int opcode, int oparg)
                 return -1;
 
         case MAKE_CLOSURE:
-            return -oparg-1;
+            return - (oparg & 0xffff) - ((oparg >> 16) & 0xffff) - 1;
         case LOAD_CLOSURE:
             return 1;
         case LOAD_DEREF:
@@ -1266,12 +1266,16 @@ compiler_lookup_arg(PyObject *dict, PyObject *name)
 }
 
 static int
-compiler_make_closure(struct compiler *c, PyCodeObject *co, int args)
+compiler_make_closure(struct compiler *c, PyCodeObject *co, int args, int typed_args)
 {
+    if (args < 0 || typed_args < 0) {
+        Py_FatalError("compiler_make_closure(): negative args");
+    }
+
     int i, free = PyCode_GetNumFree(co);
     if (free == 0) {
         ADDOP_O(c, LOAD_CONST, (PyObject*)co, consts);
-        ADDOP_I(c, MAKE_FUNCTION, args);
+        ADDOP_I(c, MAKE_FUNCTION, (args & 0xffff) | (typed_args & 0xffff) << 16);
         return 1;
     }
     for (i = 0; i < free; ++i) {
@@ -1306,7 +1310,7 @@ compiler_make_closure(struct compiler *c, PyCodeObject *co, int args)
     }
     ADDOP_I(c, BUILD_TUPLE, free);
     ADDOP_O(c, LOAD_CONST, (PyObject*)co, consts);
-    ADDOP_I(c, MAKE_CLOSURE, args);
+    ADDOP_I(c, MAKE_CLOSURE, (args & 0xffff) | (typed_args & 0xffff) << 16);
     return 1;
 }
 
@@ -1348,6 +1352,57 @@ compiler_arguments(struct compiler *c, arguments_ty args)
     return 1;
 }
 
+static int visit_arg_types(struct compiler *c,
+                           arguments_ty args,
+                           PyObject* args_with_type)
+{
+    int i;
+    for (i = 0; i < asdl_seq_LEN(args->types); i++) {
+        expr_ty elt = (expr_ty)asdl_seq_GET(args->types, i);
+        if (elt) {
+            if (!compiler_visit_expr(c, elt))
+                return 0;
+            expr_ty arg = (expr_ty)asdl_seq_GET(args->args, i);
+            if (arg->kind != Name_kind) {
+                PyErr_SetString(PyExc_SystemError, "Invalid parameter type");
+                return 0;
+            }
+            identifier name = arg->v.Name.id;
+            if (PyList_Append(args_with_type, name) < 0)
+                return 0;
+        }
+    }
+    if (args->vararg_type) {
+        if (!compiler_visit_expr(c, args->vararg_type))
+            return 0;
+        if (PyList_Append(args_with_type, args->vararg) < 0)
+            return 0;
+    }
+    if (args->kwarg_type) {
+        if (!compiler_visit_expr(c, args->kwarg_type))
+            return 0;
+        if (PyList_Append(args_with_type, args->kwarg) < 0)
+            return 0;
+    }
+    return 1;
+}
+
+static PyObject*
+_list_to_tuple(PyObject* list)
+{
+    Py_ssize_t size = PyList_GET_SIZE(list);
+    PyObject *tuple = PyTuple_New(size);
+    if (!tuple)
+        return NULL;
+    Py_ssize_t i;
+    for (i = 0; i < size; i++) {
+        PyObject* elt = PyList_GET_ITEM(list, i);
+        Py_INCREF(elt);
+        PyTuple_SET_ITEM(tuple, i, elt);
+    }
+    return tuple;
+}
+
 static int
 compiler_function(struct compiler *c, stmt_ty s)
 {
@@ -1357,13 +1412,43 @@ compiler_function(struct compiler *c, stmt_ty s)
     asdl_seq* decos = s->v.FunctionDef.decorator_list;
     stmt_ty st;
     int i, n, docstring;
+    int type_count = 0;
 
     assert(s->kind == FunctionDef_kind);
 
     if (!compiler_decorators(c, decos))
         return 0;
+
     if (args->defaults)
         VISIT_SEQ(c, expr, args->defaults);
+
+    if (Py_TypeAnnotationFlag) {
+      PyObject* args_with_types = PyList_New(0);
+      if (!args_with_types)
+          return 0;
+      if (args->types || args->vararg_type || args->kwarg_type) {
+          if (!visit_arg_types(c, args, args_with_types))
+              return 0;
+      }
+      if (s->v.FunctionDef.returns) {
+          compiler_visit_expr(c, s->v.FunctionDef.returns);
+          if (PyList_Append(args_with_types,
+                            PyString_InternFromString("return")) < 0) {
+            return 0;
+          }
+      }
+      if (PyList_GET_SIZE(args_with_types)) {
+          /* convert names to a tuple and place on stack */
+          PyObject *tuple = _list_to_tuple(args_with_types);
+          if (!tuple)
+              return 0;
+          ADDOP_O(c, LOAD_CONST, tuple, consts);
+          /* Count everything we pushed, including the name tuple. */
+          type_count = PyList_GET_SIZE(args_with_types) + 1;
+      }
+      Py_DECREF(args_with_types);
+    }
+
     if (!compiler_enter_scope(c, s->v.FunctionDef.name, (void *)s,
                               s->lineno))
         return 0;
@@ -1392,7 +1477,7 @@ compiler_function(struct compiler *c, stmt_ty s)
     if (co == NULL)
         return 0;
 
-    compiler_make_closure(c, co, asdl_seq_LEN(args->defaults));
+    compiler_make_closure(c, co, asdl_seq_LEN(args->defaults), type_count);
     Py_DECREF(co);
 
     for (i = 0; i < asdl_seq_LEN(decos); i++) {
@@ -1453,7 +1538,7 @@ compiler_class(struct compiler *c, stmt_ty s)
     if (co == NULL)
         return 0;
 
-    compiler_make_closure(c, co, 0);
+    compiler_make_closure(c, co, 0, 0);
     Py_DECREF(co);
 
     ADDOP_I(c, CALL_FUNCTION, 0);
@@ -1529,7 +1614,7 @@ compiler_lambda(struct compiler *c, expr_ty e)
     if (co == NULL)
         return 0;
 
-    compiler_make_closure(c, co, asdl_seq_LEN(args->defaults));
+    compiler_make_closure(c, co, asdl_seq_LEN(args->defaults), 0);
     Py_DECREF(co);
 
     return 1;
@@ -2328,6 +2413,7 @@ compiler_nameop(struct compiler *c, identifier name, expr_context_ty ctx)
     op = 0;
     optype = OP_NAME;
     scope = PyST_GetScope(c->u->u_ste, mangled);
+
     switch (scope) {
     case FREE:
         dict = c->u->u_freevars;
@@ -2490,6 +2576,13 @@ compiler_tuple(struct compiler *c, expr_ty e)
     return 1;
 }
 
+static int
+compiler_ellipsis(struct compiler *c, expr_ty e)
+{
+    ADDOP_O(c, LOAD_CONST, Py_Ellipsis, consts);
+    return 1;
+}
+
 static int
 compiler_compare(struct compiler *c, expr_ty e)
 {
@@ -2781,7 +2874,7 @@ compiler_comprehension(struct compiler *c, expr_ty e, int type, identifier name,
     if (co == NULL)
         goto error;
 
-    if (!compiler_make_closure(c, co, 0))
+    if (!compiler_make_closure(c, co, 0, 0))
         goto error;
     Py_DECREF(co);
 
@@ -3093,6 +3186,8 @@ compiler_visit_expr(struct compiler *c, expr_ty e)
         return compiler_list(c, e);
     case Tuple_kind:
         return compiler_tuple(c, e);
+    case Ellipsis_kind:
+        return compiler_ellipsis(c, e);
     }
     return 1;
 }
@@ -3322,9 +3417,6 @@ compiler_visit_nested_slice(struct compiler *c, slice_ty s,
                             expr_context_ty ctx)
 {
     switch (s->kind) {
-    case Ellipsis_kind:
-        ADDOP_O(c, LOAD_CONST, Py_Ellipsis, consts);
-        break;
     case Slice_kind:
         return compiler_slice(c, s, ctx);
     case Index_kind:
@@ -3350,12 +3442,6 @@ compiler_visit_slice(struct compiler *c, slice_ty s, expr_context_ty ctx)
             VISIT(c, expr, s->v.Index.value);
         }
         break;
-    case Ellipsis_kind:
-        kindname = "ellipsis";
-        if (ctx != AugStore) {
-            ADDOP_O(c, LOAD_CONST, Py_Ellipsis, consts);
-        }
-        break;
     case Slice_kind:
         kindname = "slice";
         if (!s->v.Slice.step)
diff --git a/Python/future.c b/Python/future.c
index 0e68845981..4a7365d479 100644
--- a/Python/future.c
+++ b/Python/future.c
@@ -39,6 +39,8 @@ future_check_features(PyFutureFeatures *ff, stmt_ty s, const char *filename)
             ff->ff_features |= CO_FUTURE_PRINT_FUNCTION;
         } else if (strcmp(feature, FUTURE_UNICODE_LITERALS) == 0) {
             ff->ff_features |= CO_FUTURE_UNICODE_LITERALS;
+        } else if (strcmp(feature, FUTURE_GOOGLE_TYPE_ANNOTATIONS) == 0) {
+            ff->ff_features |= CO_FUTURE_GOOGLE_TYPE_ANNOTATIONS;
         } else if (strcmp(feature, "braces") == 0) {
             PyErr_SetString(PyExc_SyntaxError,
                             "not a chance");
diff --git a/Python/graminit.c b/Python/graminit.c
index 5db6bb5e53..724940a951 100644
--- a/Python/graminit.c
+++ b/Python/graminit.c
@@ -113,28 +113,37 @@ static arc arcs_6_1[1] = {
 static arc arcs_6_2[1] = {
     {22, 3},
 };
-static arc arcs_6_3[1] = {
+static arc arcs_6_3[2] = {
     {23, 4},
+    {25, 5},
 };
 static arc arcs_6_4[1] = {
-    {24, 5},
+    {24, 6},
 };
 static arc arcs_6_5[1] = {
-    {0, 5},
+    {26, 7},
+};
+static arc arcs_6_6[1] = {
+    {25, 5},
 };
-static state states_6[6] = {
+static arc arcs_6_7[1] = {
+    {0, 7},
+};
+static state states_6[8] = {
     {1, arcs_6_0},
     {1, arcs_6_1},
     {1, arcs_6_2},
-    {1, arcs_6_3},
+    {2, arcs_6_3},
     {1, arcs_6_4},
     {1, arcs_6_5},
+    {1, arcs_6_6},
+    {1, arcs_6_7},
 };
 static arc arcs_7_0[1] = {
     {13, 1},
 };
 static arc arcs_7_1[2] = {
-    {25, 2},
+    {27, 2},
     {15, 3},
 };
 static arc arcs_7_2[1] = {
@@ -150,43 +159,43 @@ static state states_7[4] = {
     {1, arcs_7_3},
 };
 static arc arcs_8_0[3] = {
-    {26, 1},
-    {30, 2},
-    {31, 3},
+    {28, 1},
+    {31, 2},
+    {33, 3},
 };
 static arc arcs_8_1[3] = {
-    {27, 4},
-    {29, 5},
+    {29, 4},
+    {30, 5},
     {0, 1},
 };
 static arc arcs_8_2[1] = {
-    {21, 6},
+    {32, 6},
 };
 static arc arcs_8_3[1] = {
-    {21, 7},
+    {32, 7},
 };
 static arc arcs_8_4[1] = {
-    {28, 8},
+    {24, 8},
 };
 static arc arcs_8_5[4] = {
-    {26, 1},
-    {30, 2},
-    {31, 3},
+    {28, 1},
+    {31, 2},
+    {33, 3},
     {0, 5},
 };
 static arc arcs_8_6[2] = {
-    {29, 9},
+    {30, 9},
     {0, 6},
 };
 static arc arcs_8_7[1] = {
     {0, 7},
 };
 static arc arcs_8_8[2] = {
-    {29, 5},
+    {30, 5},
     {0, 8},
 };
 static arc arcs_8_9[1] = {
-    {31, 3},
+    {33, 3},
 };
 static state states_8[10] = {
     {3, arcs_8_0},
@@ -200,62 +209,101 @@ static state states_8[10] = {
     {2, arcs_8_8},
     {1, arcs_8_9},
 };
-static arc arcs_9_0[2] = {
-    {21, 1},
-    {13, 2},
+static arc arcs_9_0[3] = {
+    {35, 1},
+    {31, 2},
+    {33, 3},
 };
-static arc arcs_9_1[1] = {
+static arc arcs_9_1[3] = {
+    {29, 4},
+    {30, 5},
     {0, 1},
 };
 static arc arcs_9_2[1] = {
-    {32, 3},
+    {21, 6},
 };
 static arc arcs_9_3[1] = {
-    {15, 1},
+    {21, 7},
+};
+static arc arcs_9_4[1] = {
+    {24, 8},
+};
+static arc arcs_9_5[4] = {
+    {35, 1},
+    {31, 2},
+    {33, 3},
+    {0, 5},
+};
+static arc arcs_9_6[2] = {
+    {30, 9},
+    {0, 6},
+};
+static arc arcs_9_7[1] = {
+    {0, 7},
+};
+static arc arcs_9_8[2] = {
+    {30, 5},
+    {0, 8},
+};
+static arc arcs_9_9[1] = {
+    {33, 3},
 };
-static state states_9[4] = {
-    {2, arcs_9_0},
-    {1, arcs_9_1},
+static state states_9[10] = {
+    {3, arcs_9_0},
+    {3, arcs_9_1},
     {1, arcs_9_2},
     {1, arcs_9_3},
+    {1, arcs_9_4},
+    {4, arcs_9_5},
+    {2, arcs_9_6},
+    {1, arcs_9_7},
+    {2, arcs_9_8},
+    {1, arcs_9_9},
+};
+static arc arcs_10_0[2] = {
+    {21, 1},
+    {13, 2},
 };
-static arc arcs_10_0[1] = {
-    {26, 1},
-};
-static arc arcs_10_1[2] = {
-    {29, 2},
+static arc arcs_10_1[1] = {
     {0, 1},
 };
-static arc arcs_10_2[2] = {
-    {26, 1},
-    {0, 2},
+static arc arcs_10_2[1] = {
+    {36, 3},
 };
-static state states_10[3] = {
-    {1, arcs_10_0},
-    {2, arcs_10_1},
-    {2, arcs_10_2},
+static arc arcs_10_3[1] = {
+    {15, 1},
 };
-static arc arcs_11_0[2] = {
-    {3, 1},
-    {4, 1},
+static state states_10[4] = {
+    {2, arcs_10_0},
+    {1, arcs_10_1},
+    {1, arcs_10_2},
+    {1, arcs_10_3},
+};
+static arc arcs_11_0[1] = {
+    {35, 1},
 };
-static arc arcs_11_1[1] = {
+static arc arcs_11_1[2] = {
+    {30, 2},
     {0, 1},
 };
-static state states_11[2] = {
-    {2, arcs_11_0},
-    {1, arcs_11_1},
+static arc arcs_11_2[2] = {
+    {35, 1},
+    {0, 2},
+};
+static state states_11[3] = {
+    {1, arcs_11_0},
+    {2, arcs_11_1},
+    {2, arcs_11_2},
 };
 static arc arcs_12_0[1] = {
-    {33, 1},
+    {21, 1},
 };
 static arc arcs_12_1[2] = {
-    {34, 2},
-    {2, 3},
+    {25, 2},
+    {0, 1},
 };
-static arc arcs_12_2[2] = {
-    {33, 1},
-    {2, 3},
+static arc arcs_12_2[1] = {
+    {24, 3},
 };
 static arc arcs_12_3[1] = {
     {0, 3},
@@ -263,63 +311,118 @@ static arc arcs_12_3[1] = {
 static state states_12[4] = {
     {1, arcs_12_0},
     {2, arcs_12_1},
-    {2, arcs_12_2},
+    {1, arcs_12_2},
     {1, arcs_12_3},
 };
-static arc arcs_13_0[9] = {
-    {35, 1},
-    {36, 1},
+static arc arcs_13_0[2] = {
+    {21, 1},
+    {13, 2},
+};
+static arc arcs_13_1[2] = {
+    {25, 3},
+    {0, 1},
+};
+static arc arcs_13_2[1] = {
+    {36, 4},
+};
+static arc arcs_13_3[1] = {
+    {24, 5},
+};
+static arc arcs_13_4[1] = {
+    {15, 5},
+};
+static arc arcs_13_5[1] = {
+    {0, 5},
+};
+static state states_13[6] = {
+    {2, arcs_13_0},
+    {2, arcs_13_1},
+    {1, arcs_13_2},
+    {1, arcs_13_3},
+    {1, arcs_13_4},
+    {1, arcs_13_5},
+};
+static arc arcs_14_0[2] = {
+    {3, 1},
+    {4, 1},
+};
+static arc arcs_14_1[1] = {
+    {0, 1},
+};
+static state states_14[2] = {
+    {2, arcs_14_0},
+    {1, arcs_14_1},
+};
+static arc arcs_15_0[1] = {
+    {37, 1},
+};
+static arc arcs_15_1[2] = {
+    {38, 2},
+    {2, 3},
+};
+static arc arcs_15_2[2] = {
     {37, 1},
-    {38, 1},
+    {2, 3},
+};
+static arc arcs_15_3[1] = {
+    {0, 3},
+};
+static state states_15[4] = {
+    {1, arcs_15_0},
+    {2, arcs_15_1},
+    {2, arcs_15_2},
+    {1, arcs_15_3},
+};
+static arc arcs_16_0[9] = {
     {39, 1},
     {40, 1},
     {41, 1},
     {42, 1},
     {43, 1},
+    {44, 1},
+    {45, 1},
+    {46, 1},
+    {47, 1},
 };
-static arc arcs_13_1[1] = {
+static arc arcs_16_1[1] = {
     {0, 1},
 };
-static state states_13[2] = {
-    {9, arcs_13_0},
-    {1, arcs_13_1},
+static state states_16[2] = {
+    {9, arcs_16_0},
+    {1, arcs_16_1},
 };
-static arc arcs_14_0[1] = {
+static arc arcs_17_0[1] = {
     {9, 1},
 };
-static arc arcs_14_1[3] = {
-    {44, 2},
-    {27, 3},
+static arc arcs_17_1[3] = {
+    {48, 2},
+    {29, 3},
     {0, 1},
 };
-static arc arcs_14_2[2] = {
-    {45, 4},
+static arc arcs_17_2[2] = {
+    {49, 4},
     {9, 4},
 };
-static arc arcs_14_3[2] = {
-    {45, 5},
+static arc arcs_17_3[2] = {
+    {49, 5},
     {9, 5},
 };
-static arc arcs_14_4[1] = {
+static arc arcs_17_4[1] = {
     {0, 4},
 };
-static arc arcs_14_5[2] = {
-    {27, 3},
+static arc arcs_17_5[2] = {
+    {29, 3},
     {0, 5},
 };
-static state states_14[6] = {
-    {1, arcs_14_0},
-    {3, arcs_14_1},
-    {2, arcs_14_2},
-    {2, arcs_14_3},
-    {1, arcs_14_4},
-    {2, arcs_14_5},
+static state states_17[6] = {
+    {1, arcs_17_0},
+    {3, arcs_17_1},
+    {2, arcs_17_2},
+    {2, arcs_17_3},
+    {1, arcs_17_4},
+    {2, arcs_17_5},
 };
-static arc arcs_15_0[12] = {
-    {46, 1},
-    {47, 1},
-    {48, 1},
-    {49, 1},
+static arc arcs_18_0[12] = {
     {50, 1},
     {51, 1},
     {52, 1},
@@ -328,109 +431,79 @@ static arc arcs_15_0[12] = {
     {55, 1},
     {56, 1},
     {57, 1},
+    {58, 1},
+    {59, 1},
+    {60, 1},
+    {61, 1},
 };
-static arc arcs_15_1[1] = {
+static arc arcs_18_1[1] = {
     {0, 1},
 };
-static state states_15[2] = {
-    {12, arcs_15_0},
-    {1, arcs_15_1},
+static state states_18[2] = {
+    {12, arcs_18_0},
+    {1, arcs_18_1},
 };
-static arc arcs_16_0[1] = {
-    {58, 1},
+static arc arcs_19_0[1] = {
+    {62, 1},
 };
-static arc arcs_16_1[3] = {
-    {28, 2},
-    {59, 3},
+static arc arcs_19_1[3] = {
+    {24, 2},
+    {63, 3},
     {0, 1},
 };
-static arc arcs_16_2[2] = {
-    {29, 4},
+static arc arcs_19_2[2] = {
+    {30, 4},
     {0, 2},
 };
-static arc arcs_16_3[1] = {
-    {28, 5},
+static arc arcs_19_3[1] = {
+    {24, 5},
 };
-static arc arcs_16_4[2] = {
-    {28, 2},
+static arc arcs_19_4[2] = {
+    {24, 2},
     {0, 4},
 };
-static arc arcs_16_5[2] = {
-    {29, 6},
+static arc arcs_19_5[2] = {
+    {30, 6},
     {0, 5},
 };
-static arc arcs_16_6[1] = {
-    {28, 7},
+static arc arcs_19_6[1] = {
+    {24, 7},
 };
-static arc arcs_16_7[2] = {
-    {29, 8},
+static arc arcs_19_7[2] = {
+    {30, 8},
     {0, 7},
 };
-static arc arcs_16_8[2] = {
-    {28, 7},
+static arc arcs_19_8[2] = {
+    {24, 7},
     {0, 8},
 };
-static state states_16[9] = {
-    {1, arcs_16_0},
-    {3, arcs_16_1},
-    {2, arcs_16_2},
-    {1, arcs_16_3},
-    {2, arcs_16_4},
-    {2, arcs_16_5},
-    {1, arcs_16_6},
-    {2, arcs_16_7},
-    {2, arcs_16_8},
-};
-static arc arcs_17_0[1] = {
-    {60, 1},
-};
-static arc arcs_17_1[1] = {
-    {61, 2},
-};
-static arc arcs_17_2[1] = {
-    {0, 2},
-};
-static state states_17[3] = {
-    {1, arcs_17_0},
-    {1, arcs_17_1},
-    {1, arcs_17_2},
-};
-static arc arcs_18_0[1] = {
-    {62, 1},
-};
-static arc arcs_18_1[1] = {
-    {0, 1},
-};
-static state states_18[2] = {
-    {1, arcs_18_0},
-    {1, arcs_18_1},
-};
-static arc arcs_19_0[5] = {
-    {63, 1},
-    {64, 1},
-    {65, 1},
-    {66, 1},
-    {67, 1},
-};
-static arc arcs_19_1[1] = {
-    {0, 1},
-};
-static state states_19[2] = {
-    {5, arcs_19_0},
-    {1, arcs_19_1},
+static state states_19[9] = {
+    {1, arcs_19_0},
+    {3, arcs_19_1},
+    {2, arcs_19_2},
+    {1, arcs_19_3},
+    {2, arcs_19_4},
+    {2, arcs_19_5},
+    {1, arcs_19_6},
+    {2, arcs_19_7},
+    {2, arcs_19_8},
 };
 static arc arcs_20_0[1] = {
-    {68, 1},
+    {64, 1},
 };
 static arc arcs_20_1[1] = {
-    {0, 1},
+    {65, 2},
+};
+static arc arcs_20_2[1] = {
+    {0, 2},
 };
-static state states_20[2] = {
+static state states_20[3] = {
     {1, arcs_20_0},
     {1, arcs_20_1},
+    {1, arcs_20_2},
 };
 static arc arcs_21_0[1] = {
-    {69, 1},
+    {66, 1},
 };
 static arc arcs_21_1[1] = {
     {0, 1},
@@ -439,23 +512,22 @@ static state states_21[2] = {
     {1, arcs_21_0},
     {1, arcs_21_1},
 };
-static arc arcs_22_0[1] = {
+static arc arcs_22_0[5] = {
+    {67, 1},
+    {68, 1},
+    {69, 1},
     {70, 1},
+    {71, 1},
 };
-static arc arcs_22_1[2] = {
-    {9, 2},
+static arc arcs_22_1[1] = {
     {0, 1},
 };
-static arc arcs_22_2[1] = {
-    {0, 2},
-};
-static state states_22[3] = {
-    {1, arcs_22_0},
-    {2, arcs_22_1},
-    {1, arcs_22_2},
+static state states_22[2] = {
+    {5, arcs_22_0},
+    {1, arcs_22_1},
 };
 static arc arcs_23_0[1] = {
-    {45, 1},
+    {72, 1},
 };
 static arc arcs_23_1[1] = {
     {0, 1},
@@ -465,655 +537,655 @@ static state states_23[2] = {
     {1, arcs_23_1},
 };
 static arc arcs_24_0[1] = {
-    {71, 1},
+    {73, 1},
 };
-static arc arcs_24_1[2] = {
-    {28, 2},
+static arc arcs_24_1[1] = {
     {0, 1},
 };
-static arc arcs_24_2[2] = {
-    {29, 3},
-    {0, 2},
-};
-static arc arcs_24_3[1] = {
-    {28, 4},
-};
-static arc arcs_24_4[2] = {
-    {29, 5},
-    {0, 4},
-};
-static arc arcs_24_5[1] = {
-    {28, 6},
-};
-static arc arcs_24_6[1] = {
-    {0, 6},
-};
-static state states_24[7] = {
+static state states_24[2] = {
     {1, arcs_24_0},
-    {2, arcs_24_1},
-    {2, arcs_24_2},
-    {1, arcs_24_3},
-    {2, arcs_24_4},
-    {1, arcs_24_5},
-    {1, arcs_24_6},
-};
-static arc arcs_25_0[2] = {
-    {72, 1},
-    {73, 1},
+    {1, arcs_24_1},
 };
-static arc arcs_25_1[1] = {
+static arc arcs_25_0[1] = {
+    {74, 1},
+};
+static arc arcs_25_1[2] = {
+    {9, 2},
     {0, 1},
 };
-static state states_25[2] = {
-    {2, arcs_25_0},
-    {1, arcs_25_1},
+static arc arcs_25_2[1] = {
+    {0, 2},
+};
+static state states_25[3] = {
+    {1, arcs_25_0},
+    {2, arcs_25_1},
+    {1, arcs_25_2},
 };
 static arc arcs_26_0[1] = {
-    {74, 1},
+    {49, 1},
 };
 static arc arcs_26_1[1] = {
-    {75, 2},
-};
-static arc arcs_26_2[1] = {
-    {0, 2},
+    {0, 1},
 };
-static state states_26[3] = {
+static state states_26[2] = {
     {1, arcs_26_0},
     {1, arcs_26_1},
-    {1, arcs_26_2},
 };
 static arc arcs_27_0[1] = {
-    {76, 1},
+    {75, 1},
 };
 static arc arcs_27_1[2] = {
-    {77, 2},
-    {12, 3},
+    {24, 2},
+    {0, 1},
 };
-static arc arcs_27_2[3] = {
-    {77, 2},
-    {12, 3},
-    {74, 4},
+static arc arcs_27_2[2] = {
+    {30, 3},
+    {0, 2},
 };
 static arc arcs_27_3[1] = {
-    {74, 4},
+    {24, 4},
 };
-static arc arcs_27_4[3] = {
+static arc arcs_27_4[2] = {
     {30, 5},
-    {13, 6},
-    {78, 5},
+    {0, 4},
 };
 static arc arcs_27_5[1] = {
-    {0, 5},
+    {24, 6},
 };
 static arc arcs_27_6[1] = {
-    {78, 7},
-};
-static arc arcs_27_7[1] = {
-    {15, 5},
+    {0, 6},
 };
-static state states_27[8] = {
+static state states_27[7] = {
     {1, arcs_27_0},
     {2, arcs_27_1},
-    {3, arcs_27_2},
+    {2, arcs_27_2},
     {1, arcs_27_3},
-    {3, arcs_27_4},
+    {2, arcs_27_4},
     {1, arcs_27_5},
     {1, arcs_27_6},
-    {1, arcs_27_7},
 };
-static arc arcs_28_0[1] = {
-    {21, 1},
+static arc arcs_28_0[2] = {
+    {76, 1},
+    {77, 1},
 };
-static arc arcs_28_1[2] = {
-    {80, 2},
+static arc arcs_28_1[1] = {
     {0, 1},
 };
-static arc arcs_28_2[1] = {
-    {21, 3},
-};
-static arc arcs_28_3[1] = {
-    {0, 3},
-};
-static state states_28[4] = {
-    {1, arcs_28_0},
-    {2, arcs_28_1},
-    {1, arcs_28_2},
-    {1, arcs_28_3},
+static state states_28[2] = {
+    {2, arcs_28_0},
+    {1, arcs_28_1},
 };
 static arc arcs_29_0[1] = {
-    {12, 1},
+    {78, 1},
 };
-static arc arcs_29_1[2] = {
-    {80, 2},
-    {0, 1},
+static arc arcs_29_1[1] = {
+    {79, 2},
 };
 static arc arcs_29_2[1] = {
-    {21, 3},
-};
-static arc arcs_29_3[1] = {
-    {0, 3},
+    {0, 2},
 };
-static state states_29[4] = {
+static state states_29[3] = {
     {1, arcs_29_0},
-    {2, arcs_29_1},
+    {1, arcs_29_1},
     {1, arcs_29_2},
-    {1, arcs_29_3},
 };
 static arc arcs_30_0[1] = {
-    {79, 1},
+    {80, 1},
 };
-static arc arcs_30_1[2] = {
-    {29, 2},
-    {0, 1},
+static arc arcs_30_1[3] = {
+    {81, 2},
+    {82, 2},
+    {12, 3},
 };
-static arc arcs_30_2[2] = {
-    {79, 1},
-    {0, 2},
+static arc arcs_30_2[4] = {
+    {81, 2},
+    {82, 2},
+    {12, 3},
+    {78, 4},
+};
+static arc arcs_30_3[1] = {
+    {78, 4},
+};
+static arc arcs_30_4[3] = {
+    {31, 5},
+    {13, 6},
+    {83, 5},
+};
+static arc arcs_30_5[1] = {
+    {0, 5},
+};
+static arc arcs_30_6[1] = {
+    {83, 7},
+};
+static arc arcs_30_7[1] = {
+    {15, 5},
 };
-static state states_30[3] = {
+static state states_30[8] = {
     {1, arcs_30_0},
-    {2, arcs_30_1},
-    {2, arcs_30_2},
+    {3, arcs_30_1},
+    {4, arcs_30_2},
+    {1, arcs_30_3},
+    {3, arcs_30_4},
+    {1, arcs_30_5},
+    {1, arcs_30_6},
+    {1, arcs_30_7},
 };
 static arc arcs_31_0[1] = {
-    {81, 1},
+    {21, 1},
 };
 static arc arcs_31_1[2] = {
-    {29, 0},
+    {85, 2},
     {0, 1},
 };
-static state states_31[2] = {
+static arc arcs_31_2[1] = {
+    {21, 3},
+};
+static arc arcs_31_3[1] = {
+    {0, 3},
+};
+static state states_31[4] = {
     {1, arcs_31_0},
     {2, arcs_31_1},
+    {1, arcs_31_2},
+    {1, arcs_31_3},
 };
 static arc arcs_32_0[1] = {
-    {21, 1},
+    {12, 1},
 };
 static arc arcs_32_1[2] = {
-    {77, 0},
+    {85, 2},
     {0, 1},
 };
-static state states_32[2] = {
+static arc arcs_32_2[1] = {
+    {21, 3},
+};
+static arc arcs_32_3[1] = {
+    {0, 3},
+};
+static state states_32[4] = {
     {1, arcs_32_0},
     {2, arcs_32_1},
+    {1, arcs_32_2},
+    {1, arcs_32_3},
 };
 static arc arcs_33_0[1] = {
-    {82, 1},
+    {84, 1},
 };
-static arc arcs_33_1[1] = {
-    {21, 2},
+static arc arcs_33_1[2] = {
+    {30, 2},
+    {0, 1},
 };
 static arc arcs_33_2[2] = {
-    {29, 1},
+    {84, 1},
     {0, 2},
 };
 static state states_33[3] = {
     {1, arcs_33_0},
-    {1, arcs_33_1},
+    {2, arcs_33_1},
     {2, arcs_33_2},
 };
 static arc arcs_34_0[1] = {
-    {83, 1},
-};
-static arc arcs_34_1[1] = {
-    {84, 2},
-};
-static arc arcs_34_2[2] = {
-    {85, 3},
-    {0, 2},
+    {86, 1},
 };
-static arc arcs_34_3[1] = {
-    {28, 4},
+static arc arcs_34_1[2] = {
+    {30, 0},
+    {0, 1},
 };
-static arc arcs_34_4[2] = {
-    {29, 5},
-    {0, 4},
+static state states_34[2] = {
+    {1, arcs_34_0},
+    {2, arcs_34_1},
 };
-static arc arcs_34_5[1] = {
-    {28, 6},
+static arc arcs_35_0[1] = {
+    {21, 1},
 };
-static arc arcs_34_6[1] = {
-    {0, 6},
+static arc arcs_35_1[2] = {
+    {81, 0},
+    {0, 1},
 };
-static state states_34[7] = {
-    {1, arcs_34_0},
-    {1, arcs_34_1},
-    {2, arcs_34_2},
-    {1, arcs_34_3},
-    {2, arcs_34_4},
-    {1, arcs_34_5},
-    {1, arcs_34_6},
+static state states_35[2] = {
+    {1, arcs_35_0},
+    {2, arcs_35_1},
 };
-static arc arcs_35_0[1] = {
-    {86, 1},
+static arc arcs_36_0[1] = {
+    {87, 1},
 };
-static arc arcs_35_1[1] = {
-    {28, 2},
+static arc arcs_36_1[1] = {
+    {21, 2},
 };
-static arc arcs_35_2[2] = {
-    {29, 3},
+static arc arcs_36_2[2] = {
+    {30, 1},
     {0, 2},
 };
-static arc arcs_35_3[1] = {
-    {28, 4},
+static state states_36[3] = {
+    {1, arcs_36_0},
+    {1, arcs_36_1},
+    {2, arcs_36_2},
 };
-static arc arcs_35_4[1] = {
-    {0, 4},
+static arc arcs_37_0[1] = {
+    {88, 1},
 };
-static state states_35[5] = {
-    {1, arcs_35_0},
-    {1, arcs_35_1},
-    {2, arcs_35_2},
-    {1, arcs_35_3},
-    {1, arcs_35_4},
+static arc arcs_37_1[1] = {
+    {89, 2},
 };
-static arc arcs_36_0[8] = {
-    {87, 1},
-    {88, 1},
-    {89, 1},
-    {90, 1},
-    {91, 1},
-    {19, 1},
-    {18, 1},
-    {17, 1},
-};
-static arc arcs_36_1[1] = {
-    {0, 1},
-};
-static state states_36[2] = {
-    {8, arcs_36_0},
-    {1, arcs_36_1},
-};
-static arc arcs_37_0[1] = {
-    {92, 1},
-};
-static arc arcs_37_1[1] = {
-    {28, 2},
-};
-static arc arcs_37_2[1] = {
-    {23, 3},
+static arc arcs_37_2[2] = {
+    {90, 3},
+    {0, 2},
 };
 static arc arcs_37_3[1] = {
     {24, 4},
 };
-static arc arcs_37_4[3] = {
-    {93, 1},
-    {94, 5},
+static arc arcs_37_4[2] = {
+    {30, 5},
     {0, 4},
 };
 static arc arcs_37_5[1] = {
-    {23, 6},
+    {24, 6},
 };
 static arc arcs_37_6[1] = {
-    {24, 7},
-};
-static arc arcs_37_7[1] = {
-    {0, 7},
+    {0, 6},
 };
-static state states_37[8] = {
+static state states_37[7] = {
     {1, arcs_37_0},
     {1, arcs_37_1},
-    {1, arcs_37_2},
+    {2, arcs_37_2},
     {1, arcs_37_3},
-    {3, arcs_37_4},
+    {2, arcs_37_4},
     {1, arcs_37_5},
     {1, arcs_37_6},
-    {1, arcs_37_7},
 };
 static arc arcs_38_0[1] = {
-    {95, 1},
+    {91, 1},
 };
 static arc arcs_38_1[1] = {
-    {28, 2},
+    {24, 2},
 };
-static arc arcs_38_2[1] = {
-    {23, 3},
+static arc arcs_38_2[2] = {
+    {30, 3},
+    {0, 2},
 };
 static arc arcs_38_3[1] = {
     {24, 4},
 };
-static arc arcs_38_4[2] = {
-    {94, 5},
+static arc arcs_38_4[1] = {
     {0, 4},
 };
-static arc arcs_38_5[1] = {
-    {23, 6},
-};
-static arc arcs_38_6[1] = {
-    {24, 7},
-};
-static arc arcs_38_7[1] = {
-    {0, 7},
-};
-static state states_38[8] = {
+static state states_38[5] = {
     {1, arcs_38_0},
     {1, arcs_38_1},
-    {1, arcs_38_2},
+    {2, arcs_38_2},
     {1, arcs_38_3},
-    {2, arcs_38_4},
-    {1, arcs_38_5},
-    {1, arcs_38_6},
-    {1, arcs_38_7},
+    {1, arcs_38_4},
 };
-static arc arcs_39_0[1] = {
+static arc arcs_39_0[8] = {
+    {92, 1},
+    {93, 1},
+    {94, 1},
+    {95, 1},
     {96, 1},
+    {19, 1},
+    {18, 1},
+    {17, 1},
 };
 static arc arcs_39_1[1] = {
-    {61, 2},
-};
-static arc arcs_39_2[1] = {
-    {85, 3},
-};
-static arc arcs_39_3[1] = {
-    {9, 4},
-};
-static arc arcs_39_4[1] = {
-    {23, 5},
-};
-static arc arcs_39_5[1] = {
-    {24, 6},
-};
-static arc arcs_39_6[2] = {
-    {94, 7},
-    {0, 6},
-};
-static arc arcs_39_7[1] = {
-    {23, 8},
-};
-static arc arcs_39_8[1] = {
-    {24, 9},
-};
-static arc arcs_39_9[1] = {
-    {0, 9},
+    {0, 1},
 };
-static state states_39[10] = {
-    {1, arcs_39_0},
+static state states_39[2] = {
+    {8, arcs_39_0},
     {1, arcs_39_1},
-    {1, arcs_39_2},
-    {1, arcs_39_3},
-    {1, arcs_39_4},
-    {1, arcs_39_5},
-    {2, arcs_39_6},
-    {1, arcs_39_7},
-    {1, arcs_39_8},
-    {1, arcs_39_9},
 };
 static arc arcs_40_0[1] = {
     {97, 1},
 };
 static arc arcs_40_1[1] = {
-    {23, 2},
+    {24, 2},
 };
 static arc arcs_40_2[1] = {
-    {24, 3},
+    {25, 3},
 };
-static arc arcs_40_3[2] = {
-    {98, 4},
-    {99, 5},
+static arc arcs_40_3[1] = {
+    {26, 4},
 };
-static arc arcs_40_4[1] = {
-    {23, 6},
+static arc arcs_40_4[3] = {
+    {98, 1},
+    {99, 5},
+    {0, 4},
 };
 static arc arcs_40_5[1] = {
-    {23, 7},
+    {25, 6},
 };
 static arc arcs_40_6[1] = {
-    {24, 8},
+    {26, 7},
 };
 static arc arcs_40_7[1] = {
-    {24, 9},
-};
-static arc arcs_40_8[4] = {
-    {98, 4},
-    {94, 10},
-    {99, 5},
-    {0, 8},
-};
-static arc arcs_40_9[1] = {
-    {0, 9},
-};
-static arc arcs_40_10[1] = {
-    {23, 11},
-};
-static arc arcs_40_11[1] = {
-    {24, 12},
-};
-static arc arcs_40_12[2] = {
-    {99, 5},
-    {0, 12},
+    {0, 7},
 };
-static state states_40[13] = {
+static state states_40[8] = {
     {1, arcs_40_0},
     {1, arcs_40_1},
     {1, arcs_40_2},
-    {2, arcs_40_3},
-    {1, arcs_40_4},
+    {1, arcs_40_3},
+    {3, arcs_40_4},
     {1, arcs_40_5},
     {1, arcs_40_6},
     {1, arcs_40_7},
-    {4, arcs_40_8},
-    {1, arcs_40_9},
-    {1, arcs_40_10},
-    {1, arcs_40_11},
-    {2, arcs_40_12},
 };
 static arc arcs_41_0[1] = {
     {100, 1},
 };
 static arc arcs_41_1[1] = {
-    {101, 2},
+    {24, 2},
 };
-static arc arcs_41_2[2] = {
-    {29, 1},
-    {23, 3},
+static arc arcs_41_2[1] = {
+    {25, 3},
 };
 static arc arcs_41_3[1] = {
-    {24, 4},
+    {26, 4},
 };
-static arc arcs_41_4[1] = {
+static arc arcs_41_4[2] = {
+    {99, 5},
     {0, 4},
 };
-static state states_41[5] = {
+static arc arcs_41_5[1] = {
+    {25, 6},
+};
+static arc arcs_41_6[1] = {
+    {26, 7},
+};
+static arc arcs_41_7[1] = {
+    {0, 7},
+};
+static state states_41[8] = {
     {1, arcs_41_0},
     {1, arcs_41_1},
-    {2, arcs_41_2},
+    {1, arcs_41_2},
     {1, arcs_41_3},
-    {1, arcs_41_4},
+    {2, arcs_41_4},
+    {1, arcs_41_5},
+    {1, arcs_41_6},
+    {1, arcs_41_7},
 };
 static arc arcs_42_0[1] = {
-    {28, 1},
+    {101, 1},
 };
-static arc arcs_42_1[2] = {
-    {80, 2},
-    {0, 1},
+static arc arcs_42_1[1] = {
+    {65, 2},
 };
 static arc arcs_42_2[1] = {
-    {84, 3},
+    {90, 3},
 };
 static arc arcs_42_3[1] = {
-    {0, 3},
+    {9, 4},
+};
+static arc arcs_42_4[1] = {
+    {25, 5},
+};
+static arc arcs_42_5[1] = {
+    {26, 6},
+};
+static arc arcs_42_6[2] = {
+    {99, 7},
+    {0, 6},
+};
+static arc arcs_42_7[1] = {
+    {25, 8},
+};
+static arc arcs_42_8[1] = {
+    {26, 9},
+};
+static arc arcs_42_9[1] = {
+    {0, 9},
 };
-static state states_42[4] = {
+static state states_42[10] = {
     {1, arcs_42_0},
-    {2, arcs_42_1},
+    {1, arcs_42_1},
     {1, arcs_42_2},
     {1, arcs_42_3},
+    {1, arcs_42_4},
+    {1, arcs_42_5},
+    {2, arcs_42_6},
+    {1, arcs_42_7},
+    {1, arcs_42_8},
+    {1, arcs_42_9},
 };
 static arc arcs_43_0[1] = {
     {102, 1},
 };
-static arc arcs_43_1[2] = {
-    {28, 2},
-    {0, 1},
+static arc arcs_43_1[1] = {
+    {25, 2},
 };
-static arc arcs_43_2[3] = {
-    {80, 3},
-    {29, 3},
-    {0, 2},
+static arc arcs_43_2[1] = {
+    {26, 3},
 };
-static arc arcs_43_3[1] = {
-    {28, 4},
+static arc arcs_43_3[2] = {
+    {103, 4},
+    {104, 5},
 };
 static arc arcs_43_4[1] = {
-    {0, 4},
+    {25, 6},
+};
+static arc arcs_43_5[1] = {
+    {25, 7},
+};
+static arc arcs_43_6[1] = {
+    {26, 8},
 };
-static state states_43[5] = {
+static arc arcs_43_7[1] = {
+    {26, 9},
+};
+static arc arcs_43_8[4] = {
+    {103, 4},
+    {99, 10},
+    {104, 5},
+    {0, 8},
+};
+static arc arcs_43_9[1] = {
+    {0, 9},
+};
+static arc arcs_43_10[1] = {
+    {25, 11},
+};
+static arc arcs_43_11[1] = {
+    {26, 12},
+};
+static arc arcs_43_12[2] = {
+    {104, 5},
+    {0, 12},
+};
+static state states_43[13] = {
     {1, arcs_43_0},
-    {2, arcs_43_1},
-    {3, arcs_43_2},
-    {1, arcs_43_3},
+    {1, arcs_43_1},
+    {1, arcs_43_2},
+    {2, arcs_43_3},
     {1, arcs_43_4},
-};
-static arc arcs_44_0[2] = {
-    {3, 1},
-    {2, 2},
+    {1, arcs_43_5},
+    {1, arcs_43_6},
+    {1, arcs_43_7},
+    {4, arcs_43_8},
+    {1, arcs_43_9},
+    {1, arcs_43_10},
+    {1, arcs_43_11},
+    {2, arcs_43_12},
+};
+static arc arcs_44_0[1] = {
+    {105, 1},
 };
 static arc arcs_44_1[1] = {
-    {0, 1},
+    {106, 2},
 };
-static arc arcs_44_2[1] = {
-    {103, 3},
+static arc arcs_44_2[2] = {
+    {30, 1},
+    {25, 3},
 };
 static arc arcs_44_3[1] = {
-    {6, 4},
+    {26, 4},
 };
-static arc arcs_44_4[2] = {
-    {6, 4},
-    {104, 1},
+static arc arcs_44_4[1] = {
+    {0, 4},
 };
 static state states_44[5] = {
-    {2, arcs_44_0},
+    {1, arcs_44_0},
     {1, arcs_44_1},
-    {1, arcs_44_2},
+    {2, arcs_44_2},
     {1, arcs_44_3},
-    {2, arcs_44_4},
+    {1, arcs_44_4},
 };
 static arc arcs_45_0[1] = {
-    {106, 1},
+    {24, 1},
 };
 static arc arcs_45_1[2] = {
-    {29, 2},
+    {85, 2},
     {0, 1},
 };
 static arc arcs_45_2[1] = {
-    {106, 3},
+    {89, 3},
 };
-static arc arcs_45_3[2] = {
-    {29, 4},
+static arc arcs_45_3[1] = {
     {0, 3},
 };
-static arc arcs_45_4[2] = {
-    {106, 3},
-    {0, 4},
-};
-static state states_45[5] = {
+static state states_45[4] = {
     {1, arcs_45_0},
     {2, arcs_45_1},
     {1, arcs_45_2},
-    {2, arcs_45_3},
-    {2, arcs_45_4},
+    {1, arcs_45_3},
 };
-static arc arcs_46_0[2] = {
+static arc arcs_46_0[1] = {
     {107, 1},
-    {108, 1},
 };
-static arc arcs_46_1[1] = {
+static arc arcs_46_1[2] = {
+    {24, 2},
     {0, 1},
 };
-static state states_46[2] = {
-    {2, arcs_46_0},
-    {1, arcs_46_1},
+static arc arcs_46_2[3] = {
+    {85, 3},
+    {30, 3},
+    {0, 2},
 };
-static arc arcs_47_0[1] = {
-    {109, 1},
+static arc arcs_46_3[1] = {
+    {24, 4},
 };
-static arc arcs_47_1[2] = {
-    {25, 2},
-    {23, 3},
+static arc arcs_46_4[1] = {
+    {0, 4},
+};
+static state states_46[5] = {
+    {1, arcs_46_0},
+    {2, arcs_46_1},
+    {3, arcs_46_2},
+    {1, arcs_46_3},
+    {1, arcs_46_4},
+};
+static arc arcs_47_0[2] = {
+    {3, 1},
+    {2, 2},
+};
+static arc arcs_47_1[1] = {
+    {0, 1},
 };
 static arc arcs_47_2[1] = {
-    {23, 3},
+    {108, 3},
 };
 static arc arcs_47_3[1] = {
-    {106, 4},
+    {6, 4},
 };
-static arc arcs_47_4[1] = {
-    {0, 4},
+static arc arcs_47_4[2] = {
+    {6, 4},
+    {109, 1},
 };
 static state states_47[5] = {
-    {1, arcs_47_0},
-    {2, arcs_47_1},
+    {2, arcs_47_0},
+    {1, arcs_47_1},
     {1, arcs_47_2},
     {1, arcs_47_3},
-    {1, arcs_47_4},
+    {2, arcs_47_4},
 };
-static arc arcs_48_0[2] = {
-    {107, 1},
-    {110, 2},
+static arc arcs_48_0[1] = {
+    {111, 1},
 };
 static arc arcs_48_1[2] = {
-    {92, 3},
+    {30, 2},
     {0, 1},
 };
 static arc arcs_48_2[1] = {
-    {0, 2},
+    {111, 3},
 };
-static arc arcs_48_3[1] = {
-    {107, 4},
-};
-static arc arcs_48_4[1] = {
-    {94, 5},
+static arc arcs_48_3[2] = {
+    {30, 4},
+    {0, 3},
 };
-static arc arcs_48_5[1] = {
-    {28, 2},
+static arc arcs_48_4[2] = {
+    {111, 3},
+    {0, 4},
 };
-static state states_48[6] = {
-    {2, arcs_48_0},
+static state states_48[5] = {
+    {1, arcs_48_0},
     {2, arcs_48_1},
     {1, arcs_48_2},
-    {1, arcs_48_3},
-    {1, arcs_48_4},
-    {1, arcs_48_5},
+    {2, arcs_48_3},
+    {2, arcs_48_4},
 };
-static arc arcs_49_0[1] = {
-    {111, 1},
+static arc arcs_49_0[2] = {
+    {112, 1},
+    {113, 1},
 };
-static arc arcs_49_1[2] = {
-    {112, 0},
+static arc arcs_49_1[1] = {
     {0, 1},
 };
 static state states_49[2] = {
-    {1, arcs_49_0},
-    {2, arcs_49_1},
+    {2, arcs_49_0},
+    {1, arcs_49_1},
 };
 static arc arcs_50_0[1] = {
-    {113, 1},
+    {114, 1},
 };
 static arc arcs_50_1[2] = {
-    {114, 0},
-    {0, 1},
+    {34, 2},
+    {25, 3},
 };
-static state states_50[2] = {
+static arc arcs_50_2[1] = {
+    {25, 3},
+};
+static arc arcs_50_3[1] = {
+    {111, 4},
+};
+static arc arcs_50_4[1] = {
+    {0, 4},
+};
+static state states_50[5] = {
     {1, arcs_50_0},
     {2, arcs_50_1},
+    {1, arcs_50_2},
+    {1, arcs_50_3},
+    {1, arcs_50_4},
 };
 static arc arcs_51_0[2] = {
-    {115, 1},
-    {116, 2},
+    {112, 1},
+    {115, 2},
 };
-static arc arcs_51_1[1] = {
-    {113, 2},
+static arc arcs_51_1[2] = {
+    {97, 3},
+    {0, 1},
 };
 static arc arcs_51_2[1] = {
     {0, 2},
 };
-static state states_51[3] = {
+static arc arcs_51_3[1] = {
+    {112, 4},
+};
+static arc arcs_51_4[1] = {
+    {99, 5},
+};
+static arc arcs_51_5[1] = {
+    {24, 2},
+};
+static state states_51[6] = {
     {2, arcs_51_0},
-    {1, arcs_51_1},
+    {2, arcs_51_1},
     {1, arcs_51_2},
+    {1, arcs_51_3},
+    {1, arcs_51_4},
+    {1, arcs_51_5},
 };
 static arc arcs_52_0[1] = {
-    {84, 1},
+    {116, 1},
 };
 static arc arcs_52_1[2] = {
     {117, 0},
@@ -1123,619 +1195,592 @@ static state states_52[2] = {
     {1, arcs_52_0},
     {2, arcs_52_1},
 };
-static arc arcs_53_0[10] = {
+static arc arcs_53_0[1] = {
     {118, 1},
-    {119, 1},
-    {120, 1},
-    {121, 1},
-    {122, 1},
-    {123, 1},
-    {124, 1},
-    {85, 1},
-    {115, 2},
-    {125, 3},
 };
-static arc arcs_53_1[1] = {
+static arc arcs_53_1[2] = {
+    {119, 0},
     {0, 1},
 };
-static arc arcs_53_2[1] = {
-    {85, 1},
-};
-static arc arcs_53_3[2] = {
-    {115, 1},
-    {0, 3},
+static state states_53[2] = {
+    {1, arcs_53_0},
+    {2, arcs_53_1},
 };
-static state states_53[4] = {
-    {10, arcs_53_0},
-    {1, arcs_53_1},
-    {1, arcs_53_2},
-    {2, arcs_53_3},
+static arc arcs_54_0[2] = {
+    {120, 1},
+    {121, 2},
 };
-static arc arcs_54_0[1] = {
-    {126, 1},
+static arc arcs_54_1[1] = {
+    {118, 2},
 };
-static arc arcs_54_1[2] = {
-    {127, 0},
-    {0, 1},
+static arc arcs_54_2[1] = {
+    {0, 2},
 };
-static state states_54[2] = {
-    {1, arcs_54_0},
-    {2, arcs_54_1},
+static state states_54[3] = {
+    {2, arcs_54_0},
+    {1, arcs_54_1},
+    {1, arcs_54_2},
 };
 static arc arcs_55_0[1] = {
-    {128, 1},
+    {89, 1},
 };
 static arc arcs_55_1[2] = {
-    {129, 0},
+    {122, 0},
     {0, 1},
 };
 static state states_55[2] = {
     {1, arcs_55_0},
     {2, arcs_55_1},
 };
-static arc arcs_56_0[1] = {
-    {130, 1},
+static arc arcs_56_0[10] = {
+    {123, 1},
+    {124, 1},
+    {125, 1},
+    {126, 1},
+    {127, 1},
+    {128, 1},
+    {129, 1},
+    {90, 1},
+    {120, 2},
+    {130, 3},
 };
-static arc arcs_56_1[2] = {
-    {131, 0},
+static arc arcs_56_1[1] = {
     {0, 1},
 };
-static state states_56[2] = {
-    {1, arcs_56_0},
-    {2, arcs_56_1},
+static arc arcs_56_2[1] = {
+    {90, 1},
+};
+static arc arcs_56_3[2] = {
+    {120, 1},
+    {0, 3},
+};
+static state states_56[4] = {
+    {10, arcs_56_0},
+    {1, arcs_56_1},
+    {1, arcs_56_2},
+    {2, arcs_56_3},
 };
 static arc arcs_57_0[1] = {
-    {132, 1},
+    {131, 1},
 };
-static arc arcs_57_1[3] = {
-    {133, 0},
-    {59, 0},
+static arc arcs_57_1[2] = {
+    {132, 0},
     {0, 1},
 };
 static state states_57[2] = {
     {1, arcs_57_0},
-    {3, arcs_57_1},
+    {2, arcs_57_1},
 };
 static arc arcs_58_0[1] = {
-    {134, 1},
+    {133, 1},
 };
-static arc arcs_58_1[3] = {
-    {135, 0},
-    {136, 0},
+static arc arcs_58_1[2] = {
+    {134, 0},
     {0, 1},
 };
 static state states_58[2] = {
     {1, arcs_58_0},
-    {3, arcs_58_1},
+    {2, arcs_58_1},
 };
 static arc arcs_59_0[1] = {
+    {135, 1},
+};
+static arc arcs_59_1[2] = {
+    {136, 0},
+    {0, 1},
+};
+static state states_59[2] = {
+    {1, arcs_59_0},
+    {2, arcs_59_1},
+};
+static arc arcs_60_0[1] = {
     {137, 1},
 };
-static arc arcs_59_1[5] = {
-    {30, 0},
+static arc arcs_60_1[3] = {
     {138, 0},
-    {139, 0},
+    {63, 0},
+    {0, 1},
+};
+static state states_60[2] = {
+    {1, arcs_60_0},
+    {3, arcs_60_1},
+};
+static arc arcs_61_0[1] = {
+    {139, 1},
+};
+static arc arcs_61_1[3] = {
     {140, 0},
+    {141, 0},
     {0, 1},
 };
-static state states_59[2] = {
-    {1, arcs_59_0},
-    {5, arcs_59_1},
+static state states_61[2] = {
+    {1, arcs_61_0},
+    {3, arcs_61_1},
 };
-static arc arcs_60_0[4] = {
-    {135, 1},
-    {136, 1},
+static arc arcs_62_0[1] = {
+    {142, 1},
+};
+static arc arcs_62_1[5] = {
+    {31, 0},
+    {143, 0},
+    {144, 0},
+    {145, 0},
+    {0, 1},
+};
+static state states_62[2] = {
+    {1, arcs_62_0},
+    {5, arcs_62_1},
+};
+static arc arcs_63_0[4] = {
+    {140, 1},
     {141, 1},
-    {142, 2},
+    {146, 1},
+    {147, 2},
 };
-static arc arcs_60_1[1] = {
-    {137, 2},
+static arc arcs_63_1[1] = {
+    {142, 2},
 };
-static arc arcs_60_2[1] = {
+static arc arcs_63_2[1] = {
     {0, 2},
 };
-static state states_60[3] = {
-    {4, arcs_60_0},
-    {1, arcs_60_1},
-    {1, arcs_60_2},
+static state states_63[3] = {
+    {4, arcs_63_0},
+    {1, arcs_63_1},
+    {1, arcs_63_2},
 };
-static arc arcs_61_0[1] = {
-    {143, 1},
+static arc arcs_64_0[1] = {
+    {148, 1},
 };
-static arc arcs_61_1[3] = {
-    {144, 1},
-    {31, 2},
+static arc arcs_64_1[3] = {
+    {149, 1},
+    {33, 2},
     {0, 1},
 };
-static arc arcs_61_2[1] = {
-    {137, 3},
+static arc arcs_64_2[1] = {
+    {142, 3},
 };
-static arc arcs_61_3[1] = {
+static arc arcs_64_3[1] = {
     {0, 3},
 };
-static state states_61[4] = {
-    {1, arcs_61_0},
-    {3, arcs_61_1},
-    {1, arcs_61_2},
-    {1, arcs_61_3},
+static state states_64[4] = {
+    {1, arcs_64_0},
+    {3, arcs_64_1},
+    {1, arcs_64_2},
+    {1, arcs_64_3},
 };
-static arc arcs_62_0[7] = {
+static arc arcs_65_0[8] = {
     {13, 1},
-    {146, 2},
-    {149, 3},
-    {152, 4},
+    {151, 2},
+    {154, 3},
+    {157, 4},
     {21, 5},
-    {154, 5},
-    {155, 6},
+    {159, 5},
+    {160, 6},
+    {82, 5},
 };
-static arc arcs_62_1[3] = {
-    {45, 7},
-    {145, 7},
+static arc arcs_65_1[3] = {
+    {49, 7},
+    {150, 7},
     {15, 5},
 };
-static arc arcs_62_2[2] = {
-    {147, 8},
-    {148, 5},
+static arc arcs_65_2[2] = {
+    {152, 8},
+    {153, 5},
 };
-static arc arcs_62_3[2] = {
-    {150, 9},
-    {151, 5},
+static arc arcs_65_3[2] = {
+    {155, 9},
+    {156, 5},
 };
-static arc arcs_62_4[1] = {
-    {153, 10},
+static arc arcs_65_4[1] = {
+    {158, 10},
 };
-static arc arcs_62_5[1] = {
+static arc arcs_65_5[1] = {
     {0, 5},
 };
-static arc arcs_62_6[2] = {
-    {155, 6},
+static arc arcs_65_6[2] = {
+    {160, 6},
     {0, 6},
 };
-static arc arcs_62_7[1] = {
+static arc arcs_65_7[1] = {
     {15, 5},
 };
-static arc arcs_62_8[1] = {
-    {148, 5},
-};
-static arc arcs_62_9[1] = {
-    {151, 5},
-};
-static arc arcs_62_10[1] = {
-    {152, 5},
-};
-static state states_62[11] = {
-    {7, arcs_62_0},
-    {3, arcs_62_1},
-    {2, arcs_62_2},
-    {2, arcs_62_3},
-    {1, arcs_62_4},
-    {1, arcs_62_5},
-    {2, arcs_62_6},
-    {1, arcs_62_7},
-    {1, arcs_62_8},
-    {1, arcs_62_9},
-    {1, arcs_62_10},
-};
-static arc arcs_63_0[1] = {
-    {28, 1},
+static arc arcs_65_8[1] = {
+    {153, 5},
 };
-static arc arcs_63_1[3] = {
-    {156, 2},
-    {29, 3},
+static arc arcs_65_9[1] = {
+    {156, 5},
+};
+static arc arcs_65_10[1] = {
+    {157, 5},
+};
+static state states_65[11] = {
+    {8, arcs_65_0},
+    {3, arcs_65_1},
+    {2, arcs_65_2},
+    {2, arcs_65_3},
+    {1, arcs_65_4},
+    {1, arcs_65_5},
+    {2, arcs_65_6},
+    {1, arcs_65_7},
+    {1, arcs_65_8},
+    {1, arcs_65_9},
+    {1, arcs_65_10},
+};
+static arc arcs_66_0[1] = {
+    {24, 1},
+};
+static arc arcs_66_1[3] = {
+    {161, 2},
+    {30, 3},
     {0, 1},
 };
-static arc arcs_63_2[1] = {
+static arc arcs_66_2[1] = {
     {0, 2},
 };
-static arc arcs_63_3[2] = {
-    {28, 4},
+static arc arcs_66_3[2] = {
+    {24, 4},
     {0, 3},
 };
-static arc arcs_63_4[2] = {
-    {29, 3},
+static arc arcs_66_4[2] = {
+    {30, 3},
     {0, 4},
 };
-static state states_63[5] = {
-    {1, arcs_63_0},
-    {3, arcs_63_1},
-    {1, arcs_63_2},
-    {2, arcs_63_3},
-    {2, arcs_63_4},
+static state states_66[5] = {
+    {1, arcs_66_0},
+    {3, arcs_66_1},
+    {1, arcs_66_2},
+    {2, arcs_66_3},
+    {2, arcs_66_4},
 };
-static arc arcs_64_0[1] = {
-    {28, 1},
+static arc arcs_67_0[1] = {
+    {24, 1},
 };
-static arc arcs_64_1[3] = {
-    {157, 2},
-    {29, 3},
+static arc arcs_67_1[3] = {
+    {162, 2},
+    {30, 3},
     {0, 1},
 };
-static arc arcs_64_2[1] = {
+static arc arcs_67_2[1] = {
     {0, 2},
 };
-static arc arcs_64_3[2] = {
-    {28, 4},
+static arc arcs_67_3[2] = {
+    {24, 4},
     {0, 3},
 };
-static arc arcs_64_4[2] = {
-    {29, 3},
+static arc arcs_67_4[2] = {
+    {30, 3},
     {0, 4},
 };
-static state states_64[5] = {
-    {1, arcs_64_0},
-    {3, arcs_64_1},
-    {1, arcs_64_2},
-    {2, arcs_64_3},
-    {2, arcs_64_4},
+static state states_67[5] = {
+    {1, arcs_67_0},
+    {3, arcs_67_1},
+    {1, arcs_67_2},
+    {2, arcs_67_3},
+    {2, arcs_67_4},
 };
-static arc arcs_65_0[1] = {
-    {109, 1},
+static arc arcs_68_0[1] = {
+    {114, 1},
 };
-static arc arcs_65_1[2] = {
-    {25, 2},
-    {23, 3},
+static arc arcs_68_1[2] = {
+    {34, 2},
+    {25, 3},
 };
-static arc arcs_65_2[1] = {
-    {23, 3},
+static arc arcs_68_2[1] = {
+    {25, 3},
 };
-static arc arcs_65_3[1] = {
-    {28, 4},
+static arc arcs_68_3[1] = {
+    {24, 4},
 };
-static arc arcs_65_4[1] = {
+static arc arcs_68_4[1] = {
     {0, 4},
 };
-static state states_65[5] = {
-    {1, arcs_65_0},
-    {2, arcs_65_1},
-    {1, arcs_65_2},
-    {1, arcs_65_3},
-    {1, arcs_65_4},
+static state states_68[5] = {
+    {1, arcs_68_0},
+    {2, arcs_68_1},
+    {1, arcs_68_2},
+    {1, arcs_68_3},
+    {1, arcs_68_4},
 };
-static arc arcs_66_0[3] = {
+static arc arcs_69_0[3] = {
     {13, 1},
-    {146, 2},
-    {77, 3},
+    {151, 2},
+    {81, 3},
 };
-static arc arcs_66_1[2] = {
+static arc arcs_69_1[2] = {
     {14, 4},
     {15, 5},
 };
-static arc arcs_66_2[1] = {
-    {158, 6},
+static arc arcs_69_2[1] = {
+    {163, 6},
 };
-static arc arcs_66_3[1] = {
+static arc arcs_69_3[1] = {
     {21, 5},
 };
-static arc arcs_66_4[1] = {
+static arc arcs_69_4[1] = {
     {15, 5},
 };
-static arc arcs_66_5[1] = {
+static arc arcs_69_5[1] = {
     {0, 5},
 };
-static arc arcs_66_6[1] = {
-    {148, 5},
+static arc arcs_69_6[1] = {
+    {153, 5},
 };
-static state states_66[7] = {
-    {3, arcs_66_0},
-    {2, arcs_66_1},
-    {1, arcs_66_2},
-    {1, arcs_66_3},
-    {1, arcs_66_4},
-    {1, arcs_66_5},
-    {1, arcs_66_6},
+static state states_69[7] = {
+    {3, arcs_69_0},
+    {2, arcs_69_1},
+    {1, arcs_69_2},
+    {1, arcs_69_3},
+    {1, arcs_69_4},
+    {1, arcs_69_5},
+    {1, arcs_69_6},
 };
-static arc arcs_67_0[1] = {
-    {159, 1},
+static arc arcs_70_0[1] = {
+    {164, 1},
 };
-static arc arcs_67_1[2] = {
-    {29, 2},
+static arc arcs_70_1[2] = {
+    {30, 2},
     {0, 1},
 };
-static arc arcs_67_2[2] = {
-    {159, 1},
+static arc arcs_70_2[2] = {
+    {164, 1},
     {0, 2},
 };
-static state states_67[3] = {
-    {1, arcs_67_0},
-    {2, arcs_67_1},
-    {2, arcs_67_2},
+static state states_70[3] = {
+    {1, arcs_70_0},
+    {2, arcs_70_1},
+    {2, arcs_70_2},
 };
-static arc arcs_68_0[3] = {
-    {77, 1},
-    {28, 2},
-    {23, 3},
+static arc arcs_71_0[3] = {
+    {165, 1},
+    {24, 2},
+    {25, 3},
 };
-static arc arcs_68_1[1] = {
-    {77, 4},
+static arc arcs_71_1[1] = {
+    {0, 1},
 };
-static arc arcs_68_2[2] = {
-    {23, 3},
+static arc arcs_71_2[2] = {
+    {25, 3},
     {0, 2},
 };
-static arc arcs_68_3[3] = {
-    {28, 5},
-    {160, 6},
+static arc arcs_71_3[3] = {
+    {24, 4},
+    {166, 1},
     {0, 3},
 };
-static arc arcs_68_4[1] = {
-    {77, 6},
-};
-static arc arcs_68_5[2] = {
-    {160, 6},
-    {0, 5},
-};
-static arc arcs_68_6[1] = {
-    {0, 6},
+static arc arcs_71_4[2] = {
+    {166, 1},
+    {0, 4},
 };
-static state states_68[7] = {
-    {3, arcs_68_0},
-    {1, arcs_68_1},
-    {2, arcs_68_2},
-    {3, arcs_68_3},
-    {1, arcs_68_4},
-    {2, arcs_68_5},
-    {1, arcs_68_6},
+static state states_71[5] = {
+    {3, arcs_71_0},
+    {1, arcs_71_1},
+    {2, arcs_71_2},
+    {3, arcs_71_3},
+    {2, arcs_71_4},
 };
-static arc arcs_69_0[1] = {
-    {23, 1},
+static arc arcs_72_0[1] = {
+    {25, 1},
 };
-static arc arcs_69_1[2] = {
-    {28, 2},
+static arc arcs_72_1[2] = {
+    {24, 2},
     {0, 1},
 };
-static arc arcs_69_2[1] = {
+static arc arcs_72_2[1] = {
     {0, 2},
 };
-static state states_69[3] = {
-    {1, arcs_69_0},
-    {2, arcs_69_1},
-    {1, arcs_69_2},
+static state states_72[3] = {
+    {1, arcs_72_0},
+    {2, arcs_72_1},
+    {1, arcs_72_2},
 };
-static arc arcs_70_0[1] = {
-    {84, 1},
+static arc arcs_73_0[1] = {
+    {89, 1},
 };
-static arc arcs_70_1[2] = {
-    {29, 2},
+static arc arcs_73_1[2] = {
+    {30, 2},
     {0, 1},
 };
-static arc arcs_70_2[2] = {
-    {84, 1},
+static arc arcs_73_2[2] = {
+    {89, 1},
     {0, 2},
 };
-static state states_70[3] = {
-    {1, arcs_70_0},
-    {2, arcs_70_1},
-    {2, arcs_70_2},
+static state states_73[3] = {
+    {1, arcs_73_0},
+    {2, arcs_73_1},
+    {2, arcs_73_2},
 };
-static arc arcs_71_0[1] = {
-    {28, 1},
+static arc arcs_74_0[1] = {
+    {24, 1},
 };
-static arc arcs_71_1[2] = {
-    {29, 2},
+static arc arcs_74_1[2] = {
+    {30, 2},
     {0, 1},
 };
-static arc arcs_71_2[2] = {
-    {28, 1},
+static arc arcs_74_2[2] = {
+    {24, 1},
     {0, 2},
 };
-static state states_71[3] = {
-    {1, arcs_71_0},
-    {2, arcs_71_1},
-    {2, arcs_71_2},
+static state states_74[3] = {
+    {1, arcs_74_0},
+    {2, arcs_74_1},
+    {2, arcs_74_2},
 };
-static arc arcs_72_0[1] = {
-    {28, 1},
+static arc arcs_75_0[1] = {
+    {24, 1},
 };
-static arc arcs_72_1[4] = {
-    {23, 2},
-    {157, 3},
-    {29, 4},
+static arc arcs_75_1[4] = {
+    {25, 2},
+    {162, 3},
+    {30, 4},
     {0, 1},
 };
-static arc arcs_72_2[1] = {
-    {28, 5},
+static arc arcs_75_2[1] = {
+    {24, 5},
 };
-static arc arcs_72_3[1] = {
+static arc arcs_75_3[1] = {
     {0, 3},
 };
-static arc arcs_72_4[2] = {
-    {28, 6},
+static arc arcs_75_4[2] = {
+    {24, 6},
     {0, 4},
 };
-static arc arcs_72_5[3] = {
-    {157, 3},
-    {29, 7},
+static arc arcs_75_5[3] = {
+    {162, 3},
+    {30, 7},
     {0, 5},
 };
-static arc arcs_72_6[2] = {
-    {29, 4},
+static arc arcs_75_6[2] = {
+    {30, 4},
     {0, 6},
 };
-static arc arcs_72_7[2] = {
-    {28, 8},
+static arc arcs_75_7[2] = {
+    {24, 8},
     {0, 7},
 };
-static arc arcs_72_8[1] = {
-    {23, 9},
+static arc arcs_75_8[1] = {
+    {25, 9},
 };
-static arc arcs_72_9[1] = {
-    {28, 10},
+static arc arcs_75_9[1] = {
+    {24, 10},
 };
-static arc arcs_72_10[2] = {
-    {29, 7},
+static arc arcs_75_10[2] = {
+    {30, 7},
     {0, 10},
 };
-static state states_72[11] = {
-    {1, arcs_72_0},
-    {4, arcs_72_1},
-    {1, arcs_72_2},
-    {1, arcs_72_3},
-    {2, arcs_72_4},
-    {3, arcs_72_5},
-    {2, arcs_72_6},
-    {2, arcs_72_7},
-    {1, arcs_72_8},
-    {1, arcs_72_9},
-    {2, arcs_72_10},
+static state states_75[11] = {
+    {1, arcs_75_0},
+    {4, arcs_75_1},
+    {1, arcs_75_2},
+    {1, arcs_75_3},
+    {2, arcs_75_4},
+    {3, arcs_75_5},
+    {2, arcs_75_6},
+    {2, arcs_75_7},
+    {1, arcs_75_8},
+    {1, arcs_75_9},
+    {2, arcs_75_10},
 };
-static arc arcs_73_0[1] = {
-    {161, 1},
+static arc arcs_76_0[1] = {
+    {167, 1},
 };
-static arc arcs_73_1[1] = {
+static arc arcs_76_1[1] = {
     {21, 2},
 };
-static arc arcs_73_2[2] = {
+static arc arcs_76_2[2] = {
     {13, 3},
-    {23, 4},
+    {25, 4},
 };
-static arc arcs_73_3[2] = {
+static arc arcs_76_3[2] = {
     {9, 5},
     {15, 6},
 };
-static arc arcs_73_4[1] = {
-    {24, 7},
+static arc arcs_76_4[1] = {
+    {26, 7},
 };
-static arc arcs_73_5[1] = {
+static arc arcs_76_5[1] = {
     {15, 6},
 };
-static arc arcs_73_6[1] = {
-    {23, 4},
+static arc arcs_76_6[1] = {
+    {25, 4},
 };
-static arc arcs_73_7[1] = {
+static arc arcs_76_7[1] = {
     {0, 7},
 };
-static state states_73[8] = {
-    {1, arcs_73_0},
-    {1, arcs_73_1},
-    {2, arcs_73_2},
-    {2, arcs_73_3},
-    {1, arcs_73_4},
-    {1, arcs_73_5},
-    {1, arcs_73_6},
-    {1, arcs_73_7},
-};
-static arc arcs_74_0[3] = {
-    {162, 1},
-    {30, 2},
-    {31, 3},
+static state states_76[8] = {
+    {1, arcs_76_0},
+    {1, arcs_76_1},
+    {2, arcs_76_2},
+    {2, arcs_76_3},
+    {1, arcs_76_4},
+    {1, arcs_76_5},
+    {1, arcs_76_6},
+    {1, arcs_76_7},
+};
+static arc arcs_77_0[3] = {
+    {168, 1},
+    {31, 2},
+    {33, 3},
 };
-static arc arcs_74_1[2] = {
-    {29, 4},
+static arc arcs_77_1[2] = {
+    {30, 4},
     {0, 1},
 };
-static arc arcs_74_2[1] = {
-    {28, 5},
+static arc arcs_77_2[1] = {
+    {24, 5},
 };
-static arc arcs_74_3[1] = {
-    {28, 6},
+static arc arcs_77_3[1] = {
+    {24, 6},
 };
-static arc arcs_74_4[4] = {
-    {162, 1},
-    {30, 2},
-    {31, 3},
+static arc arcs_77_4[4] = {
+    {168, 1},
+    {31, 2},
+    {33, 3},
     {0, 4},
 };
-static arc arcs_74_5[2] = {
-    {29, 7},
+static arc arcs_77_5[2] = {
+    {30, 7},
     {0, 5},
 };
-static arc arcs_74_6[1] = {
+static arc arcs_77_6[1] = {
     {0, 6},
 };
-static arc arcs_74_7[2] = {
-    {162, 5},
-    {31, 3},
-};
-static state states_74[8] = {
-    {3, arcs_74_0},
-    {2, arcs_74_1},
-    {1, arcs_74_2},
-    {1, arcs_74_3},
-    {4, arcs_74_4},
-    {2, arcs_74_5},
-    {1, arcs_74_6},
-    {2, arcs_74_7},
-};
-static arc arcs_75_0[1] = {
-    {28, 1},
-};
-static arc arcs_75_1[3] = {
-    {157, 2},
-    {27, 3},
-    {0, 1},
-};
-static arc arcs_75_2[1] = {
-    {0, 2},
-};
-static arc arcs_75_3[1] = {
-    {28, 2},
-};
-static state states_75[4] = {
-    {1, arcs_75_0},
-    {3, arcs_75_1},
-    {1, arcs_75_2},
-    {1, arcs_75_3},
-};
-static arc arcs_76_0[2] = {
-    {156, 1},
-    {164, 1},
-};
-static arc arcs_76_1[1] = {
-    {0, 1},
-};
-static state states_76[2] = {
-    {2, arcs_76_0},
-    {1, arcs_76_1},
-};
-static arc arcs_77_0[1] = {
-    {96, 1},
-};
-static arc arcs_77_1[1] = {
-    {61, 2},
-};
-static arc arcs_77_2[1] = {
-    {85, 3},
-};
-static arc arcs_77_3[1] = {
-    {105, 4},
-};
-static arc arcs_77_4[2] = {
-    {163, 5},
-    {0, 4},
-};
-static arc arcs_77_5[1] = {
-    {0, 5},
+static arc arcs_77_7[2] = {
+    {168, 5},
+    {33, 3},
 };
-static state states_77[6] = {
-    {1, arcs_77_0},
-    {1, arcs_77_1},
+static state states_77[8] = {
+    {3, arcs_77_0},
+    {2, arcs_77_1},
     {1, arcs_77_2},
     {1, arcs_77_3},
-    {2, arcs_77_4},
-    {1, arcs_77_5},
+    {4, arcs_77_4},
+    {2, arcs_77_5},
+    {1, arcs_77_6},
+    {2, arcs_77_7},
 };
 static arc arcs_78_0[1] = {
-    {92, 1},
+    {24, 1},
 };
-static arc arcs_78_1[1] = {
-    {106, 2},
+static arc arcs_78_1[3] = {
+    {162, 2},
+    {29, 3},
+    {0, 1},
 };
-static arc arcs_78_2[2] = {
-    {163, 3},
+static arc arcs_78_2[1] = {
     {0, 2},
 };
 static arc arcs_78_3[1] = {
-    {0, 3},
+    {24, 2},
 };
 static state states_78[4] = {
     {1, arcs_78_0},
-    {1, arcs_78_1},
-    {2, arcs_78_2},
+    {3, arcs_78_1},
+    {1, arcs_78_2},
     {1, arcs_78_3},
 };
 static arc arcs_79_0[2] = {
-    {157, 1},
-    {166, 1},
+    {161, 1},
+    {170, 1},
 };
 static arc arcs_79_1[1] = {
     {0, 1},
@@ -1745,19 +1790,19 @@ static state states_79[2] = {
     {1, arcs_79_1},
 };
 static arc arcs_80_0[1] = {
-    {96, 1},
+    {101, 1},
 };
 static arc arcs_80_1[1] = {
-    {61, 2},
+    {65, 2},
 };
 static arc arcs_80_2[1] = {
-    {85, 3},
+    {90, 3},
 };
 static arc arcs_80_3[1] = {
-    {107, 4},
+    {110, 4},
 };
 static arc arcs_80_4[2] = {
-    {165, 5},
+    {169, 5},
     {0, 4},
 };
 static arc arcs_80_5[1] = {
@@ -1772,13 +1817,13 @@ static state states_80[6] = {
     {1, arcs_80_5},
 };
 static arc arcs_81_0[1] = {
-    {92, 1},
+    {97, 1},
 };
 static arc arcs_81_1[1] = {
-    {106, 2},
+    {111, 2},
 };
 static arc arcs_81_2[2] = {
-    {165, 3},
+    {169, 3},
     {0, 2},
 };
 static arc arcs_81_3[1] = {
@@ -1790,261 +1835,328 @@ static state states_81[4] = {
     {2, arcs_81_2},
     {1, arcs_81_3},
 };
-static arc arcs_82_0[1] = {
-    {28, 1},
+static arc arcs_82_0[2] = {
+    {162, 1},
+    {172, 1},
 };
-static arc arcs_82_1[2] = {
-    {29, 0},
+static arc arcs_82_1[1] = {
     {0, 1},
 };
 static state states_82[2] = {
-    {1, arcs_82_0},
-    {2, arcs_82_1},
+    {2, arcs_82_0},
+    {1, arcs_82_1},
 };
 static arc arcs_83_0[1] = {
-    {21, 1},
+    {101, 1},
 };
 static arc arcs_83_1[1] = {
-    {0, 1},
+    {65, 2},
+};
+static arc arcs_83_2[1] = {
+    {90, 3},
+};
+static arc arcs_83_3[1] = {
+    {112, 4},
 };
-static state states_83[2] = {
+static arc arcs_83_4[2] = {
+    {171, 5},
+    {0, 4},
+};
+static arc arcs_83_5[1] = {
+    {0, 5},
+};
+static state states_83[6] = {
     {1, arcs_83_0},
     {1, arcs_83_1},
+    {1, arcs_83_2},
+    {1, arcs_83_3},
+    {2, arcs_83_4},
+    {1, arcs_83_5},
 };
 static arc arcs_84_0[1] = {
-    {168, 1},
+    {97, 1},
+};
+static arc arcs_84_1[1] = {
+    {111, 2},
+};
+static arc arcs_84_2[2] = {
+    {171, 3},
+    {0, 2},
+};
+static arc arcs_84_3[1] = {
+    {0, 3},
+};
+static state states_84[4] = {
+    {1, arcs_84_0},
+    {1, arcs_84_1},
+    {2, arcs_84_2},
+    {1, arcs_84_3},
+};
+static arc arcs_85_0[1] = {
+    {24, 1},
+};
+static arc arcs_85_1[2] = {
+    {30, 0},
+    {0, 1},
+};
+static state states_85[2] = {
+    {1, arcs_85_0},
+    {2, arcs_85_1},
+};
+static arc arcs_86_0[1] = {
+    {21, 1},
 };
-static arc arcs_84_1[2] = {
+static arc arcs_86_1[1] = {
+    {0, 1},
+};
+static state states_86[2] = {
+    {1, arcs_86_0},
+    {1, arcs_86_1},
+};
+static arc arcs_87_0[1] = {
+    {174, 1},
+};
+static arc arcs_87_1[2] = {
     {9, 2},
     {0, 1},
 };
-static arc arcs_84_2[1] = {
+static arc arcs_87_2[1] = {
     {0, 2},
 };
-static state states_84[3] = {
-    {1, arcs_84_0},
-    {2, arcs_84_1},
-    {1, arcs_84_2},
+static state states_87[3] = {
+    {1, arcs_87_0},
+    {2, arcs_87_1},
+    {1, arcs_87_2},
 };
-static dfa dfas[85] = {
+static dfa dfas[88] = {
     {256, "single_input", 0, 3, states_0,
-     "\004\050\060\000\000\000\000\124\360\024\114\220\023\040\010\000\200\041\044\015\002\001"},
+     "\004\050\060\000\000\000\000\100\005\117\205\011\162\002\004\001\000\060\204\244\201\100"},
     {257, "file_input", 0, 2, states_1,
-     "\204\050\060\000\000\000\000\124\360\024\114\220\023\040\010\000\200\041\044\015\002\001"},
+     "\204\050\060\000\000\000\000\100\005\117\205\011\162\002\004\001\000\060\204\244\201\100"},
     {258, "eval_input", 0, 3, states_2,
-     "\000\040\040\000\000\000\000\000\000\000\000\000\000\040\010\000\200\041\044\015\000\000"},
+     "\000\040\040\000\000\000\000\000\000\000\004\000\000\000\004\001\000\060\204\244\001\000"},
     {259, "decorator", 0, 7, states_3,
      "\000\010\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"},
     {260, "decorators", 0, 2, states_4,
      "\000\010\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"},
     {261, "decorated", 0, 3, states_5,
      "\000\010\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"},
-    {262, "funcdef", 0, 6, states_6,
+    {262, "funcdef", 0, 8, states_6,
      "\000\000\020\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"},
     {263, "parameters", 0, 4, states_7,
      "\000\040\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"},
-    {264, "varargslist", 0, 10, states_8,
-     "\000\040\040\300\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"},
-    {265, "fpdef", 0, 4, states_9,
+    {264, "typedargslist", 0, 10, states_8,
+     "\000\040\040\200\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"},
+    {265, "varargslist", 0, 10, states_9,
+     "\000\040\040\200\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"},
+    {266, "fpdef", 0, 4, states_10,
      "\000\040\040\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"},
-    {266, "fplist", 0, 3, states_10,
+    {267, "fplist", 0, 3, states_11,
      "\000\040\040\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"},
-    {267, "stmt", 0, 2, states_11,
-     "\000\050\060\000\000\000\000\124\360\024\114\220\023\040\010\000\200\041\044\015\002\001"},
-    {268, "simple_stmt", 0, 4, states_12,
-     "\000\040\040\000\000\000\000\124\360\024\114\000\000\040\010\000\200\041\044\015\000\001"},
-    {269, "small_stmt", 0, 2, states_13,
-     "\000\040\040\000\000\000\000\124\360\024\114\000\000\040\010\000\200\041\044\015\000\001"},
-    {270, "expr_stmt", 0, 6, states_14,
-     "\000\040\040\000\000\000\000\000\000\000\000\000\000\040\010\000\200\041\044\015\000\000"},
-    {271, "augassign", 0, 2, states_15,
-     "\000\000\000\000\000\300\377\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000"},
-    {272, "print_stmt", 0, 9, states_16,
-     "\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000"},
-    {273, "del_stmt", 0, 3, states_17,
-     "\000\000\000\000\000\000\000\020\000\000\000\000\000\000\000\000\000\000\000\000\000\000"},
-    {274, "pass_stmt", 0, 2, states_18,
+    {268, "tdef", 0, 4, states_12,
+     "\000\000\040\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"},
+    {269, "tfpdef", 0, 6, states_13,
+     "\000\040\040\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"},
+    {270, "stmt", 0, 2, states_14,
+     "\000\050\060\000\000\000\000\100\005\117\205\011\162\002\004\001\000\060\204\244\201\100"},
+    {271, "simple_stmt", 0, 4, states_15,
+     "\000\040\040\000\000\000\000\100\005\117\205\011\000\000\004\001\000\060\204\244\001\100"},
+    {272, "small_stmt", 0, 2, states_16,
+     "\000\040\040\000\000\000\000\100\005\117\205\011\000\000\004\001\000\060\204\244\001\100"},
+    {273, "expr_stmt", 0, 6, states_17,
+     "\000\040\040\000\000\000\000\000\000\000\004\000\000\000\004\001\000\060\204\244\001\000"},
+    {274, "augassign", 0, 2, states_18,
+     "\000\000\000\000\000\000\374\077\000\000\000\000\000\000\000\000\000\000\000\000\000\000"},
+    {275, "print_stmt", 0, 9, states_19,
      "\000\000\000\000\000\000\000\100\000\000\000\000\000\000\000\000\000\000\000\000\000\000"},
-    {275, "flow_stmt", 0, 2, states_19,
-     "\000\000\000\000\000\000\000\000\360\000\000\000\000\000\000\000\000\000\000\000\000\001"},
-    {276, "break_stmt", 0, 2, states_20,
-     "\000\000\000\000\000\000\000\000\020\000\000\000\000\000\000\000\000\000\000\000\000\000"},
-    {277, "continue_stmt", 0, 2, states_21,
-     "\000\000\000\000\000\000\000\000\040\000\000\000\000\000\000\000\000\000\000\000\000\000"},
-    {278, "return_stmt", 0, 3, states_22,
-     "\000\000\000\000\000\000\000\000\100\000\000\000\000\000\000\000\000\000\000\000\000\000"},
-    {279, "yield_stmt", 0, 2, states_23,
-     "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001"},
-    {280, "raise_stmt", 0, 7, states_24,
-     "\000\000\000\000\000\000\000\000\200\000\000\000\000\000\000\000\000\000\000\000\000\000"},
-    {281, "import_stmt", 0, 2, states_25,
-     "\000\000\000\000\000\000\000\000\000\024\000\000\000\000\000\000\000\000\000\000\000\000"},
-    {282, "import_name", 0, 3, states_26,
+    {276, "del_stmt", 0, 3, states_20,
+     "\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000"},
+    {277, "pass_stmt", 0, 2, states_21,
+     "\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000"},
+    {278, "flow_stmt", 0, 2, states_22,
+     "\000\000\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\000\000\000\000\100"},
+    {279, "break_stmt", 0, 2, states_23,
+     "\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000"},
+    {280, "continue_stmt", 0, 2, states_24,
+     "\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000"},
+    {281, "return_stmt", 0, 3, states_25,
      "\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000"},
-    {283, "import_from", 0, 8, states_27,
-     "\000\000\000\000\000\000\000\000\000\020\000\000\000\000\000\000\000\000\000\000\000\000"},
-    {284, "import_as_name", 0, 4, states_28,
+    {282, "yield_stmt", 0, 2, states_26,
+     "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\100"},
+    {283, "raise_stmt", 0, 7, states_27,
+     "\000\000\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\000\000\000\000\000"},
+    {284, "import_stmt", 0, 2, states_28,
+     "\000\000\000\000\000\000\000\000\000\100\001\000\000\000\000\000\000\000\000\000\000\000"},
+    {285, "import_name", 0, 3, states_29,
+     "\000\000\000\000\000\000\000\000\000\100\000\000\000\000\000\000\000\000\000\000\000\000"},
+    {286, "import_from", 0, 8, states_30,
+     "\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000"},
+    {287, "import_as_name", 0, 4, states_31,
      "\000\000\040\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"},
-    {285, "dotted_as_name", 0, 4, states_29,
+    {288, "dotted_as_name", 0, 4, states_32,
      "\000\000\040\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"},
-    {286, "import_as_names", 0, 3, states_30,
+    {289, "import_as_names", 0, 3, states_33,
      "\000\000\040\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"},
-    {287, "dotted_as_names", 0, 2, states_31,
+    {290, "dotted_as_names", 0, 2, states_34,
      "\000\000\040\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"},
-    {288, "dotted_name", 0, 2, states_32,
+    {291, "dotted_name", 0, 2, states_35,
      "\000\000\040\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"},
-    {289, "global_stmt", 0, 3, states_33,
-     "\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000"},
-    {290, "exec_stmt", 0, 7, states_34,
-     "\000\000\000\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\000\000\000\000"},
-    {291, "assert_stmt", 0, 5, states_35,
-     "\000\000\000\000\000\000\000\000\000\000\100\000\000\000\000\000\000\000\000\000\000\000"},
-    {292, "compound_stmt", 0, 2, states_36,
-     "\000\010\020\000\000\000\000\000\000\000\000\220\023\000\000\000\000\000\000\000\002\000"},
-    {293, "if_stmt", 0, 8, states_37,
-     "\000\000\000\000\000\000\000\000\000\000\000\020\000\000\000\000\000\000\000\000\000\000"},
-    {294, "while_stmt", 0, 8, states_38,
-     "\000\000\000\000\000\000\000\000\000\000\000\200\000\000\000\000\000\000\000\000\000\000"},
-    {295, "for_stmt", 0, 10, states_39,
-     "\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000"},
-    {296, "try_stmt", 0, 13, states_40,
+    {292, "global_stmt", 0, 3, states_36,
+     "\000\000\000\000\000\000\000\000\000\000\200\000\000\000\000\000\000\000\000\000\000\000"},
+    {293, "exec_stmt", 0, 7, states_37,
+     "\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000"},
+    {294, "assert_stmt", 0, 5, states_38,
+     "\000\000\000\000\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\000\000\000"},
+    {295, "compound_stmt", 0, 2, states_39,
+     "\000\010\020\000\000\000\000\000\000\000\000\000\162\002\000\000\000\000\000\000\200\000"},
+    {296, "if_stmt", 0, 8, states_40,
      "\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000"},
-    {297, "with_stmt", 0, 5, states_41,
+    {297, "while_stmt", 0, 8, states_41,
      "\000\000\000\000\000\000\000\000\000\000\000\000\020\000\000\000\000\000\000\000\000\000"},
-    {298, "with_item", 0, 4, states_42,
-     "\000\040\040\000\000\000\000\000\000\000\000\000\000\040\010\000\200\041\044\015\000\000"},
-    {299, "except_clause", 0, 5, states_43,
+    {298, "for_stmt", 0, 10, states_42,
+     "\000\000\000\000\000\000\000\000\000\000\000\000\040\000\000\000\000\000\000\000\000\000"},
+    {299, "try_stmt", 0, 13, states_43,
      "\000\000\000\000\000\000\000\000\000\000\000\000\100\000\000\000\000\000\000\000\000\000"},
-    {300, "suite", 0, 5, states_44,
-     "\004\040\040\000\000\000\000\124\360\024\114\000\000\040\010\000\200\041\044\015\000\001"},
-    {301, "testlist_safe", 0, 5, states_45,
-     "\000\040\040\000\000\000\000\000\000\000\000\000\000\040\010\000\200\041\044\015\000\000"},
-    {302, "old_test", 0, 2, states_46,
-     "\000\040\040\000\000\000\000\000\000\000\000\000\000\040\010\000\200\041\044\015\000\000"},
-    {303, "old_lambdef", 0, 5, states_47,
-     "\000\000\000\000\000\000\000\000\000\000\000\000\000\040\000\000\000\000\000\000\000\000"},
-    {304, "test", 0, 6, states_48,
-     "\000\040\040\000\000\000\000\000\000\000\000\000\000\040\010\000\200\041\044\015\000\000"},
-    {305, "or_test", 0, 2, states_49,
-     "\000\040\040\000\000\000\000\000\000\000\000\000\000\000\010\000\200\041\044\015\000\000"},
-    {306, "and_test", 0, 2, states_50,
-     "\000\040\040\000\000\000\000\000\000\000\000\000\000\000\010\000\200\041\044\015\000\000"},
-    {307, "not_test", 0, 3, states_51,
-     "\000\040\040\000\000\000\000\000\000\000\000\000\000\000\010\000\200\041\044\015\000\000"},
-    {308, "comparison", 0, 2, states_52,
-     "\000\040\040\000\000\000\000\000\000\000\000\000\000\000\000\000\200\041\044\015\000\000"},
-    {309, "comp_op", 0, 4, states_53,
-     "\000\000\000\000\000\000\000\000\000\000\040\000\000\000\310\077\000\000\000\000\000\000"},
-    {310, "expr", 0, 2, states_54,
-     "\000\040\040\000\000\000\000\000\000\000\000\000\000\000\000\000\200\041\044\015\000\000"},
-    {311, "xor_expr", 0, 2, states_55,
-     "\000\040\040\000\000\000\000\000\000\000\000\000\000\000\000\000\200\041\044\015\000\000"},
-    {312, "and_expr", 0, 2, states_56,
-     "\000\040\040\000\000\000\000\000\000\000\000\000\000\000\000\000\200\041\044\015\000\000"},
-    {313, "shift_expr", 0, 2, states_57,
-     "\000\040\040\000\000\000\000\000\000\000\000\000\000\000\000\000\200\041\044\015\000\000"},
-    {314, "arith_expr", 0, 2, states_58,
-     "\000\040\040\000\000\000\000\000\000\000\000\000\000\000\000\000\200\041\044\015\000\000"},
-    {315, "term", 0, 2, states_59,
-     "\000\040\040\000\000\000\000\000\000\000\000\000\000\000\000\000\200\041\044\015\000\000"},
-    {316, "factor", 0, 3, states_60,
-     "\000\040\040\000\000\000\000\000\000\000\000\000\000\000\000\000\200\041\044\015\000\000"},
-    {317, "power", 0, 4, states_61,
-     "\000\040\040\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\044\015\000\000"},
-    {318, "atom", 0, 11, states_62,
-     "\000\040\040\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\044\015\000\000"},
-    {319, "listmaker", 0, 5, states_63,
-     "\000\040\040\000\000\000\000\000\000\000\000\000\000\040\010\000\200\041\044\015\000\000"},
-    {320, "testlist_comp", 0, 5, states_64,
-     "\000\040\040\000\000\000\000\000\000\000\000\000\000\040\010\000\200\041\044\015\000\000"},
-    {321, "lambdef", 0, 5, states_65,
-     "\000\000\000\000\000\000\000\000\000\000\000\000\000\040\000\000\000\000\000\000\000\000"},
-    {322, "trailer", 0, 7, states_66,
-     "\000\040\000\000\000\000\000\000\000\040\000\000\000\000\000\000\000\000\004\000\000\000"},
-    {323, "subscriptlist", 0, 3, states_67,
-     "\000\040\240\000\000\000\000\000\000\040\000\000\000\040\010\000\200\041\044\015\000\000"},
-    {324, "subscript", 0, 7, states_68,
-     "\000\040\240\000\000\000\000\000\000\040\000\000\000\040\010\000\200\041\044\015\000\000"},
-    {325, "sliceop", 0, 3, states_69,
-     "\000\000\200\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"},
-    {326, "exprlist", 0, 3, states_70,
-     "\000\040\040\000\000\000\000\000\000\000\000\000\000\000\000\000\200\041\044\015\000\000"},
-    {327, "testlist", 0, 3, states_71,
-     "\000\040\040\000\000\000\000\000\000\000\000\000\000\040\010\000\200\041\044\015\000\000"},
-    {328, "dictorsetmaker", 0, 11, states_72,
-     "\000\040\040\000\000\000\000\000\000\000\000\000\000\040\010\000\200\041\044\015\000\000"},
-    {329, "classdef", 0, 8, states_73,
-     "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000"},
-    {330, "arglist", 0, 8, states_74,
-     "\000\040\040\300\000\000\000\000\000\000\000\000\000\040\010\000\200\041\044\015\000\000"},
-    {331, "argument", 0, 4, states_75,
-     "\000\040\040\000\000\000\000\000\000\000\000\000\000\040\010\000\200\041\044\015\000\000"},
-    {332, "list_iter", 0, 2, states_76,
-     "\000\000\000\000\000\000\000\000\000\000\000\020\001\000\000\000\000\000\000\000\000\000"},
-    {333, "list_for", 0, 6, states_77,
-     "\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000"},
-    {334, "list_if", 0, 4, states_78,
-     "\000\000\000\000\000\000\000\000\000\000\000\020\000\000\000\000\000\000\000\000\000\000"},
-    {335, "comp_iter", 0, 2, states_79,
-     "\000\000\000\000\000\000\000\000\000\000\000\020\001\000\000\000\000\000\000\000\000\000"},
-    {336, "comp_for", 0, 6, states_80,
-     "\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000"},
-    {337, "comp_if", 0, 4, states_81,
-     "\000\000\000\000\000\000\000\000\000\000\000\020\000\000\000\000\000\000\000\000\000\000"},
-    {338, "testlist1", 0, 2, states_82,
-     "\000\040\040\000\000\000\000\000\000\000\000\000\000\040\010\000\200\041\044\015\000\000"},
-    {339, "encoding_decl", 0, 2, states_83,
+    {300, "with_stmt", 0, 5, states_44,
+     "\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000"},
+    {301, "with_item", 0, 4, states_45,
+     "\000\040\040\000\000\000\000\000\000\000\004\000\000\000\004\001\000\060\204\244\001\000"},
+    {302, "except_clause", 0, 5, states_46,
+     "\000\000\000\000\000\000\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\000"},
+    {303, "suite", 0, 5, states_47,
+     "\004\040\040\000\000\000\000\100\005\117\205\011\000\000\004\001\000\060\204\244\001\100"},
+    {304, "testlist_safe", 0, 5, states_48,
+     "\000\040\040\000\000\000\000\000\000\000\004\000\000\000\004\001\000\060\204\244\001\000"},
+    {305, "old_test", 0, 2, states_49,
+     "\000\040\040\000\000\000\000\000\000\000\004\000\000\000\004\001\000\060\204\244\001\000"},
+    {306, "old_lambdef", 0, 5, states_50,
+     "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000"},
+    {307, "test", 0, 6, states_51,
+     "\000\040\040\000\000\000\000\000\000\000\004\000\000\000\004\001\000\060\204\244\001\000"},
+    {308, "or_test", 0, 2, states_52,
+     "\000\040\040\000\000\000\000\000\000\000\004\000\000\000\000\001\000\060\204\244\001\000"},
+    {309, "and_test", 0, 2, states_53,
+     "\000\040\040\000\000\000\000\000\000\000\004\000\000\000\000\001\000\060\204\244\001\000"},
+    {310, "not_test", 0, 3, states_54,
+     "\000\040\040\000\000\000\000\000\000\000\004\000\000\000\000\001\000\060\204\244\001\000"},
+    {311, "comparison", 0, 2, states_55,
+     "\000\040\040\000\000\000\000\000\000\000\004\000\000\000\000\000\000\060\204\244\001\000"},
+    {312, "comp_op", 0, 4, states_56,
+     "\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\371\007\000\000\000\000\000"},
+    {313, "expr", 0, 2, states_57,
+     "\000\040\040\000\000\000\000\000\000\000\004\000\000\000\000\000\000\060\204\244\001\000"},
+    {314, "xor_expr", 0, 2, states_58,
+     "\000\040\040\000\000\000\000\000\000\000\004\000\000\000\000\000\000\060\204\244\001\000"},
+    {315, "and_expr", 0, 2, states_59,
+     "\000\040\040\000\000\000\000\000\000\000\004\000\000\000\000\000\000\060\204\244\001\000"},
+    {316, "shift_expr", 0, 2, states_60,
+     "\000\040\040\000\000\000\000\000\000\000\004\000\000\000\000\000\000\060\204\244\001\000"},
+    {317, "arith_expr", 0, 2, states_61,
+     "\000\040\040\000\000\000\000\000\000\000\004\000\000\000\000\000\000\060\204\244\001\000"},
+    {318, "term", 0, 2, states_62,
+     "\000\040\040\000\000\000\000\000\000\000\004\000\000\000\000\000\000\060\204\244\001\000"},
+    {319, "factor", 0, 3, states_63,
+     "\000\040\040\000\000\000\000\000\000\000\004\000\000\000\000\000\000\060\204\244\001\000"},
+    {320, "power", 0, 4, states_64,
+     "\000\040\040\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\200\244\001\000"},
+    {321, "atom", 0, 11, states_65,
+     "\000\040\040\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\200\244\001\000"},
+    {322, "listmaker", 0, 5, states_66,
+     "\000\040\040\000\000\000\000\000\000\000\004\000\000\000\004\001\000\060\204\244\001\000"},
+    {323, "testlist_comp", 0, 5, states_67,
+     "\000\040\040\000\000\000\000\000\000\000\004\000\000\000\004\001\000\060\204\244\001\000"},
+    {324, "lambdef", 0, 5, states_68,
+     "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000"},
+    {325, "trailer", 0, 7, states_69,
+     "\000\040\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\200\000\000\000"},
+    {326, "subscriptlist", 0, 3, states_70,
+     "\000\040\040\002\000\000\000\000\000\000\004\000\000\000\004\001\000\060\204\244\041\000"},
+    {327, "subscript", 0, 5, states_71,
+     "\000\040\040\002\000\000\000\000\000\000\004\000\000\000\004\001\000\060\204\244\041\000"},
+    {328, "sliceop", 0, 3, states_72,
+     "\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"},
+    {329, "exprlist", 0, 3, states_73,
+     "\000\040\040\000\000\000\000\000\000\000\004\000\000\000\000\000\000\060\204\244\001\000"},
+    {330, "testlist", 0, 3, states_74,
+     "\000\040\040\000\000\000\000\000\000\000\004\000\000\000\004\001\000\060\204\244\001\000"},
+    {331, "dictorsetmaker", 0, 11, states_75,
+     "\000\040\040\000\000\000\000\000\000\000\004\000\000\000\004\001\000\060\204\244\001\000"},
+    {332, "classdef", 0, 8, states_76,
+     "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\200\000"},
+    {333, "arglist", 0, 8, states_77,
+     "\000\040\040\200\002\000\000\000\000\000\004\000\000\000\004\001\000\060\204\244\001\000"},
+    {334, "argument", 0, 4, states_78,
+     "\000\040\040\000\000\000\000\000\000\000\004\000\000\000\004\001\000\060\204\244\001\000"},
+    {335, "list_iter", 0, 2, states_79,
+     "\000\000\000\000\000\000\000\000\000\000\000\000\042\000\000\000\000\000\000\000\000\000"},
+    {336, "list_for", 0, 6, states_80,
+     "\000\000\000\000\000\000\000\000\000\000\000\000\040\000\000\000\000\000\000\000\000\000"},
+    {337, "list_if", 0, 4, states_81,
+     "\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000"},
+    {338, "comp_iter", 0, 2, states_82,
+     "\000\000\000\000\000\000\000\000\000\000\000\000\042\000\000\000\000\000\000\000\000\000"},
+    {339, "comp_for", 0, 6, states_83,
+     "\000\000\000\000\000\000\000\000\000\000\000\000\040\000\000\000\000\000\000\000\000\000"},
+    {340, "comp_if", 0, 4, states_84,
+     "\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000"},
+    {341, "testlist1", 0, 2, states_85,
+     "\000\040\040\000\000\000\000\000\000\000\004\000\000\000\004\001\000\060\204\244\001\000"},
+    {342, "encoding_decl", 0, 2, states_86,
      "\000\000\040\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"},
-    {340, "yield_expr", 0, 3, states_84,
-     "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001"},
+    {343, "yield_expr", 0, 3, states_87,
+     "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\100"},
 };
-static label labels[169] = {
+static label labels[175] = {
     {0, "EMPTY"},
     {256, 0},
     {4, 0},
-    {268, 0},
-    {292, 0},
+    {271, 0},
+    {295, 0},
     {257, 0},
-    {267, 0},
+    {270, 0},
     {0, 0},
     {258, 0},
-    {327, 0},
+    {330, 0},
     {259, 0},
     {50, 0},
-    {288, 0},
+    {291, 0},
     {7, 0},
-    {330, 0},
+    {333, 0},
     {8, 0},
     {260, 0},
     {261, 0},
-    {329, 0},
+    {332, 0},
     {262, 0},
     {1, "def"},
     {1, 0},
     {263, 0},
+    {51, 0},
+    {307, 0},
     {11, 0},
-    {300, 0},
+    {303, 0},
     {264, 0},
-    {265, 0},
+    {269, 0},
     {22, 0},
-    {304, 0},
     {12, 0},
     {16, 0},
+    {268, 0},
     {36, 0},
+    {265, 0},
     {266, 0},
-    {269, 0},
-    {13, 0},
-    {270, 0},
+    {267, 0},
     {272, 0},
+    {13, 0},
     {273, 0},
-    {274, 0},
     {275, 0},
-    {281, 0},
-    {289, 0},
-    {290, 0},
-    {291, 0},
-    {271, 0},
-    {340, 0},
+    {276, 0},
+    {277, 0},
+    {278, 0},
+    {284, 0},
+    {292, 0},
+    {293, 0},
+    {294, 0},
+    {274, 0},
+    {343, 0},
     {37, 0},
     {38, 0},
     {39, 0},
@@ -2060,63 +2172,64 @@ static label labels[169] = {
     {1, "print"},
     {35, 0},
     {1, "del"},
-    {326, 0},
+    {329, 0},
     {1, "pass"},
-    {276, 0},
-    {277, 0},
-    {278, 0},
-    {280, 0},
     {279, 0},
+    {280, 0},
+    {281, 0},
+    {283, 0},
+    {282, 0},
     {1, "break"},
     {1, "continue"},
     {1, "return"},
     {1, "raise"},
-    {282, 0},
-    {283, 0},
+    {285, 0},
+    {286, 0},
     {1, "import"},
-    {287, 0},
+    {290, 0},
     {1, "from"},
     {23, 0},
-    {286, 0},
-    {284, 0},
+    {52, 0},
+    {289, 0},
+    {287, 0},
     {1, "as"},
-    {285, 0},
+    {288, 0},
     {1, "global"},
     {1, "exec"},
-    {310, 0},
+    {313, 0},
     {1, "in"},
     {1, "assert"},
-    {293, 0},
-    {294, 0},
-    {295, 0},
     {296, 0},
     {297, 0},
+    {298, 0},
+    {299, 0},
+    {300, 0},
     {1, "if"},
     {1, "elif"},
     {1, "else"},
     {1, "while"},
     {1, "for"},
     {1, "try"},
-    {299, 0},
+    {302, 0},
     {1, "finally"},
     {1, "with"},
-    {298, 0},
+    {301, 0},
     {1, "except"},
     {5, 0},
     {6, 0},
-    {301, 0},
-    {302, 0},
+    {304, 0},
     {305, 0},
-    {303, 0},
-    {1, "lambda"},
-    {321, 0},
+    {308, 0},
     {306, 0},
+    {1, "lambda"},
+    {324, 0},
+    {309, 0},
     {1, "or"},
-    {307, 0},
+    {310, 0},
     {1, "and"},
     {1, "not"},
-    {308, 0},
-    {309, 0},
+    {311, 0},
+    {312, 0},
     {20, 0},
     {21, 0},
     {28, 0},
@@ -2125,53 +2238,54 @@ static label labels[169] = {
     {29, 0},
     {29, 0},
     {1, "is"},
-    {311, 0},
+    {314, 0},
     {18, 0},
-    {312, 0},
+    {315, 0},
     {33, 0},
-    {313, 0},
+    {316, 0},
     {19, 0},
-    {314, 0},
+    {317, 0},
     {34, 0},
-    {315, 0},
+    {318, 0},
     {14, 0},
     {15, 0},
-    {316, 0},
+    {319, 0},
     {17, 0},
     {24, 0},
     {48, 0},
     {32, 0},
-    {317, 0},
-    {318, 0},
-    {322, 0},
     {320, 0},
+    {321, 0},
+    {325, 0},
+    {323, 0},
     {9, 0},
-    {319, 0},
+    {322, 0},
     {10, 0},
     {26, 0},
-    {328, 0},
+    {331, 0},
     {27, 0},
     {25, 0},
-    {338, 0},
+    {341, 0},
     {2, 0},
     {3, 0},
-    {333, 0},
     {336, 0},
-    {323, 0},
-    {324, 0},
-    {325, 0},
+    {339, 0},
+    {326, 0},
+    {327, 0},
+    {52, 0},
+    {328, 0},
     {1, "class"},
-    {331, 0},
-    {332, 0},
     {334, 0},
     {335, 0},
     {337, 0},
-    {339, 0},
+    {338, 0},
+    {340, 0},
+    {342, 0},
     {1, "yield"},
 };
 grammar _PyParser_Grammar = {
-    85,
+    88,
     dfas,
-    {169, labels},
+    {175, labels},
     256
 };
diff --git a/Python/pythonrun.c b/Python/pythonrun.c
index 5707c9f524..4151ce596b 100644
--- a/Python/pythonrun.c
+++ b/Python/pythonrun.c
@@ -71,6 +71,7 @@ int Py_InteractiveFlag; /* Needed by Py_FdIsInteractive() below */
 int Py_InspectFlag; /* Needed to determine whether to exit at SystemExit */
 int Py_NoSiteFlag; /* Suppress 'import site' */
 int Py_BytesWarningFlag; /* Warn on str(bytes) and str(buffer) */
+int Py_TypeAnnotationFlag = 0; /* Write bytecode for type annotations */
 int Py_DontWriteBytecodeFlag; /* Suppress writing bytecode files (*.py[co]) */
 int Py_UseClassExceptionsFlag = 1; /* Needed by bltinmodule.c: deprecated */
 int Py_FrozenFlag; /* Needed by getpath.c */
@@ -809,6 +810,8 @@ PyRun_InteractiveLoopFlags(FILE *fp, const char *filename, PyCompilerFlags *flag
                    PyPARSE_PRINT_IS_FUNCTION : 0) \
                 | (((flags)->cf_flags & CO_FUTURE_UNICODE_LITERALS) ? \
                    PyPARSE_UNICODE_LITERALS : 0) \
+                | (((flags)->cf_flags & CO_FUTURE_GOOGLE_TYPE_ANNOTATIONS) ? \
+                   PyPARSE_GOOGLE_TYPE_ANNOTATIONS : 0) \
                 ) : 0)
 #endif
 
diff --git a/Python/symtable.c b/Python/symtable.c
index 21790b1cd1..7401a063b2 100644
--- a/Python/symtable.c
+++ b/Python/symtable.c
@@ -1012,6 +1012,19 @@ symtable_visit_stmt(struct symtable *st, stmt_ty s)
             return 0;
         if (s->v.FunctionDef.args->defaults)
             VISIT_SEQ(st, expr, s->v.FunctionDef.args->defaults);
+        if (s->v.FunctionDef.args->types) {
+            asdl_seq *types = s->v.FunctionDef.args->types;
+            int i;
+            for (i = 0; i < asdl_seq_LEN(types); i++) {
+                expr_ty type = (expr_ty)asdl_seq_GET(types, i);
+                if (type) {
+                    symtable_visit_expr(st, type);
+                }
+            }
+        }
+        if (s->v.FunctionDef.returns) {
+            symtable_visit_expr(st, s->v.FunctionDef.returns);
+        }
         if (s->v.FunctionDef.decorator_list)
             VISIT_SEQ(st, expr, s->v.FunctionDef.decorator_list);
         if (!symtable_enter_block(st, s->v.FunctionDef.name,
@@ -1272,6 +1285,7 @@ symtable_visit_expr(struct symtable *st, expr_ty e)
         break;
     case Num_kind:
     case Str_kind:
+    case Ellipsis_kind:
         /* Nothing to do here. */
         break;
     /* The following exprs can be assignment targets. */
@@ -1475,8 +1489,6 @@ symtable_visit_slice(struct symtable *st, slice_ty s)
     case Index_kind:
         VISIT(st, expr, s->v.Index.value)
         break;
-    case Ellipsis_kind:
-        break;
     }
     return 1;
 }
