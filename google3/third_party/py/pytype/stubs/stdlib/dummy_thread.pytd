# This module does not exist in typeshed.
from typing import Any, Callable

__all__ = ...  # type: list[str]
_interrupt = ...  # type: bool
_main = ...  # type: bool
_traceback = ...  # type: Any

def allocate_lock() -> LockType: ...
def exit() -> Any: ...
def get_ident() -> int: ...
def interrupt_main() -> NoneType: ...
def stack_size(*args, **kwargs) -> int: ...
def start_new_thread(function: Callable, args: tuple, kwargs: dict = ...) -> NoneType: ...

class LockType(object):
    __doc__ = ...  # type: str
    locked_status = ...  # type: bool
    def __enter__(self, *args, **kwargs) -> bool: ...
    def __exit__(self, typ, val, tb) -> NoneType: ...
    def acquire(self, *args, **kwargs) -> bool: ...
    def locked(self) -> bool: ...
    def release(self) -> bool: ...

class error(Exception):
    __doc__ = ...  # type: str
    args = ...  # type: tuple
